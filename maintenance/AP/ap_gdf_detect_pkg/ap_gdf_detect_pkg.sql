REM +=======================================================================+
REM |    Copyright (c) 2011 Oracle Corporation, Redwood Shores, CA, USA     |
REM |                         All rights reserved.                          |
REM +=======================================================================+
REM | FILENAME                                                              |
REM |   ap_gdf_detect_pkg.sql                                               |
REM |                                                                       |
REM | DESCRIPTION                                                           |
REM |   Script to diagnose data integrity issues in Payables.               |
REM |                                                                       |
REM | HISTORY                                                               |
REM | 27-SEP-2011 ALUMPE Created                                            |
REM | 27-OCT-2011 ALUMPE Modified at dev request to only allow date ranges  |
REM |                    with dates in open periods (for all the OU's)and   |
REM |                    and only run GDF signatures when using date range  |
REM |             ALUMPE Modified to run for paid invoices for checks       |
REM |                    and pre-payments for invoices when running in      |
REM |                    single transaction mode.                           |
REM | 08-NOV-2011 ALUMPE Added logic to run supplier/vendor GDF queries     |
REM | 06-DEC-2011 ALUMPE Added elapsed time information to report output    |
REM |                    and added additional signatures.                   |
REM | 18-JAN-2012 ALUMPE Moved uom_convert into independed function so      |
REM |                    that it can be created independently if needed     |
REM |                    in diagnostics.                                    |
REM | 31-AUG-2012 ALUMPE Replace uom_convert independent function with a    |
REM |                    package of functions. Additional ones needed to    |
REM |                    address performance in ApPrepayIncorrAcctgSel.sql  |
REM | 17-SEP-2012 ALUMPE Add types for extension of RPC checking            |
REM | 01-MAR-2013 ALUMPE Added code for including flows/impacts associated  |
REM |                    with each signature as available.                  |
REM | 14-NOV-2013 ALUMPE Added table for tracking and printing impacts      |
REM |                    summary table and doing highlighting               |
REM | 27-JAN-2014 ALUMPE Added gdf_flag and category to the signature rec   |
REM |                    For use in DX summary and single signature table   |
REM |                    load.                                              |
REM | 26-AUG-2915 ALUMPE Added hash_tbl_2k type for addition of an analyzer |
REM |                    style DX summary.                                  |
REM |                                                                       |
REM +=======================================================================+

CREATE OR REPLACE PACKAGE ap_gdf_fcns AUTHID CURRENT_USER AS
-- $Id: ap_gdf_detect_pkg.sql,v 200.354 2016/07/07 20:16:56 alumpe Exp $
  FUNCTION uom_convert (
    p_from_unit  IN VARCHAR2,
    p_to_unit    IN VARCHAR2,
    p_item_id    IN NUMBER) RETURN NUMBER;

  FUNCTION net_pp_app(p_event_id NUMBER) RETURN NUMBER;

  FUNCTION net_pp_acct(
    p_event_id NUMBER,
    p_ledger_id NUMBER) RETURN NUMBER;

  FUNCTION net_adj_acct(
    p_event_id NUMBER,
    p_ledger_id NUMBER) RETURN NUMBER;

END ap_gdf_fcns;
/
show errors

CREATE OR REPLACE PACKAGE ap_gdf_detect_pkg AUTHID CURRENT_USER AS
-- $Id: ap_gdf_detect_pkg.sql,v 200.354 2016/07/07 20:16:56 alumpe Exp $

-----------------------------------
-- Type declarations
-----------------------------------
TYPE impact_area_tbl IS TABLE OF VARCHAR2(30);
TYPE impacts_tbl     IS TABLE OF NUMBER INDEX BY VARCHAR2(100);
TYPE hash_tbl_2k     IS TABLE OF VARCHAR2(2000) INDEX BY VARCHAR2(255);


TYPE signature_rec IS RECORD(
  SIG_ID                NUMBER,
  CATEGORY              VARCHAR2(20),
  SUB_CATEGORY          VARCHAR2(20),
  BUG_NUMBER            VARCHAR2(20),
  NOTE_NUMBER           VARCHAR2(20),
  SCRIPT_NAME           VARCHAR2(200),
  PROBLEM_TEXT          VARCHAR2(4000),
  FIX_TEXT              VARCHAR2(4000),
  GDF_FLAG              VARCHAR2(1) default 'N',
  UNDOES_ACCOUNTING     VARCHAR2(1) default 'N',
  IMPACT_AREAS          IMPACT_AREA_TBL,
  SIGNATURE_SQL         VARCHAR2(32000)
);

TYPE signature_tbl IS TABLE OF signature_rec;

TYPE patch_rec IS RECORD(
  PATCH_TYPE  VARCHAR2(15),
  PATCH_NUM   VARCHAR2(40),
  DESCRIPTION VARCHAR2(1000),
  RELEASED    VARCHAR2(15));

TYPE patch_tbl IS TABLE OF patch_rec;

TYPE col_list_tbl IS TABLE OF DBMS_SQL.VARCHAR2_TABLE;
TYPE headings_tbl IS TABLE OF VARCHAR2(100);
TYPE num_tbl IS TABLE OF NUMBER;

-------------------------------------
-------------------------------------
-- Procedure and function definitions
-------------------------------------
-------------------------------------


-----------------------------------
-- Procedure to list the signatures
-----------------------------------
PROCEDURE list_signatures;


-----------------------------------------
-- Main entry point to standalone process
-----------------------------------------
PROCEDURE main (
      p_invoice_id      in NUMBER default null, 
      p_check_id        in NUMBER default null, 
      p_vendor_id       in NUMBER default null,
      p_start_date      in DATE default null,
      p_end_date        in DATE default null,
      p_org_ids         in VARCHAR2 default null,
      p_trx_type        in VARCHAR2 default 'ALL',
      p_validations     in VARCHAR2 default 'GDF',
      p_max_output_rows in NUMBER default 10,
      p_print_to_stdout in VARCHAR2 default 'N',
      p_debug_mode      in VARCHAR2 default 'N');


----------------------------------------------------
-- Main entry point to date range concurrent process
----------------------------------------------------
PROCEDURE main_cp (
      errbuf            out VARCHAR2,
      retcode           out VARCHAR2,
      p_trx_type        in VARCHAR2 default 'ALL',
      p_start_date      in VARCHAR2 default null,
      p_end_date        in VARCHAR2 default null,
      p_org_ids         in VARCHAR2 default null,
--      p_validations     in VARCHAR2 default 'GDF', /* range will only run GDF */
      p_max_output_rows in NUMBER default 10,
      p_debug_mode      in VARCHAR2 default 'N');


----------------------------------------------------
-- Main entry point to single trx concurrent process
----------------------------------------------------
PROCEDURE main_cp_single (
      errbuf            out VARCHAR2,
      retcode           out VARCHAR2,
      p_invoice_id      in NUMBER default null,
      p_check_id        in NUMBER default null,
      p_vendor_id       in NUMBER default null,
      p_validations     in VARCHAR2 default 'GDF',
      p_debug_mode      in VARCHAR2 default 'N');


END ap_gdf_detect_pkg;
/
show errors
REM +=======================================================================+
REM |    Copyright (c) 2011 Oracle Corporation, Redwood Shores, CA, USA     |
REM |                         All rights reserved.                          |
REM +=========================================================================+
REM | FILENAME                                                                |
REM |   ap_gdf_detect_pkg.sql                                                 |
REM |                                                                         |
REM | DESCRIPTION                                                             |
REM |   Script to diagnose data integrity issues in Payables.                 |
REM |                                                                         |
REM | HISTORY                                                                 |
REM |                                                                         |
REM | 27-SEP-2011 ALUMPE   Created                                            |
REM | 27-OCT-2011 ALUMPE   Modified at dev request to only allow date ranges  |
REM |                      with dates in open periods (for all the OU's)and   |
REM |                      and only run GDF signatures when using date range  |
REM |             ALUMPE   Modified to run for paid invoices for checks       |
REM |                      and pre-payments for invoices when running in      |
REM |                      single transaction mode.                           |
REM | 08-NOV-2011 ALUMPE   Added logic to run supplier/vendor GDF queries     |
REM | 06-DEC-2011 ALUMPE   Added elapsed time information to report output    |
REM | 05-JAN-2012 ALUMPE   Updated with latest GDF queries and added script   |
REM |                      version to the output.                             |
REM | 24-JAN-2012 ALUMPE   Added warning for age of script (to check for      |
REM |                      version).                                          |
REM | 26-JAN-2012 ALUMPE   Modified to allow generation of dynamic view       |
REM |                      code based on parameters entered for performance   |
REM |                      All signature modified to use this new feature     |
REM | 08-FEB-2012 ALUMPE   Modified to check for application of RPCs on 12.1  |
REM | 09-JUL-2012 ALUMPE   Added date applied for RPC's                       |
REM | 19-JUL-2012 ALUMPE   Added qb_name hints to the dynamic view sub-       |
REM |                      stitutions so they can be hinted in outer queries  |
REM | 24-JUL-2012 ALUMPE   Modified to use utl_file directly rather than      |
REM |                      fnd_file if not called in the context of a con-    |
REM |                      current program to avoid issues with writing       |
REM |                      output for multiple runs to the same file - which  |
REM |                      is a known limitation of fnd_file.                 |
REM | 10-AUG-2012 ALUMPE   Added code to allow display of the related SQL     |
REM |                      for issues that are found.                         |
REM | 31-AUG-2012 ALUMPE   Added package body for external functions          |
REM |                      ap_gdf_fcns.                                       | 
REM | 13-SEP-2012 ALUMPE   Modified to handle additional RPC patch releases   |
REM | 16-NOV-2012 ALUMPE   Fixed bug in SQL display so that element names are |
REM |                      unique when a signature appears more than once.    |
REM | 29-NOV-2012 ALUMPE   Added nvl to the validate_parameters global param  |
REM |                      assignments to insure the defaults are used when   |
REM |                      input as null (even though they have defaults)     |
REM | 30-NOV-2012 ALUMPE   At dev request added logic to include materialize  |
REM |                      hint on queries using WITH.  Also added logic to   |
REM |                      print out old stat warntings when running date     |
REM |                      range version.                                     |
REM | 21-DEC-2012 ALUMPE   Fixed issue with org list when only vendor_id is   |
REM |                      provided.                                          |
REM | 01-MAR-2013 ALUMPE   Added code for including flows/impacts associated  |
REM |                      with each signature as available.                  |
REM | 13-MAR-2013 ALUMPE   Added additional RPC releases                      |
REM | 16-JUL-2013 ALUMPE   Added section for printing notes at the beginning  |
REM | 25-JUL-2013 PFIORENT Changed output for new look and feel               |
REM | 25-JUL-2013 ALUMPE   Look and feel changes completion.                  |
REM | 11-SEP-2013 ALUMPE   Add September Core AP RPC.                         |
REM | 11-OCT-2013 ALUMPE   Added maxlinesize parameter to utl_file.fopen calls|
REM | 06-NOV-2013 ALUMPE   Added message for 12.2 and function for formatting |
REM |                      note links.  Added this wherever note strings used.|
REM | 14-NOV-2013 ALUMPE   Added create and populate procedures for impact    |
REM |                      summary.  Added JS function and addtional code to  |
REM |                      store and output the impact counts and highlights. |
REM | 03-JAN-2014 ALUMPE   Added host information when printing output and    |
REM |                      log file locations.                                |
REM | 27-JAN-2014 ALUMPE   Added code to include an xml summary of issues     |
REM |                      detected for use by Poirot-AUTO DX                 |
REM | 14-AUG-2014 ALUMPE   Added "exit" to end of script.                     |
REM | 28-AUG-2014 ALUMPE   Add Aug-14 RPC's for ISP and AP CORE               |
REM | 19-MAR-2014 ALUMPE   Modified note_link URL strings to new values       |
REM | 09-JUL-2015 ALUMPE   Minor HTML fixes                                   |
REM | 13-AUG-2015 ALUMPE   Change version format to 200.XXX as per analyzer   |
REM |                      standards.                                         |
REM | 25-AUG-2015 ALUMPE   Add a second DX summary for the analyzer STD       |
REM | 25-FEB-2016 ALUMPE   Added new Feb-16 RPC's for AP Core and SLA         |
REM | 03-MAR-2016 ALUMPE   Added new Feb-16 RPC for Payments (IBY)            |
REM | 11-MAR-2016 ALUMPE   Added handling for case where no operating unit has|
REM |                      open period for the start/end dates in date range  |
REM |                      mode.                                              |
REM | 16-MAR-2016 ALUMPE   Add spaces between skipped OU's so that they can   |
REM |                      wrap in the output when the list is long.          |
REM | 20-APR-2016 ALUMPE   Modify solution format and handling to be usable   |
REM |                      in analyzers build using the analyzer builder      |
REM | 05-MAY-2016 ALUMPE   Fix no valid orgs with open periods messaging.     |
REM | 22-JUN-2016 ALUMPE   Fix the fact that supplier type non-gdf signatures |
REM |                      are not being evaluated.                           |
REM |                                                                         |
REM |                                                                         |
REM +=========================================================================+
SET DEFINE '~'

CREATE OR REPLACE PACKAGE BODY ap_gdf_fcns AS
-- $Id: ap_gdf_detect_pkg.sql,v 200.354 2016/07/07 20:16:56 alumpe Exp $

FUNCTION uom_convert (
  p_from_unit  IN VARCHAR2,
  p_to_unit    IN VARCHAR2,
  p_item_id    IN NUMBER) RETURN NUMBER IS

  l_rate NUMBER;

BEGIN
  -- This function is added to remove dependency on AP_Acctg_Data_Fix_PKG
  l_rate := po_uom_s.po_uom_convert(p_from_unit,p_to_unit,p_item_id);
  return l_rate;
EXCEPTION WHEN OTHERS THEN
  return null;
END uom_convert;

FUNCTION net_pp_app(p_event_id NUMBER) RETURN NUMBER IS
  l_total_prepay_amt NUMBER := -99;
BEGIN
  SELECT NVL((SUM(AID.Amount)), 0)   --bug12764043, removed ABS
  INTO l_total_prepay_amt
  FROM ap_invoice_distributions_all aid
  WHERE aid.line_type_lookup_code IN ('PREPAY','REC_TAX','NONREC_TAX')
  AND aid.prepay_distribution_id  IS NOT NULL
  AND aid.accounting_event_id = P_Event_ID;

  RETURN(l_total_prepay_amt);

EXCEPTION WHEN OTHERS THEN
  RETURN -99;
END net_pp_app;

FUNCTION net_pp_acct(
    p_event_id NUMBER,
    p_ledger_id NUMBER) RETURN NUMBER IS

  l_total_prepay_acct NUMBER := -100;

BEGIN
  SELECT NVL((sum(nvl(xal.entered_dr, 0) - nvl(xal.entered_cr, 0))), 0)
  INTO l_total_prepay_acct
  FROM xla_ae_lines xal,
       xla_ae_headers xah
  WHERE xal.application_id = 200
  AND   xah.application_id = 200
  AND   xah.balance_type_code = 'A'
  AND   xah.ae_header_id = xal.ae_header_id
  AND   xal.accounting_class_code = 'PREPAID_EXPENSE'
  AND   xah.event_id = p_event_id
  AND   xah.ledger_id = p_ledger_id;

  RETURN(l_total_prepay_acct);

EXCEPTION WHEN OTHERS THEN
  RETURN(-100);
END net_pp_acct;

FUNCTION net_adj_acct(
    p_event_id NUMBER,
    p_ledger_id NUMBER) RETURN NUMBER IS

  l_total_prepay_acct NUMBER := -101;

BEGIN
  SELECT NVL((sum(nvl(xal.entered_dr, 0) - nvl(xal.entered_cr, 0))), 0)
  INTO l_total_prepay_acct
  FROM xla_ae_lines xal,
       xla_ae_headers xah
  WHERE xal.application_id = 200
  AND   xah.application_id = 200
  AND   xah.balance_type_code = 'A'
  AND   xah.ae_header_id = xal.ae_header_id
  AND   xal.accounting_class_code = 'PREPAID_EXPENSE'
  AND   xah.event_id IN (
          SELECT /*+ push_subq */
                 apph.accounting_event_id
          FROM ap_prepay_history_all apph
          WHERE apph.related_prepay_app_event_id = p_event_id
          AND   apph.transaction_type = 'PREPAYMENT APPLICATION ADJ')
  AND   xah.ledger_id = P_Ledger_ID;

  RETURN(l_total_prepay_acct);

EXCEPTION WHEN OTHERS THEN
    RETURN(-101);
END net_adj_acct;
END ap_gdf_fcns;
/
show errors


CREATE OR REPLACE PACKAGE BODY ap_gdf_detect_pkg AS
-- $Id: ap_gdf_detect_pkg.sql,v 200.354 2016/07/07 20:16:56 alumpe Exp $
-----------------------------------
-- Global Var declarations
-----------------------------------
g_signatures      SIGNATURE_TBL := signature_tbl(); 

g_impacts_tbl     IMPACTS_TBL;
g_invoice_id      NUMBER;
g_check_id        NUMBER;
g_vendor_id       NUMBER;
g_mode            VARCHAR2(10);
g_start_date      DATE;
g_end_date        DATE;
g_org_ids         VARCHAR2(2000);
g_ous             NUM_TBL := num_tbl();
g_skipped_ous     NUM_TBL := num_tbl();
g_trx_type        VARCHAR2(10);
g_validations     VARCHAR2(10);
g_max_output_rows NUMBER;
g_print_to_stdout VARCHAR2(1) := 'N';
g_debug_mode      VARCHAR2(1);
g_undo_applied    BOOLEAN := false;
g_gdf             BOOLEAN := false;

g_process_start_time  TIMESTAMP;
g_query_start_time    TIMESTAMP;
g_query_elapsed       INTERVAL DAY(2) TO SECOND(3);
g_query_total         INTERVAL DAY(2) TO SECOND(3);


APP_EXCEPTION     EXCEPTION;

g_is_concurrent   BOOLEAN := (to_number(nvl(FND_GLOBAL.CONC_REQUEST_ID,0)) >  0);
g_errbuf          VARCHAR2(1000);
g_retcode         VARCHAR2(1);

g_log_file        UTL_FILE.FILE_TYPE;
g_out_file        UTL_FILE.FILE_TYPE;
g_dx_summary      CLOB;

g_mos_patch_url   VARCHAR2(500) :=
  'https://support.oracle.com/epmos/faces/ui/patch/PatchDetail.jspx?patchId=';
g_mos_doc_url     VARCHAR2(500) :=
  'https://support.oracle.com/epmos/faces/DocumentDisplay?'||
  'parent=ANALYZER&sourceId=1360390.1&id=';

-- Globals for Analyzer style DX summary
g_rep_info        HASH_TBL_2K;
g_params          HASH_TBL_2K;
g_anlz_xml        XMLDOM.DOMDocument;


----------------------------------
-- Procedures and Functions
----------------------------------

PROCEDURE enable_debug IS
BEGIN
  g_debug_mode := 'Y';
END enable_debug;

PROCEDURE disable_debug IS
BEGIN
  g_debug_mode := 'N';
END disable_debug;


-----------------------------------
-- Private procedures and functions
-----------------------------------

FUNCTION note_link (
  p_note IN VARCHAR2,
  p_text IN VARCHAR2 DEFAULT null) RETURN VARCHAR2 IS

  l_text VARCHAR2(1000);
BEGIN
  IF p_text is null THEN
    l_text := p_note;
  ELSE
    l_text := p_text;
  END IF;
  IF p_note is not null THEN
    return('<a href="https://support.oracle.com/epmos/faces/DocumentDisplay?'||
      'parent=ANALYZER&sourceId=1360390.1&id='|| p_note|| '" target="_blank">'||
      l_text||'</a>');
  ELSE
    return(null);
  END IF;
END;

FUNCTION expand_links(p_str VARCHAR2) return VARCHAR2 IS
  l_str VARCHAR2(32000);
  l_s VARCHAR2(20);
Begin
  -- Assign to working variable
  l_str := p_str;
  -- First deal with patches
  l_str := regexp_replace(l_str,'{([0-9]{6,9})}',
    '<a target="_blank" href="'||g_mos_patch_url||'\1">\1</a>',1,0);
  -- Same for notes
  l_str := regexp_replace(l_str,'\[([0-9]{5,8}\.[0-9])\]',
    'Doc ID <a target="_blank" href="'||g_mos_doc_url||'\1">\1</a>',1,0);
  return l_str;
END expand_links;

PROCEDURE print_log(p_msg IN VARCHAR2) is
BEGIN
  IF NOT g_is_concurrent THEN
    utl_file.put_line(g_log_file, p_msg);
    utl_file.fflush(g_log_file);
  ELSE
    fnd_file.put_line(FND_FILE.LOG, p_msg);
  END IF;
  IF (g_print_to_stdout = 'Y') THEN
    dbms_output.put_line(substr(p_msg,1,254));
  END IF;
END print_log;


PROCEDURE print_out(p_msg IN VARCHAR2) is
BEGIN
  IF NOT g_is_concurrent THEN
    utl_file.put_line(g_out_file, p_msg);
    utl_file.fflush(g_out_file);
  ELSE
    fnd_file.put_line(FND_FILE.OUTPUT, p_msg);
  END IF;
END print_out;

PROCEDURE print_error(p_msg IN VARCHAR2) IS
BEGIN
  print_out('<div class="BoxErr">'||p_msg||'</div><br/>');
END;


PROCEDURE debug(p_msg VARCHAR2) is
 l_time varchar2(25);
BEGIN
  IF (g_debug_mode = 'Y') THEN
    l_time := to_char(sysdate,'DD-MON-YY HH24:MI:SS');
    IF NOT g_is_concurrent THEN
      utl_file.put_line(g_log_file, l_time||'-'||p_msg);
    ELSE
      fnd_file.put_line(FND_FILE.LOG, l_time||'-'||p_msg);
    END IF;
    IF g_print_to_stdout = 'Y' THEN
      dbms_output.put_line(substr(l_time||'-'||p_msg,1,254));
    END IF;
  END IF;
END;

PROCEDURE write_clob(p_msg IN VARCHAR2, p_clob IN OUT CLOB) is
BEGIN
  dbms_lob.writeappend(p_clob, length(p_msg)+1, p_msg||chr(10));
EXCEPTION WHEN OTHERS THEN
  print_out('Error writing to clob: '||sqlerrm);
  raise;
END write_clob;

PROCEDURE write_dx(p_msg IN VARCHAR2) is
BEGIN
  write_clob(p_msg, g_dx_summary);
EXCEPTION WHEN OTHERS THEN
  print_out('Error writing to dx summary clob: '||sqlerrm);
  raise;
END write_dx;

PROCEDURE print_dx_summary (p_dx_summary IN CLOB) IS
   l_len  NUMBER := dbms_lob.getlength(p_dx_summary);
   l_offset NUMBER := 1;
   l_buffer VARCHAR2(16000);
   l_read   NUMBER := 4000;
   l_step   VARCHAR2(20) := '0';
BEGIN
  l_step := '10';
  WHILE l_offset < l_len LOOP
    l_step := '11';
    dbms_lob.read(p_dx_summary, l_read, l_offset, l_buffer);
    l_offset := l_offset + l_read;
    IF NOT g_is_concurrent THEN
      l_step := '12';
      utl_file.put(g_out_file, l_buffer);
      l_step := '13';
      utl_file.fflush(g_out_file);
    ELSE
      l_step := '14';
      fnd_file.put(FND_FILE.OUTPUT, l_buffer);
    END IF;
  END LOOP;
EXCEPTION WHEN OTHERS THEN
  debug('Error printing dx summary (step: '||l_step||') '||sqlerrm);
  raise;
END print_dx_summary;

-- Additional DX summary code for analyzer version
PROCEDURE gen_anlz_dx(
    p_sig_id       VARCHAR2,
    p_sig          SIGNATURE_REC,
    p_col_rows     COL_LIST_TBL,  -- signature SQL row values
    p_col_headings HEADINGS_TBL,
    p_limit_rows   VARCHAR2 DEFAULT 'Y')    -- signature SQL column names
IS

  l_anlz_xml_doc          XMLDOM.DOMDocument;
  l_anlz_xml_node         XMLDOM.DOMNode;
  l_diagnostic_element    XMLDOM.DOMElement;
  l_diagnostic_node       XMLDOM.DOMNode;
  l_issues_node           XMLDOM.DOMNode;
  l_signature_node        XMLDOM.DOMNode;
  l_signature_element     XMLDOM.DOMElement;

  l_sigxinfo_node         XMLDOM.DOMNode;
  l_info_node             XMLDOM.DOMNode;
  l_info_element          XMLDOM.DOMElement;
  l_info_name_attr        XMLDOM.DomAttr;
  l_node                  XMLDOM.DOMNode;

  l_row_node              XMLDOM.DOMNode;
  l_failure_node          XMLDOM.DOMNode;
  l_run_details_node      XMLDOM.DOMNode;
  l_run_detail_data_node  XMLDOM.DOMNode;
  l_detail_element        XMLDOM.DOMElement;
  l_detail_node           XMLDOM.DOMNode;
  l_detail_name_attribute XMLDOM.DOMAttr;
  l_parameters_node       XMLDOM.DOMNode;
  l_parameter_node        XMLDOM.DOMNode;
  l_col_node              XMLDOM.DOMNode;
  l_parameter_element     XMLDOM.DOMElement;
  l_col_element           XMLDOM.DOMElement;
  l_param_name_attribute  XMLDOM.DOMAttr;
  l_failure_element       XMLDOM.DOMElement;
  l_sig_id_attribute      XMLDOM.DOMAttr;
  l_col_name_attribute    XMLDOM.DOMAttr;
  l_row_attribute         XMLDOM.DOMAttr;
  l_key                   VARCHAR2(255);
  l_match                 VARCHAR2(1);
  l_rows                  NUMBER;
  l_value                 VARCHAR2(2000);

BEGIN

  l_anlz_xml_doc := g_anlz_xml;

  IF (xmldom.isNull(l_anlz_xml_doc)) THEN
    l_anlz_xml_doc := xmldom.newDOMDocument;
    l_anlz_xml_node := xmldom.makeNode(l_anlz_xml_doc);
    l_diagnostic_node := xmldom.appendChild(l_anlz_xml_node,
      xmldom.makeNode(xmldom.createElement(l_anlz_xml_doc,'diagnostic')));
    l_run_details_node := xmldom.appendChild(l_diagnostic_node,
      xmldom.makeNode(xmldom.createElement(l_anlz_xml_doc,'run_details')));

    l_key := g_rep_info.first;
    WHILE l_key is not null LOOP

      l_detail_element := xmldom.createElement(l_anlz_xml_doc,'detail');
      l_detail_node := xmldom.appendChild(l_run_details_node,
        xmldom.makeNode(l_detail_element));
      l_detail_name_attribute:=xmldom.setAttributeNode(l_detail_element,
        xmldom.createAttribute(l_anlz_xml_doc,'name'));
      xmldom.setAttribute(l_detail_element, 'name', l_key);
      l_node := xmldom.appendChild(l_detail_node,
        xmldom.makeNode(xmldom.createTextNode(l_anlz_xml_doc,g_rep_info(l_key))));

      l_key := g_rep_info.next(l_key);

    END LOOP;

    l_parameters_node := xmldom.appendChild(l_diagnostic_node,
      xmldom.makeNode(xmldom.createElement(l_anlz_xml_doc,'parameters')));

    l_key := g_params.first;
    WHILE l_key is not null LOOP
     l_parameter_element := xmldom.createElement(l_anlz_xml_doc,'parameter');
     l_parameter_node := xmldom.appendChild(l_parameters_node,
       xmldom.makeNode(l_parameter_element));
     l_param_name_attribute:=xmldom.setAttributeNode(l_parameter_element,
       xmldom.createAttribute(l_anlz_xml_doc,'name'));
     xmldom.setAttribute(l_parameter_element, 'name', l_key);
     l_node := xmldom.appendChild(l_parameter_node,
       xmldom.makeNode(xmldom.createTextNode(l_anlz_xml_doc,g_params(l_key))));

     l_key := g_params.next(l_key);

    END LOOP;

    l_issues_node := xmldom.appendChild(l_diagnostic_node,
      xmldom.makeNode(xmldom.createElement(l_anlz_xml_doc,'issues')));

  END IF;

  IF p_sig_id is not null THEN

    l_issues_node := xmldom.getLastChild(xmldom.getFirstChild(
      xmldom.makeNode(l_anlz_xml_doc)));

    l_signature_element := xmldom.createElement(l_anlz_xml_doc,'signature');
    l_sig_id_attribute := xmldom.setAttributeNode(l_signature_element,
      xmldom.createAttribute(l_anlz_xml_doc,'id'));
    l_signature_node := xmldom.appendChild(
      l_issues_node,xmldom.makeNode(l_signature_element));
    xmldom.setAttribute(l_signature_element, 'id',p_sig_id);

    IF p_sig.sig_id is not null THEN 
      -- Add additional signature details
      l_sigxinfo_node := xmldom.appendChild(l_signature_node,
        xmldom.makeNode(xmldom.createElement(l_anlz_xml_doc, 'sigxinfo')));

      -- Category
      l_info_element := xmldom.createElement(l_anlz_xml_doc, 'info');
      l_info_name_attr := xmldom.setAttributeNode(l_info_element,
        xmldom.createAttribute(l_anlz_xml_doc, 'name'));
      xmldom.setAttribute(l_info_element, 'name', 'category');
      l_info_node := xmldom.appendChild(l_sigxinfo_node,
        xmldom.makeNode(l_info_element));
      l_value := p_sig.category;
      l_node := xmldom.appendChild(l_info_node,xmldom.makeNode(
          xmldom.createTextNode(l_anlz_xml_doc,l_value)));

      -- Sub category
      l_info_element := xmldom.createElement(l_anlz_xml_doc, 'info');
      l_info_name_attr := xmldom.setAttributeNode(l_info_element,
        xmldom.createAttribute(l_anlz_xml_doc, 'name'));
      xmldom.setAttribute(l_info_element, 'name', 'sub_category');
      l_info_node := xmldom.appendChild(l_sigxinfo_node,
        xmldom.makeNode(l_info_element));
      l_value := p_sig.sub_category;
      l_node := xmldom.appendChild(l_info_node,xmldom.makeNode(
          xmldom.createTextNode(l_anlz_xml_doc,l_value)));

      -- Note Number
      l_info_element := xmldom.createElement(l_anlz_xml_doc, 'info');
      l_info_name_attr := xmldom.setAttributeNode(l_info_element,
        xmldom.createAttribute(l_anlz_xml_doc, 'name'));
      xmldom.setAttribute(l_info_element, 'name', 'note_number');
      l_info_node := xmldom.appendChild(l_sigxinfo_node,
        xmldom.makeNode(l_info_element));
      l_value := p_sig.note_number;
      l_node := xmldom.appendChild(l_info_node,xmldom.makeNode(
          xmldom.createTextNode(l_anlz_xml_doc,l_value)));

      -- Bug Number
      l_info_element := xmldom.createElement(l_anlz_xml_doc, 'info');
      l_info_name_attr := xmldom.setAttributeNode(l_info_element,
        xmldom.createAttribute(l_anlz_xml_doc, 'name'));
      xmldom.setAttribute(l_info_element, 'name', 'bug_number');
      l_info_node := xmldom.appendChild(l_sigxinfo_node,
        xmldom.makeNode(l_info_element));
      l_value := p_sig.bug_number;
      l_node := xmldom.appendChild(l_info_node,xmldom.makeNode(
          xmldom.createTextNode(l_anlz_xml_doc,l_value)));

      -- GDF Flag
      l_info_element := xmldom.createElement(l_anlz_xml_doc, 'info');
      l_info_name_attr := xmldom.setAttributeNode(l_info_element,
        xmldom.createAttribute(l_anlz_xml_doc, 'name'));
      xmldom.setAttribute(l_info_element, 'name', 'gdf_flag');
      l_info_node := xmldom.appendChild(l_sigxinfo_node,
        xmldom.makeNode(l_info_element));
      l_value := p_sig.gdf_flag;
      l_node := xmldom.appendChild(l_info_node,xmldom.makeNode(
          xmldom.createTextNode(l_anlz_xml_doc,l_value)));

      -- Undo Flag
      l_info_element := xmldom.createElement(l_anlz_xml_doc, 'info');
      l_info_name_attr := xmldom.setAttributeNode(l_info_element,
        xmldom.createAttribute(l_anlz_xml_doc, 'name'));
      xmldom.setAttribute(l_info_element, 'name', 'undo_flag');
      l_info_node := xmldom.appendChild(l_sigxinfo_node,
        xmldom.makeNode(l_info_element));
      l_value := p_sig.undoes_accounting;
      l_node := xmldom.appendChild(l_info_node,xmldom.makeNode(
          xmldom.createTextNode(l_anlz_xml_doc,l_value)));

     -- Problem
      l_info_element := xmldom.createElement(l_anlz_xml_doc, 'info');
      l_info_name_attr := xmldom.setAttributeNode(l_info_element,
        xmldom.createAttribute(l_anlz_xml_doc, 'name'));
      xmldom.setAttribute(l_info_element, 'name', 'problem');
      l_info_node := xmldom.appendChild(l_sigxinfo_node,
        xmldom.makeNode(l_info_element));
      l_value := p_sig.problem_text;
      l_node := xmldom.appendChild(l_info_node,xmldom.makeNode(
          xmldom.createCDATASection(l_anlz_xml_doc,l_value)));

     -- Solution
      l_info_element := xmldom.createElement(l_anlz_xml_doc, 'info');
      l_info_name_attr := xmldom.setAttributeNode(l_info_element,
        xmldom.createAttribute(l_anlz_xml_doc, 'name'));
      xmldom.setAttribute(l_info_element, 'name', 'solution');
      l_info_node := xmldom.appendChild(l_sigxinfo_node,
        xmldom.makeNode(l_info_element));
      l_value := p_sig.fix_text;
      l_node := xmldom.appendChild(l_info_node,xmldom.makeNode(
          xmldom.createCDATASection(l_anlz_xml_doc,l_value)));

     -- Impact Areas
      IF p_sig.impact_areas.count > 0 THEN
        FOR i IN 1..p_sig.impact_areas.count LOOP
          l_info_element := xmldom.createElement(l_anlz_xml_doc, 'info');
          l_info_name_attr := xmldom.setAttributeNode(l_info_element,
            xmldom.createAttribute(l_anlz_xml_doc, 'name'));
          xmldom.setAttribute(l_info_element, 'name', 'impact');
          l_info_node := xmldom.appendChild(l_sigxinfo_node,
            xmldom.makeNode(l_info_element));
          l_value := p_sig.impact_areas(i);
          l_node := xmldom.appendChild(l_info_node,xmldom.makeNode(
            xmldom.createTextNode(l_anlz_xml_doc,l_value)));
        END LOOP;
      END IF;

    END IF;

    IF p_limit_rows = 'Y' THEN
      l_rows := least(g_max_output_rows,p_col_rows(1).COUNT,50);
    ELSE
      l_rows := least(p_col_rows(1).COUNT,50);
    END IF;

    FOR i IN 1..l_rows LOOP

      l_failure_element := xmldom.createElement(l_anlz_xml_doc,'failure');
      l_row_attribute := xmldom.setAttributeNode(l_failure_element,
        xmldom.createAttribute(l_anlz_xml_doc,'row'));
      l_failure_node := xmldom.appendChild(l_signature_node,
        xmldom.makeNode(l_failure_element));
      xmldom.setAttribute(l_failure_element, 'row', i);

      FOR j IN 1..p_col_headings.count LOOP

        l_col_element := xmldom.createElement(l_anlz_xml_doc,'column');
        l_col_name_attribute := xmldom.setAttributeNode(l_col_element,
          xmldom.createAttribute(l_anlz_xml_doc,'name'));
        l_col_node := xmldom.appendChild(l_failure_node,xmldom.makeNode(l_col_element));
        xmldom.setAttribute(l_col_element, 'name',p_col_headings(j));

        l_value := p_col_rows(j)(i);

        IF p_sig_id = 'REC_PATCH_CHECK' THEN
          IF p_col_headings(j) = 'Patch' THEN
            l_value := replace(replace(p_col_rows(j)(i),'{'),'}');
          ELSIF p_col_headings(j) = 'Note' THEN
            l_value := replace(replace(p_col_rows(j)(i),'['),']');
          END IF;
        END IF;

        l_value := RTRIM(l_value, ' ');

        l_node := xmldom.appendChild(l_col_node,xmldom.makeNode(
          xmldom.createTextNode(l_anlz_xml_doc,l_value)));

      END LOOP;
    END LOOP;

  END IF;
  g_anlz_xml := l_anlz_xml_doc;

END gen_anlz_dx;

PROCEDURE print_anlz_dx IS
  l_anlz_xml_clob   CLOB;
  l_offset          NUMBER := 1;
  l_length          NUMBER;
  l_node_list       XMLDOM.DOMNodeList;
  l_node_length     NUMBER;
  l_step            VARCHAR2(20);
BEGIN

  IF xmldom.isnull(g_anlz_xml) THEN
    l_step := 10;
    gen_anlz_dx(p_sig_id => null, p_sig => null, p_col_headings => null,
      p_col_rows => null);
  END IF;

  l_step := '20';
  dbms_lob.createtemporary(l_anlz_xml_clob, true);

  --print CLOB
  l_step := '30';
  xmldom.writetoclob(g_anlz_xml, l_anlz_xml_clob);

  print_out('<!-- ######BEGIN DX SUMMARY######');

  l_step := '40';
  print_dx_summary(l_anlz_xml_clob);

  l_step := '50';
  print_out('######END DX SUMMARY######-->');
  l_step := '60';
  dbms_lob.freeTemporary(l_anlz_xml_clob);
  l_step := '70';
  xmldom.freeDocument(g_anlz_xml);

EXCEPTION WHEN OTHERS THEN
  debug('Error printing analyzer DX Summary (step: '||l_step||') '||sqlerrm);
  raise;
END print_anlz_dx;


PROCEDURE start_timer (p_start_time IN OUT TIMESTAMP) IS
BEGIN
  SELECT localtimestamp(3) INTO p_start_time
  FROM   dual;
END start_timer;

FUNCTION stop_timer(p_start_time IN TIMESTAMP) RETURN INTERVAL DAY TO SECOND IS
  l_elapsed INTERVAL DAY(2) TO SECOND(3);
BEGIN
  SELECT localtimestamp - p_start_time  INTO l_elapsed
  FROM   dual;
  RETURN l_elapsed;
END stop_timer;

FUNCTION format_elapsed (p_elapsed IN INTERVAL DAY TO SECOND) RETURN VARCHAR2 IS
  l_days         VARCHAR2(3);
  l_hours        VARCHAR2(2);
  l_minutes      VARCHAR2(2);
  l_seconds      VARCHAR2(6);
  l_fmt_elapsed  VARCHAR2(80);
BEGIN
  l_days := EXTRACT(DAY FROM p_elapsed);
  IF to_number(l_days) > 0 THEN
    l_fmt_elapsed := l_days||' days'; 
  END IF;

  l_hours := EXTRACT(HOUR FROM p_elapsed);
  IF to_number(l_hours) > 0 THEN
    IF length(l_fmt_elapsed) > 0 THEN
      l_fmt_elapsed := l_fmt_elapsed||', ';
    END IF;
    l_fmt_elapsed := l_fmt_elapsed || l_hours||' Hrs'; 
  END IF;

  l_minutes := EXTRACT(MINUTE FROM p_elapsed);
  IF to_number(l_minutes) > 0 THEN
    IF length(l_fmt_elapsed) > 0 THEN
      l_fmt_elapsed := l_fmt_elapsed||', ';
    END IF;
    l_fmt_elapsed := l_fmt_elapsed || l_minutes||' Min'; 
  END IF;
  
  l_seconds := EXTRACT(SECOND FROM p_elapsed);
  IF length(l_fmt_elapsed) > 0 THEN
    l_fmt_elapsed := l_fmt_elapsed||', ';
  END IF;
  l_fmt_elapsed := l_fmt_elapsed || l_seconds||' Sec'; 

  RETURN(l_fmt_elapsed);
  
END format_elapsed;

FUNCTION check_patch(ptch IN VARCHAR2) RETURN BOOLEAN IS
  l_count INTEGER := 0;
BEGIN
  SELECT count(*) INTO l_count
  FROM (
         SELECT bug_number FROM ad_bugs
         UNION
         SELECT patch_name FROM ad_applied_patches
       ) bugs
  WHERE bugs.bug_number = ptch;
  IF l_count > 0 THEN
    return(TRUE);
  ELSE
    return(FALSE);
  END IF;
EXCEPTION WHEN OTHERS THEN
  return(FALSE);
END check_patch;

PROCEDURE print_rpc_info IS
  l_applied      VARCHAR2(1);
  l_applied_date DATE;
  l_warning      BOOLEAN := FALSE;
  l_rpc_list     PATCH_TBL := patch_tbl();
  l_col_rows     COL_LIST_TBL := col_list_tbl();
  l_cols         HEADINGS_TBL := headings_tbl();

  CURSOR get_app_date(p_ptch VARCHAR2) IS
  SELECT max(pr.start_date) app_date
  FROM ad_patch_runs pr
  WHERE pr.patch_run_id in (
          SELECT prb.patch_run_id
          FROM   ad_bugs b,
                 ad_patch_run_bugs prb
          WHERE  b.bug_number = p_ptch
          AND    prb.bug_id = b.bug_id
          UNION
          SELECT pr2.patch_run_id
          FROM ad_applied_patches ap,
               ad_patch_drivers pd,
               ad_patch_runs pr2
          WHERE ap.patch_name = p_ptch 
          AND   pd.applied_patch_id = ap.applied_patch_id
          AND   pr2.patch_driver_id = pd.patch_driver_id);

BEGIN
  l_cols.extend(5);
  l_cols(1) := 'Product';
  l_cols(2) := 'Patch';
  l_cols(3) := 'Description';
  l_cols(4) := 'Released';
  l_cols(5) := 'Applied';
  
  l_col_rows.extend(26);

  l_col_rows(1)(1) := 'AP/XLA';
  l_col_rows(2)(1) := '14082924';
  l_col_rows(3)(1) := 'Consolidated GDF Pre-Req for Undo Acctg';
  l_col_rows(4)(1) := 'Jul-2012';
  l_col_rows(5)(1) := 'NOT APPLIED';

  l_col_rows(1)(2) := 'AP';
  l_col_rows(2)(2) := '13563472';
  l_col_rows(3)(2) := 'Payables Core RPC 1';
  l_col_rows(4)(2) := 'Jan-2012';
  l_col_rows(5)(2) := 'NOT APPLIED';

  l_col_rows(1)(3) := 'AP';
  l_col_rows(2)(3) := '14273383';
  l_col_rows(3)(3) := 'Payables Core RPC 2';
  l_col_rows(4)(3) := 'Aug-2012';
  l_col_rows(5)(3) := 'NOT APPLIED';

  l_col_rows(1)(4) := 'AP';
  l_col_rows(2)(4) := '16213642';
  l_col_rows(3)(4) := 'Payables Core RPC 3';
  l_col_rows(4)(4) := 'Mar-2013';
  l_col_rows(5)(4) := 'NOT APPLIED';

  l_col_rows(1)(5) := 'AP';
  l_col_rows(2)(5) := '17176017';
  l_col_rows(3)(5) := 'Payables Core RPC 4';
  l_col_rows(4)(5) := 'Sep-2013';
  l_col_rows(5)(5) := 'NOT APPLIED';

  l_col_rows(1)(6) := 'AP';
  l_col_rows(2)(6) := '19018767';
  l_col_rows(3)(6) := 'Payables Core RPC 5';
  l_col_rows(4)(6) := 'Aug-2014';
  l_col_rows(5)(6) := 'NOT APPLIED';

  l_col_rows(1)(7) := 'AP';
  l_col_rows(2)(7) := '20178786';
  l_col_rows(3)(7) := 'Payables Core RPC 6';
  l_col_rows(4)(7) := 'Feb-2015';
  l_col_rows(5)(7) := 'NOT APPLIED';

  l_col_rows(1)(8) := 'AP';
  l_col_rows(2)(8) := '21261629';
  l_col_rows(3)(8) := 'Payables Core RPC 7';
  l_col_rows(4)(8) := 'Aug-2015';
  l_col_rows(5)(8) := 'NOT APPLIED';

  l_col_rows(1)(9) := 'AP';
  l_col_rows(2)(9) := '22384200';
  l_col_rows(3)(9) := 'Payables Core RPC 8';
  l_col_rows(4)(9) := 'Feb-2016';
  l_col_rows(5)(9) := 'NOT APPLIED';

  l_col_rows(1)(10) := 'ISP';
  l_col_rows(2)(10) := '13563481';
  l_col_rows(3)(10) := 'Payables iSupplier Integration RPC 1';
  l_col_rows(4)(10) := 'Jan-2012';
  l_col_rows(5)(10) := 'NOT APPLIED';

  l_col_rows(1)(11) := 'ISP';
  l_col_rows(2)(11) := '16213657';
  l_col_rows(3)(11) := 'Payables iSupplier Integration RPC 2';
  l_col_rows(4)(11) := 'Mar-2013';
  l_col_rows(5)(11) := 'NOT APPLIED';

  l_col_rows(1)(12) := 'ISP';
  l_col_rows(2)(12) := '17176034';
  l_col_rows(3)(12) := 'Payables iSupplier Integration RPC 3';
  l_col_rows(4)(12) := 'Sep-2013';
  l_col_rows(5)(12) := 'NOT APPLIED';

  l_col_rows(1)(13) := 'ISP';
  l_col_rows(2)(13) := '19018793';
  l_col_rows(3)(13) := 'Payables iSupplier Integration RPC 4';
  l_col_rows(4)(13) := 'Aug-2014';
  l_col_rows(5)(13) := 'NOT APPLIED';

  l_col_rows(1)(14) := 'ISP';
  l_col_rows(2)(14) := '20178740';
  l_col_rows(3)(14) := 'Payables iSupplier Integration RPC 5';
  l_col_rows(4)(14) := 'Feb-2015';
  l_col_rows(5)(14) := 'NOT APPLIED';

  l_col_rows(1)(15) := 'ISP';
  l_col_rows(2)(15) := '21261663';
  l_col_rows(3)(15) := 'Payables iSupplier Integration RPC 6';
  l_col_rows(4)(15) := 'Aug-2015';
  l_col_rows(5)(15) := 'NOT APPLIED';

  l_col_rows(1)(16) := 'XLA';
  l_col_rows(2)(16) := '14284509';
  l_col_rows(3)(16) := 'Subledger Accounting RPC 1';
  l_col_rows(4)(16) := 'Aug-2012';
  l_col_rows(5)(16) := 'NOT APPLIED';

  l_col_rows(1)(17) := 'XLA';
  l_col_rows(2)(17) := '16060007';
  l_col_rows(3)(17) := 'Subledger Accounting RPC 2';
  l_col_rows(4)(17) := 'Mar-2013';
  l_col_rows(5)(17) := 'NOT APPLIED';

  l_col_rows(1)(18) := 'XLA';
  l_col_rows(2)(18) := '19034020';
  l_col_rows(3)(18) := 'Subledger Accounting RPC 3';
  l_col_rows(4)(18) := 'Aug-2014';
  l_col_rows(5)(18) := 'NOT APPLIED';

  l_col_rows(1)(19) := 'XLA';
  l_col_rows(2)(19) := '20175470';
  l_col_rows(3)(19) := 'Subledger Accounting RPC 4';
  l_col_rows(4)(19) := 'Feb-2015';
  l_col_rows(5)(19) := 'NOT APPLIED';

  l_col_rows(1)(20) := 'XLA';
  l_col_rows(2)(20) := '21340722';
  l_col_rows(3)(20) := 'Subledger Accounting RPC 5';
  l_col_rows(4)(20) := 'Aug-2015';
  l_col_rows(5)(20) := 'NOT APPLIED';

  l_col_rows(1)(21) := 'XLA';
  l_col_rows(2)(21) := '22468218';
  l_col_rows(3)(21) := 'Subledger Accounting RPC 6';
  l_col_rows(4)(21) := 'Feb-2016';
  l_col_rows(5)(21) := 'NOT APPLIED';

  l_col_rows(1)(22) := 'ZX';
  l_col_rows(2)(22) := '14277162';
  l_col_rows(3)(22) := 'E-Business Tax RPC 1';
  l_col_rows(4)(22) := 'Aug-2012';
  l_col_rows(5)(22) := 'NOT APPLIED';

  l_col_rows(1)(23) := 'ZX';
  l_col_rows(2)(23) := '16009960';
  l_col_rows(3)(23) := 'E-Business Tax RPC 2';
  l_col_rows(4)(23) := 'Mar-2013';
  l_col_rows(5)(23) := 'NOT APPLIED';

  l_col_rows(1)(24) := 'ZX';
  l_col_rows(2)(24) := '17202262';
  l_col_rows(3)(24) := 'E-Business Tax RPC 3';
  l_col_rows(4)(24) := 'Sep-2013';
  l_col_rows(5)(24) := 'NOT APPLIED';

  l_col_rows(1)(25) := 'ZX';
  l_col_rows(2)(25) := '19155343';
  l_col_rows(3)(25) := 'E-Business Tax RPC 4';
  l_col_rows(4)(25) := 'Aug-2014';
  l_col_rows(5)(25) := 'NOT APPLIED';

  l_col_rows(1)(26) := 'ZX';
  l_col_rows(2)(26) := '20042161';
  l_col_rows(3)(26) := 'E-Business Tax RPC 5';
  l_col_rows(4)(26) := 'Feb-2015';
  l_col_rows(5)(26) := 'NOT APPLIED';

  l_col_rows(1)(27) := 'ZX';
  l_col_rows(2)(27) := '21213464';
  l_col_rows(3)(27) := 'E-Business Tax RPC 6';
  l_col_rows(4)(27) := 'Aug-2015';
  l_col_rows(5)(27) := 'NOT APPLIED';

  l_col_rows(1)(28) := 'IBY';
  l_col_rows(2)(28) := '14208483';
  l_col_rows(3)(28) := 'Payments RPC 1';
  l_col_rows(4)(28) := 'Aug-2012';
  l_col_rows(5)(28) := 'NOT APPLIED';

  l_col_rows(1)(29) := 'IBY';
  l_col_rows(2)(29) := '16052604';
  l_col_rows(3)(29) := 'Payments RPC 2';
  l_col_rows(4)(29) := 'Mar-2013';
  l_col_rows(5)(29) := 'NOT APPLIED';

  l_col_rows(1)(30) := 'IBY';
  l_col_rows(2)(30) := '17167654';
  l_col_rows(3)(30) := 'Payments RPC 3';
  l_col_rows(4)(30) := 'Sep-2013';
  l_col_rows(5)(30) := 'NOT APPLIED';

  l_col_rows(1)(31) := 'IBY';
  l_col_rows(2)(31) := '18999775';
  l_col_rows(3)(31) := 'Payments RPC 4';
  l_col_rows(4)(31) := 'Aug-2014';
  l_col_rows(5)(31) := 'NOT APPLIED';

  l_col_rows(1)(32) := 'IBY';
  l_col_rows(2)(32) := '20289581';
  l_col_rows(3)(32) := 'Payments RPC 5';
  l_col_rows(4)(32) := 'Feb-2015';
  l_col_rows(5)(32) := 'NOT APPLIED';

  l_col_rows(1)(33) := 'IBY';
  l_col_rows(2)(33) := '21316961';
  l_col_rows(3)(33) := 'Payments RPC 6';
  l_col_rows(4)(33) := 'Aug-2015';
  l_col_rows(5)(33) := 'NOT APPLIED';

  l_col_rows(1)(33) := 'IBY';
  l_col_rows(2)(33) := '22350639';
  l_col_rows(3)(33) := 'Payments RPC 7';
  l_col_rows(4)(33) := 'Feb-2016';
  l_col_rows(5)(33) := 'NOT APPLIED';

  g_undo_applied := check_patch(l_col_rows(2)(1));
  IF g_undo_applied THEN
    write_dx(' <undo_ptch>Y</undo_ptch>');
  ELSE
    write_dx(' <undo_ptch>'||l_col_rows(2)(1)||'</undo_ptch>');
  END IF;
 
  print_out('<br><div class="Box">Recommended Patch Status');
  print_out('<a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''recopatch'')">&#9650;</a><br/>');
  print_out('<div id="recopatch" class="BoxContent"><table width="960px"> ');
  print_out('<thead></thead><tbody>');
  print_out('<tr><th>'||l_cols(1)||'</th><th>'||l_cols(2)||
    '</th><th>'||l_cols(3)||'</th><th>'||l_cols(4)||
    '</th><th>'||l_cols(5)||'</th></tr>');
  
  write_dx(' <rpc>');
  FOR i IN 1 .. l_col_rows(1).count LOOP
    IF check_patch(l_col_rows(2)(i)) THEN
      OPEN get_app_date(l_col_rows(2)(i));
      FETCH get_app_date INTO l_applied_date;
      CLOSE get_app_date;
      IF l_applied_date is not null THEN
        l_col_rows(5)(i) := to_char(l_applied_date,'DD-Mon-YYYY');
        print_out('<tr><td>'||l_col_rows(1)(i)||'</td>');
          print_out('<td>'||l_col_rows(2)(i)||'</td>');
          print_out('<td>'||l_col_rows(3)(i)||'</td>');
          print_out('<td>'||l_col_rows(4)(i)||'</td>');
          print_out('<td>'||l_col_rows(5)(i)||'</td>');
        print_out('</tr>');
      END IF;
    ELSE
      IF (i = l_col_rows(1).count) THEN
        write_dx('  <patch>');
        write_dx('   <app>'||l_col_rows(1)(i)||'</app>');
        write_dx('   <num>'||l_col_rows(2)(i)||'</num>');
        write_dx('   <description>'||l_col_rows(3)(i)||'</description>');
        write_dx('  </patch>');
        print_out('<tr><td class="warn">'||l_col_rows(1)(i)||'</td>');
          print_out('<td class="warn">'||l_col_rows(2)(i)||'</td>');
          print_out('<td class="warn">'||l_col_rows(3)(i)||'</td>');
          print_out('<td class="warn">'||l_col_rows(4)(i)||'</td>');
          print_out('<td class="warn">'||l_col_rows(5)(i)||'</td>');
        print_out('</tr>');
        l_warning := true;
      ELSIF (l_col_rows(1)(i) != l_col_rows(1)(i+1)) THEN
        write_dx('  <patch>');
        write_dx('   <app>'||l_col_rows(1)(i)||'</app>');
        write_dx('   <num>'||l_col_rows(2)(i)||'</num>');
        write_dx('   <description>'||l_col_rows(3)(i)||'</description>');
        write_dx('  </patch>');
        print_out('<tr><td class="warn">'||l_col_rows(1)(i)||'</td>');
          print_out('<td class="warn">'||l_col_rows(2)(i)||'</td>');
          print_out('<td class="warn">'||l_col_rows(3)(i)||'</td>');
          print_out('<td class="warn">'||l_col_rows(4)(i)||'</td>');
          print_out('<td class="warn">'||l_col_rows(5)(i)||'</td>');
        print_out('</tr>');
        l_warning := true;
      END IF;
    END IF;
  END LOOP;
  write_dx(' </rpc>');
  print_out('</tbody></table><br/>');

  -- Add to the analyzer DX summary
  gen_anlz_dx(p_sig_id => 'REC_PATCH_CHECK',
    p_sig => null,
    p_col_rows => l_col_rows,
    p_col_headings => l_cols,
    p_limit_rows => 'N');

  IF l_warning THEN
    print_out('<div class="BoxWarn">');
    print_out('<strong>WARNING:</strong> One or more critical recommended '||
      'patch collection patches (in yellow) has not been applied.<br>');
    print_out('<strong>ACTION:</strong> Please see note '||note_link('1397581.1'));
    print_out('for details on these critical RPC patch releases.<br>');
    print_out('</div>');
  END IF;
  print_out('</div></div><br/>');
END print_rpc_info;

PROCEDURE print_notes(p_apps_version IN VARCHAR2 DEFAULT NULL) IS
  TYPE varchar_tbl IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
  l_notes VARCHAR_TBL;
  l_index NUMBER := 1;
BEGIN
  
  IF p_apps_version like '12.2%' THEN
    l_notes(l_index) := '<strong>IMPORTANT:</strong>
      Not all available GDF patches have been released for
      12.2. If this diagnostic points you to a GDF patch 
      that is not available on 12.2, please refer to Note '||
      note_link('1597490.1')||' for instructions on how to
      implement the solution';
    l_index := l_index + 1;
  END IF;
  l_notes(l_index) := '<strong>DISCLAIMER:</strong>
    If you are using any data warehousing
    tools or custom application which consumes data based on
    the WHO columns of application tables (e.g. last_update_date),
    please be aware that currently GDF patches do not maintain
    these columns.  Please contact support before executing
    a GDF on your production instance if you require this data
    to be maintained.';
  l_index := l_index + 1;
  IF g_mode = 'SINGLE' THEN
    l_notes(l_index) := '<strong>NOTE:</strong>
      This diagnostic can also be run proactively to scan
      all the transactions within a range of dates in your 
      current open period. It can easily be defined as a 
      concurrent process, and if run regularly throughout 
      the period it can help users to identify
      data issues and exceptions along with solutions
      before they even become an issue.';
    l_index := l_index + 1;
  END IF;

  IF l_notes.count > 0 THEN
    print_out('<div class="Box">Important Notes &amp; Communications '||
      '<a style="font-size: 13px;" href="javascript:;" '||
      'onclick="HideShow(this,''rnotes'')">&#9650;</a><br/>');
    print_out('<div id="rnotes" class="BoxContent"><ul>');
    FOR i IN l_notes.first .. l_notes.last LOOP
      print_out('  <li>'||l_notes(i)||'</li>');
    END LOOP;
    print_out('</ul></div></div><br/>');
  END IF;

  -- Print section "how to use this report"

  print_out('<div class="Box">How to Use This Report
    <a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''rhlpcnt'')">&#9660;</a><br/>');
  print_out('<div id="rhlpcnt" class="BoxContent" style="display: none;">');
  print_out('This report identifies data integrity issues affecting a transaction
   (or range of transactions) which may prevent the indicated <strong>
   Impact Areas</strong> from completing successfully.<br/><br/> 
   For example: if the report identifies a transaction whose impact
   area is "Accounting Failure", it indicates that the transaction
   will likely fail to account due to the reported data integrity issue.<br/><br/>
   When this report indicates that given data integrity issue exists,
   it will also indicate a solution when one is available. Most often this
   will be a Generic Data Fix (GDF).<br/><br/>
  <strong>How to proceed:</strong>
  <ol>
  <li>Prioritize first the GDF patches related to your 
      currently affected Impact Area.</li>
  <li>You should also address issues reported in other impact areas,
      even if they are not causing an immediate issue that you are aware of.
      These issues may not manifest themselves until later (for example,
      during the month end close). </li>
  <li>Apply the corresponding GDF patch(es). <strong>Note that GDF''s are
      published solutions and are fully Supported. You need no
      confirmation from support or development to apply them.</strong></li>
  <li>Take special precaution when the reported GDF indicates that it will
      undo-Accounting. You should take care in the transactions you select
      to be processed by the GDF.  Refer to Note: '||note_link('753695.1')||
      ' to fully understand potential implications.
      Note that when a GDF requires undo-accounting there is not an alternate
      action plan to correct the data. Accounting must be undone.</li>
  <li>GDFs rarely (if ever) perform an incorrect data fix; however, you 
      should keep the temporary backup tables created by the GDF until
      the fix has been fully tested and validated</li>
  <li>As with any system change, you should test it thoroughly in a
      test instance which is a clone of production prior to applying it in
      your production instance.</li>
  </ol><br/>');
  print_out('<strong>Preventative Recommendations - Stay ahead of
    disruptive issues:</strong>
  <ol>
  <li>Install the Master GDF Diagnostic (this report) as a concurrent process.
      See Note: '||note_link('1361255.1')||' for instructions</li>
  <li>End users can be given access to the report so that they can 
      reactively scan for issues with a transaction when something 
      is not functioning properly. </li>
  <li>You can also use the date range concurrent process to scan ranges
      of transactions through the month, and address issues PROACTIVELY
      to avoid last minute disruptions in business processes.</li>
  <li>Download the latest report definition at least twice a month to
      make sure you have the latest detections. You only need to recompile
      the package with the new version. Concurrent process re-registration
      is not necessary.</li>
  <li>This report will scan for key recommended patches and indicate whether have
      applied them. You should schedule to apply any that have not been applied
      if you have not already done so. The patches recommended by this
      report eliminate the root cause of most data integrity issues.</li>
  </ol></div></div><br/>');


END print_notes;

PROCEDURE print_statistics_info IS
  TYPE schema_tbl IS TABLE OF VARCHAR2(15) INDEX BY BINARY_INTEGER;
  TYPE last_stats_tbl IS TABLE OF DATE INDEX BY BINARY_INTEGER;
  l_schema_tbl SCHEMA_TBL;
  l_last_analyzed_tbl LAST_STATS_TBL;

  CURSOR stale_statistics IS
  SELECT owner,
         min(last_analyzed)
  FROM dba_tables
  WHERE table_name IN (
          'AD_APPLIED_PATCHES', 'AD_BUGS', 'AP_ACCOUNTING_EVENTS_ALL',
          'AP_AE_HEADERS_ALL', 'AP_AE_LINES_ALL',
          'AP_AWT_TEMP_DISTRIBUTIONS_ALL', 'AP_BATCHES_ALL',
          'AP_CHECKS_ALL', 'AP_CHRG_ALLOCATIONS_ALL',
          'AP_DUPLICATE_VENDORS_ALL', 'AP_HOLD_CODES',
          'AP_HOLDS_ALL', 'AP_INVOICE_DISTRIBUTIONS_ALL',
          'AP_INVOICE_DISTS_ARCH', 'AP_INVOICE_LINES_ALL',
          'AP_INVOICE_PAYMENTS_ALL', 'AP_INVOICES_ALL', 'AP_LEDGER_OPTIONS',
          'AP_LIABILITY_BALANCE', 'AP_PAYMENT_HIST_DISTS',
          'AP_PAYMENT_HISTORY_ALL', 'AP_PAYMENT_SCHEDULES_ALL',
          'AP_PREPAY_APP_DISTS', 'AP_PREPAY_HISTORY_ALL',
          'AP_RECURRING_PAYMENTS_ALL', 'AP_SELF_ASSESSED_TAX_DIST_ALL',
          'AP_SLA_INVOICES_TRANSACTION_V', 'AP_SUPPLIER_CONTACTS',
          'AP_SUPPLIERS', 'AP_SUPPLIER_SITES_ALL',
          'AP_SYSTEM_PARAMETERS_ALL', 'AP_TAX_CODES_ALL',
          'AP_TERMS_LINES', 'CST_ACCRUAL_ACCOUNTS',
          'FINANCIALS_SYSTEM_PARAMS_ALL', 'FND_CONCURRENT_REQUESTS',
          'FND_CURRENCIES', 'GL_CODE_COMBINATIONS', 'GL_LEDGERS',
          'GL_LEDGER_SEGMENT_VALUES', 'GL_PERIOD_STATUSES',
          'GL_SETS_OF_BOOKS', 'HZ_ORG_CONTACTS', 'HZ_PARTIES',
          'HZ_PARTY_SITES', 'IBY_DOCS_PAYABLE_ALL',
          'IBY_EXT_BANK_ACCOUNTS', 'IBY_EXTERNAL_PAYEES_ALL',
          'IBY_PAYMENTS_ALL', 'IBY_PAY_SERVICE_REQUESTS',
          'IBY_PMT_INSTR_USES_ALL', 'IBY_UPG_INSTRUMENTS',
          'PER_ALL_PEOPLE_F', 'PO_DISTRIBUTIONS_ALL',
          'PO_HEADERS_ALL', 'PO_LINE_LOCATIONS_ALL', 'PO_LINES_ALL',
          'PO_VENDOR_SITES_OBS', 'PO_VENDORS_OBS',
          'RCV_SHIPMENT_LINES', 'RCV_TRANSACTIONS',
          'WF_ITEM_ATTRIBUTE_VALUES', 'WF_ITEMS', 'XLA_AE_HEADERS',
          'XLA_AE_LINES', 'XLA_DISTRIBUTION_LINKS', 'XLA_EVENTS',
          'XLA_LEDGER_OPTIONS', 'XLA_TRANSACTION_ENTITIES',
          'XLA_TRANSACTION_ENTITIES_UPG', 'XLE_ETB_PROFILES',
          'ZX_LINES', 'ZX_LINES_DET_FACTORS', 'ZX_LINES_SUMMARY',
          'ZX_PARTY_TAX_PROFILE', 'ZX_RATES_B', 'ZX_REC_NREC_DIST')
  AND   owner IN (
          'AP', 'APPLSYS', 'AR', 'BOM', 'GL', 'HR', 'IBY',
          'PO', 'XLA', 'XLE', 'ZX')
  GROUP BY owner
  HAVING min(last_analyzed) < add_months(sysdate, -1)
  ORDER BY 1;

BEGIN
  OPEN stale_statistics;
  FETCH stale_statistics BULK COLLECT INTO
    l_schema_tbl,
    l_last_analyzed_tbl;
  IF l_schema_tbl.count > 0 THEN

    print_out('<div class="Box">Stale Statistics <a style="font-size: 13px;" href="javascript:;" onclick="HideShow(this,''stalestat'')">&#9650;</a><br/>');
    print_out('<div id="stalestat" class="BoxContent">');
    print_out('<div class="BoxWarn">');
    print_out('<strong>WARNING: </strong>the following schemas contain '||
      'tables used in this report for which statistics are over one month old.<br/>');
    print_out('<strong>ACTION:</strong> For optimal performance when '||
      'running this report for a date range you should run the "Gather Schema '||
      'Statistics" concurrent process for the schemas indicated below');
    print_out('</div><br/>');
    print_out('<table><tbody>');
    print_out('<tr><th>Schema</th><th>Last Analyzed Date</th></tr>');
    FOR i IN l_schema_tbl.first .. l_schema_tbl.last LOOP
      print_out('<tr><td>'||l_schema_tbl(i)||'</td>');
      print_out('<td>'||to_char(l_last_analyzed_tbl(i),'DD-MON-YYYY')||
        '</td></tr>');
    END LOOP;
    print_out('</tbody></table>');
    print_out('</div></div><br/>');

  END IF;
  
END print_statistics_info;
  
PROCEDURE initialize_files(p_file_location OUT VARCHAR2) is
  l_date_char        VARCHAR2(20);
  l_log_file         VARCHAR2(35);
  l_out_file         VARCHAR2(35);
  l_file_location    V$PARAMETER.VALUE%TYPE;
  l_dir_name         ALL_DIRECTORIES.DIRECTORY_NAME%TYPE;
  NO_UTL_DIR         EXCEPTION;
BEGIN

  start_timer(g_process_start_time);
  g_query_total := numtodsinterval(0,'SECOND');
  BEGIN
    SELECT instance_name, host_name
      INTO g_rep_info('Instance'), g_rep_info('Host')
      FROM v$instance;
  EXCEPTION WHEN OTHERS THEN
    print_log('Error getting instance information in initialize_files: '||sqlerrm);
    raise;
  END;

  IF NOT g_is_concurrent THEN

    select to_char(sysdate,'YYYY-MM-DD-HH24MISS') into l_date_char from dual;

    l_log_file := 'AP-GDF-'||l_date_char||'.log';
    l_out_file := 'AP-GDF-'||l_date_char||'.html';

    SELECT decode(instr(value,','),0,value,
           SUBSTR (value,1,instr(value,',') - 1))
    INTO   l_file_location
    FROM   v$parameter
    WHERE  name = 'utl_file_dir';

    BEGIN
      SELECT directory_name 
      INTO   l_dir_name
      FROM   all_directories
      WHERE  directory_path = l_file_location
      AND    rownum = 1;
    EXCEPTION WHEN OTHERS THEN
      l_dir_name := null;
    END;

    IF l_file_location is null THEN
      RAISE NO_UTL_DIR;
    ELSE
      p_file_location := l_file_location||'/'||l_out_file;
      IF l_dir_name is null THEN
        g_log_file := utl_file.fopen(l_file_location, l_log_file, 'w', 5120);
        g_out_file := utl_file.fopen(l_file_location, l_out_file, 'w', 5120);
      ELSE
        g_log_file := utl_file.fopen(l_dir_name, l_log_file, 'w', 5120);
        g_out_file := utl_file.fopen(l_dir_name, l_out_file, 'w', 5120);
      END IF;
    END IF;
    dbms_output.put_line('Log and output files are located on host: '||g_rep_info('Host'));
    dbms_output.put_line('Output file: '||p_file_location);
    dbms_output.put_line('Log file:    '||l_file_location||'/'||l_log_file);

  END IF;

  dbms_lob.createtemporary(g_dx_summary, false, 10);

EXCEPTION
  WHEN NO_UTL_DIR THEN
    dbms_output.put_line('Exception: Unable to identify a valid output '||
      'directory for UTL_FILE in initialize_files');
    raise;
  WHEN OTHERS THEN
    dbms_output.put_line('Exception: '||sqlerrm||' in initialize_files');
    raise;
END initialize_files;


PROCEDURE close_files IS
BEGIN
  IF NOT g_is_concurrent THEN
    debug('Closing files');
    utl_file.fclose(g_log_file);
    utl_file.fclose(g_out_file);
  END IF;
END;

PROCEDURE add_signature(p_signatures IN OUT signature_tbl,
                        p_sig_id IN NUMBER,
                        p_category IN VARCHAR2,
                        p_sub_category IN VARCHAR2,
                        p_bug IN VARCHAR2,
                        p_note IN VARCHAR2,
                        p_script IN VARCHAR2,
                        p_problem IN VARCHAR2,
                        p_fix IN VARCHAR2,
                        p_gdf_flag IN VARCHAR2,
                        p_undoes_accounting IN VARCHAR2,
                        p_impact_areas IN IMPACT_AREA_TBL,
                        p_sql IN VARCHAR2) IS
  n integer;
BEGIN
  p_signatures.extend();
  n := p_signatures.last;
  p_signatures(n).sig_id := p_sig_id;
  p_signatures(n).category := p_category;
  p_signatures(n).sub_category := p_sub_category;
  p_signatures(n).bug_number := p_bug;
  p_signatures(n).note_number := p_note;
  p_signatures(n).script_name := p_script;
  p_signatures(n).problem_text := p_problem;
  p_signatures(n).fix_text := p_fix;
  p_signatures(n).gdf_flag := p_gdf_flag;
  p_signatures(n).undoes_accounting := p_undoes_accounting;
  p_signatures(n).impact_areas := p_impact_areas;
  p_signatures(n).signature_sql := p_sql;
EXCEPTION
  WHEN OTHERS THEN
    print_log('Error loading signature '||to_char(n)||' (ID='||to_char(p_sig_id)||
      ') in procedure add_signature');
    print_log('Error: '||sqlerrm);
    raise;
END add_signature;


PROCEDURE populate_impact_summary IS
  l_key  VARCHAR2(100);
  l_html VARCHAR2(10000);
BEGIN
  l_html := '"<div class=\"Box\">Summary of Issues by Impact Area "+
    "<a style=\"font-size: 13px;\" href=\"javascript:;\" "+
    "onclick=\"HideShow(this,''impact_summary_content'')\">&#9660;</a><br/>"+
    "<div id=\"impact_summary_content\"class=\"BoxContent\" "+
    "style=\"display: none;\">"+
    "Although we recommend fixing all data integrity issues "+
    "found in this report, not all signatures identified may be related "+
    "to a specific problem you are experiencing. The table below can help "+
    "to identify which issues are related to a particular functional area "+
    "within the product so that you can prioritize which to address first. "+
    "For example, if a transaction fails to account, the issues identified "+
    "with the impact area \"Accounting Failure\" would be a priority. "+
    "<br><br><table width=\"50%\"><tbody><tr><th colspan=\"2\">"+
    "Issues Detected by Impact Area</th><th>Check to Highlight "+
    "</th></tr>"+';

  l_key := g_impacts_tbl.first;
  WHILE l_key is not null LOOP
    l_html := l_html || '"<tr><th>'|| l_key ||'</th><td>'||
      g_impacts_tbl(l_key) ||'</td><th class=\"separator\">"+
      "<input name=\"chbx-'||l_key||
      '\" type=\"checkbox\" onclick=\"highlight('''||l_key||''',this.checked)\"/>"+
      "</th></tr>"+';
    l_key := g_impacts_tbl.next(l_key);
  END LOOP;
  l_html := l_html || '"</tbody></table></div></div>"';

  print_out('<SCRIPT type="text/javascript">
    document.getElementById("impact_summary").innerHTML = '||l_html||';
    </SCRIPT>');
EXCEPTION WHEN OTHERS THEN
  print_log('Error populating impact summary: '||sqlerrm);
  RAISE;  
END populate_impact_summary;


PROCEDURE print_header(p_type IN VARCHAR2 default null) IS
  l_apps_version FND_PRODUCT_GROUPS.RELEASE_NAME%TYPE;
  l_date_char    VARCHAR2(30);
  l_date         DATE;
  l_org_ids      VARCHAR2(150);
BEGIN
  -- get the applications version
  BEGIN
    SELECT max(release_name) 
    INTO   l_apps_version
    FROM   fnd_product_groups;
  EXCEPTION WHEN OTHERS THEN
    l_apps_version := null;
  END;

  g_rep_info('Apps Version') := l_apps_version;

IF p_type is null THEN
  print_out('
<HTML><HEAD>
<STYLE>
.RepTitle {
	font-family: "Segoe UI Semibold", Trebuchet, Helvetica, Arial;
	font-size:24pt;
	color: #114477;
	border-bottom:1px #BBBBBB solid;
	margin-bottom:10px;
	padding: 10px;
}
.Box {
	font-family: "Segoe UI Semibold", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:14pt;
	color: #336699;
	border:1px #BBBBBB dotted;
	margin-bottom:10px;
	padding: 10px;
}
.BoxLight {
	font-family: "Segoe UI Semibold", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:12pt;
	color: #5588BB;
	border:1px #BBBBBB dotted;
	margin-bottom:10px;
	padding: 10px;
	background-color:#FFFFEC;
}
.BoxGDF {
	font-family: "Segoe UI Semibold", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:16pt;
	color:#AA3333;
	border:1px #BBBBBB dotted;
	margin-bottom:10px;
	padding: 10px;
}
.BoxSmall {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
	color: #666666;
	margin-bottom:10px;
	padding: 10px;
}
.BoxContent {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
	color: #606060;
	padding: 10px;
	box-shadow: 3px 3px 3px #CCCCEE;
}
.BoxWarn {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
	color: #606060;
	padding: 10px;
	box-shadow: 3px 3px 3px #CCCCEE;
	background-color:#F9FF80;
}
.BoxErr {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
	color:#F0F0F0;
	padding: 10px;
	box-shadow: 3px 3px 3px #CCCCEE;
	background-color:#E04040;
}
.BoxFix {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
	color:#606060;
	padding: 10px;
	box-shadow: 3px 3px 3px #CCCCEE;
	background-color:#FFC6A6;
}
.BoxUndo {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
	color:#F0F0F0;
	padding: 10px;
	box-shadow: 3px 3px 3px #CCCCEE;
	background-color:#E04040;
}
.BoxOk {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
	color:#606060;
	padding: 10px;
	box-shadow: 3px 3px 3px #CCCCEE;
	background-color:#ECFFF5;
}
.trxnlist {
    overflow:auto;
}
.sigtitle {
  font-size:12pt;
}
td {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
    background-color:#F8F8F8;
    color: #606060;
    padding: 3px;
}
td.err {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
background-color:#f2f2f5;
color:#cc0000;
    padding: 3px;
}
td.warn {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
    background-color:#F9FF80;
    color:#777777;
    padding: 3px;
}
td.fix {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-weight:normal;
	font-size:10pt;
background-color:#fc9579;
color:#363636;
    padding: 3px;
}
th {
	font-family: "Segoe UI Semibold", Trebuchet, Helvetica, Arial;
	font-size:10pt;
    font-weight:normal;
    text-align:left;
    background-color:#ECECFC;
    color:#666666;
    padding: 3px;
}
th.main {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-size:12pt;
    font-weight:bold;
    text-align:center;
    background-color:#ECECFC;
    color:#666666;
    padding: 3px;
    width: 450px;
}
th.separator {
	font-family: "Segoe UI", Trebuchet, Helvetica, Arial;
	font-size:12pt;
    font-weight:bold;
    text-align:center;
    background-color:#FFFFFF;
    color:#666666;
    padding: 3px;
    width: 60px;
}
hr.hr1
{
    background-color:#336699;
    height: 5px;
    border-style:dotted;
}
.italsmall
{
    font-family:"Segoe UI", Trebuchet, Helvetica, Arial;
    font-style:italic;
    font-size:10pt;
}
.button   {
	-moz-box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	-webkit-box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #79bbff), color-stop(1, #378de5) );
	background:-moz-linear-gradient( center top, #79bbff 5%, #378de5 100% );
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=''#79bbff'', endColorstr=''#378de5'');
	background-color:#79bbff;
	-moz-border-radius:6px;
	-webkit-border-radius:6px;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	color:#ffffff;
	font-family:arial;
	font-size:12px;
	font-weight:bold;
	padding:4px 18px;
	text-decoration:none;
	text-shadow:1px 1px 0px #528ecc;
}.button:hover {
	background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #378de5), color-stop(1, #79bbff) );
	background:-moz-linear-gradient( center top, #378de5 5%, #79bbff 100% );
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=''#378de5'', endColorstr=''#79bbff'');
	background-color:#378de5;
}.button:active {
	position:relative;
	top:1px;
}
.getproimg {
	vertical-align: middle;
	margin-top: 0px;
	margin-left: 40px;
	margin-bottom: 10px;
}

</STYLE>
<SCRIPT type="text/javascript">
  function displaySQL(e, sig_id) {
    var row = document.getElementById("sig"+sig_id);
    if (row.style.display == ""){
      e.value = "Show SQL";
      row.style.display = "none";
    }
    else {
      e.value = "Hide SQL";
      row.style.display = "";
    }
  }

  function HideShow(e, itm_id) {
    var tbl = document.getElementById(itm_id);
    if (tbl.style.display == ""){
      e.innerHTML = String.fromCharCode(9660);
      tbl.style.display = "none"; }
    else {
      e.innerHTML = String.fromCharCode(9650);
      tbl.style.display = ""; } }

  function highlight(id, checked) {
    var impact = "X";
    for (var i=1; impact != null; i++) {
      impact = document.getElementById(id + "_" + i);
      if (impact != null) {
        if (checked == true) {
          impact.style.backgroundColor = "yellow";
          impact.style.color = "red";
          impact.style.fontSize = "18pt"; }
        else {
          impact.style.backgroundColor = "transparent";
          impact.style.color = "#666666";
          impact.style.fontSize = "12pt"; }}}
  }

</SCRIPT>
</HEAD>
<BODY>');
  print_out('<div class="RepTitle">AP Data Validation Report - Master GDF Diagnostic');
  print_out('<a href="https://support.oracle.com/epmos/faces/DocumentDisplay?'||
    'parent=ANALYZER&sourceId=1360390.1&id=432.1" target="_blank">');
  print_out('<img style="border-radius: 5px; opacity:0.7; ilter:alpha(opacity=70); "');
  print_out(' src="https://blogs.oracle.com/ebs/resource/Proactive/banner4.jpg" '||
    'title="Click here to see other helpful Oracle Proactive Tools"');
  print_out(' width="400" height="41" border="0" alt="Click Here '||
    'for more tools like this" class="getproimg"></a>');
  print_out('</div><br><br/><br/>');

ELSIF p_type = 'PARAMETERS' THEN

  BEGIN
    SELECT to_char(sysdate, 'DD-Mon-YYYY HH24:MM:SS')
    INTO   g_rep_info('Execution Date') 
    FROM   dual;
  EXCEPTION WHEN OTHERS THEN
    g_rep_info('Execution Date') := null;
  END;


  g_rep_info('File Name') := 'ap_gdf_detect_pkg.sql';
  g_rep_info('File Version') := rtrim(replace('$Revision: 200.354 $','$',''));
  g_rep_info('File Version') := ltrim(replace(g_rep_info('File Version'),'Revision:',''));
  g_rep_info('File Date') := rtrim(replace('$Date: 2016/07/07 20:16:56 $','$',''));
  g_rep_info('File Date') := ltrim(replace(g_rep_info('File Date'),'Date:',''));     
  l_date := to_date(g_rep_info('File Date'),'YYYY/MM/DD HH24:MI:SS');

  g_rep_info('Description') := 
    'The Master GDF Diagnostic (MGD) is a comprehensive tool for validating data '||
    'in Payables related to invoices, payments, accounting, suppliers and EBTax';

  IF g_is_concurrent THEN
    g_rep_info('Calling From') := 'Concurrent Program';
  ELSE
    g_rep_info('Calling From') := 'SQL Script';
  END IF; 

  write_dx(' <script_version>'||g_rep_info('File Version')||'</script_version>');

  IF sysdate - l_date > 15 THEN
    print_out('<div class="BoxWarn"><strong>WARNING:</strong> This
      version of the script is over 15 days old<br />
      <strong>ACTION: </strong>Please verify you have the latest version
      from note '||note_link('1360390.1')||' and download and compile the 
      latest version as necessary.</div><br/><br/>');
  END IF;

  IF g_org_ids like 'SELECT%' THEN
    l_org_ids := null;
  ELSE
    l_org_ids := g_org_ids;
  END IF;

  print_out('<div class="Box">Report Arguments &amp; Instance Details');
  print_out('	<a style="font-size: 13px;" href="javascript:;" onclick="HideShow(this,''rargs'')">&#9660;</a><br/>');
  print_out('<div id="rargs" class="BoxContent" style="display: none;">');


  print_out('<table><tbody><tr><th class="main" colspan="2">Arguments</th><th class="separator">&nbsp;</th><th class="main" colspan="2">Instance Details</th></tr>');

  -- Set parameters for Analyzer style DX summary
  g_params('Invoice ID') := to_char(g_invoice_id);
  g_params('Check ID') := to_char(g_check_id);
  g_params('Vendor ID') := to_char(g_vendor_id);
  g_params('Start Date') := to_char(g_start_date,'DD-MON-YYYY');
  g_params('End Date') := to_char(g_end_date,'DD-MON-YYYY');
  g_params('Operating Units') := l_org_ids;
  g_params('Transaction Type') := g_trx_type;
  g_params('Validations') := g_validations;
  g_params('Maximum Rows') := to_char(g_max_output_rows);
  g_params('Print to Stdout') := g_print_to_stdout;
  g_params('Debug Mode') := g_debug_mode;

  print_out('<tr><th>Invoice ID</th><td>'||g_params('Invoice ID')||'</td>');
  print_out('<th class="separator">&nbsp;</th>');
  print_out('<th>Host</th><td>'||g_rep_info('Host')||'</td></tr>');
  print_out('<tr><th>Check ID</th><td>'||g_params('Check ID')||'</td>');
  print_out('<th class="separator">&nbsp;</th>');
  print_out('<th>Instance</th><td>'||g_rep_info('Instance')||'</td></tr>');
  print_out('<tr><th>Vendor ID</th><td>'||g_params('Vendor ID')||'</td>');
  print_out('<th class="separator">&nbsp;</th><th>Applications Version</th>');
  print_out('<td>'||l_apps_version||'</td></tr>');
  print_out('<tr><th>Start Date</th><td>'||g_params('Start Date')||'</td>');
  print_out('<th class="separator">&nbsp;</th>');
  print_out('<th>Run Date</th><td>'||g_rep_info('Execution Date')||'</td></tr>');
  print_out('<tr><th>End Date</th><td>'||g_params('End Date')||'</td>');
  print_out('<th class="separator">&nbsp;</th>');
  print_out('<th>Script Version</th><td>'||g_rep_info('File Version')||'</td></tr>');
  print_out('<tr><th>Operating Units</th><td>'||g_params('Operating Units')||'</td>');
  print_out('<th class="separator">&nbsp;</th><th>Script Date</th>');
  print_out('<td>'||to_char(l_date,'DD-Mon-YYYY')||'</td></tr>');
  print_out('<tr><th>Transaction Type</th><td>'||g_params('Transaction Type')||'</td>');
  print_out('<th class="separator">&nbsp;</th><th></th><td></td></tr>');
  print_out('<tr><th>Validations</th><td>'||g_params('Validations')||'</td>');
  print_out('<th class="separator">&nbsp;</th><th></th><td></td></tr>');
  print_out('<tr><th>Maximum Rows</th><td>'|| g_params('Maximum Rows')||'</td>');
  print_out('<th class="separator">&nbsp;</th><th></th><td></td></tr>');
  print_out('<tr><th>Print to Stdout</th><td>'||g_params('Print to Stdout')||'</td>');
  print_out('<th class="separator">&nbsp;</th><th></th><td></td></tr>');
  print_out('<tr><th>Debug Mode</th><td>'||g_params('Debug Mode')||'</td>');
  print_out('<th class="separator">&nbsp;</th><th></th><td></td></tr>');
  print_out('</tbody></table>');

  IF g_skipped_ous.count > 0 THEN
    DECLARE
      l_skipped_ous VARCHAR2(10000);
    BEGIN
      FOR i in 1..g_skipped_ous.count LOOP
        l_skipped_ous := l_skipped_ous||g_skipped_ous(i)||', ';
      END LOOP;
      l_skipped_ous := rtrim(l_skipped_ous,', ');
      print_out('<br/><div class="BoxWarn"><strong>ATTENTION: </strong>');
      print_out('The following operating units were skipped because the '||
        'start and end dates used do not fall into an open Payables period '||
        'for the ledger: '||l_skipped_ous);
      print_out('</div>');
    END;
  END IF;
  print_out('</div></div>');

ELSIF p_type = 'IMPACT_SUMMARY' THEN
  -- Create dummy section for the impact summary
  print_out('<span id="impact_summary"></span>');
ELSIF p_type = 'RPC_STATUS' THEN
  IF l_apps_version IN ('12.1.1','12.1.2','12.1.3') THEN
    print_rpc_info;
  END IF;
ELSIF p_type = 'NOTES' THEN
  print_notes(l_apps_version);
ELSIF p_type = 'STATISTICS_STATUS' THEN
  IF g_mode = 'DATERANGE' THEN
    print_statistics_info;
  END IF;

-- Gather and print title instance info, params, whatever else here
ELSIF p_type = 'GENERAL' THEN

  print_out('<div class="Box">General (Non Transaction Specific) Data Validation '||
    '<a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''genvals'')">&#9650;</a><br/>');
  print_out('<div id="genvals" class="BoxContent">');

ELSIF p_type = 'NON_GDF_GENERAL' THEN

  print_out('<div class="Box">General (Non Transaction Specific) Data Validation '||
    '<a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''ngdfgenvals'')">&#9650;</a><br/>');
  print_out('<div id="ngdfgenvals" class="BoxContent">');

ELSIF p_type = 'INVOICE' THEN

  print_out('<div class="Box">Invoice Data Validation '||
    '<a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''invvals'')">&#9650;</a><br/>');
  print_out('<div id="invvals" class="BoxContent">');

ELSIF p_type = 'NON_GDF_INVOICE' THEN

  print_out('<div class="Box">Invoice Data Validation '||
    '<a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''ngdfinvvals'')">&#9650;</a><br/>');
  print_out('<div id="ngdfinvvals" class="BoxContent">');

ELSIF p_type = 'PAYMENT' THEN

  print_out('<div class="Box">Payment Data Validation '||
    '<a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''pmtvals'')">&#9650;</a><br/>');
  print_out('<div id="pmtvals" class="BoxContent">');

ELSIF p_type = 'NON_GDF_PAYMENT' THEN

  print_out('<div class="Box">Payment Data Validation '||
    '<a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''ngdfpmtvals'')">&#9650;</a><br/>');
  print_out('<div id="ngdfpmtvals" class="BoxContent">');

ELSIF p_type = 'SUPPLIER' THEN

  print_out('<div class="Box">Supplier Data Validation '||
    '<a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''supvals'')">&#9650;</a><br/>');
  print_out('<div id="supvals" class="BoxContent">');

ELSIF p_type = 'NON_GDF_SUPPLIER' THEN

  print_out('<div class="Box">Supplier Data Validation '||
    '<a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''ngdfsupvals'')">&#9650;</a><br/>');
  print_out('<div id="ngdfsupvals" class="BoxContent">');

ELSIF p_type = 'GDF' THEN

  print_out('<div class="BoxGDF">Validations for Existing Generic Data Fixes (GDF)');
  print_out('<a style="font-size: 13px;" href="javascript:;" '||
    'onclick="HideShow(this,''gdfval'')">&#9650;</a><br/>');
  print_out('<div id="gdfval" class="BoxContent">');

ELSIF p_type = 'NON-GDF' THEN

  print_out('<div class="BoxGDF">Validations with No Generic Data Fix Available (NON-GDF) <a style="font-size: 13px;" href="javascript:;" onclick="HideShow(this,''nongdfval'')">&#9650;</a><br/>');
  print_out('<div id="nongdfval" class="BoxContent">');

ELSIF p_type = 'PAIDINVS' THEN

  print_out('<div class="BoxLight">Child Data Validation for '||
    'Invoices Paid by Check ID '||to_char(g_check_id)||'<br/>');
  print_out('<div class="BoxSmall">');

ELSIF p_type = 'PREPAYS' THEN

  print_out('<div class="BoxLight">Child Data Validation for '||
    'Prepayment Invoices For Invoice ID '||to_char(g_invoice_id)||'<br/>');
  print_out('<div class="BoxSmall">');

END IF;

END print_header;


PROCEDURE print_performance_info IS
BEGIN
  print_out('<br/><br/><br/>');
  print_out('<table><thead>Performance Data</thead><tbody>');
  print_out('<tr><th>Total Elapsed Time:</th><td>'||
    format_elapsed(stop_timer(g_process_start_time))||'</td></tr>');
  print_out('<tr><th>Total Query Time:</th><td>'||
    format_elapsed(g_query_total)||'</td></tr>');
  print_out('</tbody></table><br/><br/>');
END print_performance_info;


------------------------------------------------------------
-- Validate parameters and assign values to global variables
------------------------------------------------------------
PROCEDURE validate_parameters (
      p_invoice_id in NUMBER,
      p_check_id in NUMBER,
      p_vendor_id in NUMBER,
      p_start_date in DATE,
      p_end_date in DATE,
      p_org_ids in VARCHAR2,
      p_trx_type in VARCHAR2,
      p_validations in VARCHAR2,
      p_max_output_rows in NUMBER,
      p_print_to_stdout in VARCHAR2,
      p_debug_mode in VARCHAR2) IS

  l_dummy        NUMBER;
  l_org_list     VARCHAR2(500);
  l_org          VARCHAR2(10);
  l_org_num      NUMBER;
  l_step         VARCHAR2(30);
  l_ledger_id    NUMBER;
  l_ledger_name  GL_LEDGERS.NAME%TYPE;

  FUNCTION chk_dates (p_ledger_id IN NUMBER, p_start IN DATE, p_end IN DATE)
  RETURN boolean IS
    counter NUMBER := 0;
  BEGIN
    SELECT count(*) INTO counter
    FROM gl_period_statuses ps
    WHERE ps.ledger_id = p_ledger_id
    AND   ps.application_id = 200
    AND   nvl(p_start,ps.start_date) BETWEEN ps.start_date AND ps.end_date
    AND   ps.closing_status IN ('O','F');
    IF counter = 0 THEN
      return FALSE;
    END IF;

    SELECT count(*) INTO counter
    FROM gl_period_statuses ps
    WHERE ps.ledger_id = p_ledger_id
    AND   ps.application_id = 200
    AND   nvl(p_end,ps.end_date) BETWEEN ps.start_date AND ps.end_date
    AND   ps.closing_status IN ('O','F');
    IF counter = 0 THEN
      return FALSE;
    ELSE
      return TRUE;
    END IF;
    
  EXCEPTION WHEN OTHERS THEN
    print_log('Error in validate_parameters.chk_dates for ledger '||
      p_ledger_id||' and dates '||to_char(p_start,'DD-MON-YYYY')||
      ' to '||to_char(p_end,'DD-MON-YYYY')||': '||sqlerrm);
    raise app_exception;
  END chk_dates;

BEGIN
  debug('Entered validate parameters');
  g_validations     := upper(nvl(p_validations,'GDF'));
  g_max_output_rows := nvl(p_max_output_rows,10);
  g_print_to_stdout := upper(nvl(p_print_to_stdout,'N'));
  g_debug_mode      := upper(nvl(p_debug_mode,'N'));
  g_invoice_id      := p_invoice_id;
  g_check_id        := p_check_id;
  g_vendor_id       := p_vendor_id;

  IF (p_invoice_id is not null OR
      p_check_id is not null OR
      p_vendor_id is not null) THEN

    g_mode := 'SINGLE';
    g_start_date := null;
    g_end_date := null;
    g_trx_type := null;
    IF p_invoice_id is not null THEN
      BEGIN
        SELECT to_char(org_id) INTO l_org_list
        FROM   ap_invoices_all
        WHERE  invoice_id = p_invoice_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          print_log('Error: '||sqlerrm||' Invoice id ('||
            to_char(p_invoice_id)||') does not exist.  '||
            'Please provide a valid invoice id parameter value.');
          raise app_exception;
        WHEN OTHERS THEN
          print_log('Error: '||sqlerrm||' validating invoice id: '||
            to_char(p_invoice_id));
          raise app_exception;
      END;
    END IF;

    IF p_check_id is not null THEN
      BEGIN
        SELECT decode(l_org_list,
                 null,to_char(org_id),
                 to_char(org_id), l_org_list,
                 l_org_list||','||to_char(org_id))
        INTO   l_org_list
        FROM   ap_checks_all
        WHERE  check_id = p_check_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          BEGIN
            SELECT decode(l_org_list,
                 null,to_char(org_id),
                 to_char(org_id), l_org_list,
                 l_org_list||','||to_char(org_id))
            INTO   l_org_list
            FROM   ap_invoice_payments_all
            WHERE  check_id = p_check_id;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              print_log('Error: '||sqlerrm||' Check id ('||
                to_char(p_check_id)||') does not exist.  '||
                'Please provide a valid check id parameter value.');
              raise app_exception;
            WHEN OTHERS THEN
              raise;
          END;
        WHEN OTHERS THEN
          print_log('Error: '||sqlerrm||' validating check id: '||
            to_char(p_check_id));
          raise app_exception;
      END;
    END IF;
    l_org_list := nvl(l_org_list, 'SELECT org_id FROM ap_system_parameters_all');
    g_org_ids := l_org_list;

    IF p_vendor_id is not null THEN
      BEGIN
        SELECT 1 INTO l_dummy
        FROM   ap_suppliers
        WHERE  vendor_id = p_vendor_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          print_log('Error: '||sqlerrm||' Vendor id ('||
            to_char(p_vendor_id)||') does not exist.  '||
            'Please provide a valid vendor id parameter value.');
          raise app_exception;
        WHEN OTHERS THEN
          print_log('Error: '||sqlerrm||' validating vendor id: '||
            to_char(p_vendor_id));
          raise app_exception;
      END;
    END IF;

  ELSE
    debug('Using date range parameters');
    g_mode       := 'DATERANGE';
    g_start_date := p_start_date;
    g_end_date   := p_end_date;
    g_org_ids    := rtrim(ltrim(replace(p_org_ids,' ',''),','),',');
    g_validations := 'GDF'; -- per dev only GDF validations for date range.
    g_trx_type   := upper(nvl(p_trx_type,'ALL'));

  
    -- Date range not relevant if type is SUPPLIER
    -- Checks not relevent if we are only looking at SUPPLIER DATA
    IF nvl(g_trx_type,'ALL') = 'SUPPLIER' THEN
      g_start_date := null;
      g_end_date := null;
    ELSE
  -- Validate date range
      -- Not NULL
      IF (g_start_date is null OR g_end_date is null) THEN
        print_log('Error: When running for a date range both the range '||
          'start date and end date must be specified.');
        raise app_exception;
      END IF;
      --  Start <= End
      BEGIN
        SELECT 1 INTO l_dummy
        FROM DUAL
        WHERE g_start_date <= g_end_date;
      EXCEPTION WHEN NO_DATA_FOUND THEN
        print_log('Error: The date range start date ('||
          to_char(g_start_date,'DD-MON-YYYY HH24:MI:SS')||
          ') must be prior to the end date ('||
          to_char(g_end_date,'DD-MON-YYYY HH24:MI:SS')||')' );
        raise app_exception;
      WHEN OTHERS THEN
        print_log('Error: when validating the start date is prior to the end date '||
          'in validate_parameters: '||sqlerrm);
        raise app_exception;
      END;
    END IF;

    -- Validate org_ids
    IF g_org_ids is not null THEN
      BEGIN
        l_org_list := g_org_ids;
        WHILE length(l_org_list) > 0 LOOP
          IF l_org_list like '%,%' THEN
            l_org := substr(l_org_list,1,instr(l_org_list,',')-1);
            l_org_list := substr(l_org_list,instr(l_org_list,',')+1);
          ELSE
            l_org := l_org_list;
            l_org_list := '';
          END IF;
          l_org_num := to_number(l_org);
          SELECT set_of_books_id INTO l_ledger_id
          FROM   AP_SYSTEM_PARAMETERS_ALL
          WHERE  org_id = l_org_num;
          IF chk_dates(l_ledger_id, g_start_date, g_end_date) THEN
            IF l_org_num NOT MEMBER OF g_ous THEN
              g_ous.extend();
              g_ous(g_ous.last) := l_org_num;
            END IF;
          ELSE
            IF l_org_num NOT MEMBER OF g_skipped_ous THEN
              g_skipped_ous.extend();
              g_skipped_ous(g_skipped_ous.last) := l_org_num;
            END IF;
          END IF;
        END LOOP;
        -- Rebuild the org id list from the validated table
        g_org_ids := '';
        FOR i IN 1..g_ous.count LOOP
          g_org_ids := g_org_ids||to_char(g_ous(i))||',';
        END LOOP;
        g_org_ids := rtrim(g_org_ids,',');
        
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          print_log('Error in validating the operating unit list: '||g_org_ids);
          print_log('Invalid operating unit value supplied: '||to_char(l_org_num));
          print_log('Insure that the operating unit provided is valid and has Oracle '||
            'Payables implemented.');
          raise app_exception;
        WHEN OTHERS THEN
          print_log('Error in validating the operating unit list: '||g_org_ids);
          print_log('Please insure that this is a single org_id or a comma '||
            'separated list of org_ids.');
          print_log('Error on: '||l_org);
          raise;
      END;
      IF g_org_ids is null THEN -- No valid orgs to process due to dates
        IF p_org_ids is not null THEN
          print_log('Error in validating the operating unit list: '||p_org_ids);
        ELSE
          print_log('Error in validating the operating unit list');
        END IF;
        print_log('No operating unit included for which dates ('||
          to_char(g_start_date)||' and '||to_char(g_end_date)||')');
        print_log('fall in open periods.');
        g_org_ids := 'null';
        raise app_exception;
      END IF;
    ELSE
      g_org_ids :=
        'SELECT DISTINCT org_id '||
        'FROM ap_system_parameters_all sp '||
        'WHERE EXISTS ('||
           'SELECT 1 FROM gl_period_statuses ps '||
           'WHERE ps.ledger_id = sp.set_of_books_id '||
           'AND ps.application_id = 200 '||
           'AND to_date('''||to_char(g_start_date, 'DD-MON-YYYY')||''') BETWEEN '||
              'ps.start_date AND ps.end_date '||
           'AND ps.closing_status IN (''O'',''F'')) '||
        'AND EXISTS ('||
           'SELECT 1 FROM gl_period_statuses ps '||
           'WHERE ps.ledger_id = sp.set_of_books_id '||
           'AND ps.application_id = 200 '||
           'AND to_date('''||to_char(g_end_date, 'DD-MON-YYYY')||''') BETWEEN '||
              'ps.start_date AND ps.end_date '||
           'AND ps.closing_status IN (''O'',''F''))';

      SELECT DISTINCT sp.org_id BULK COLLECT INTO g_skipped_ous
      FROM  ap_system_parameters_all sp
      WHERE (NOT EXISTS (
               SELECT 1 FROM gl_period_statuses ps
               WHERE ps.ledger_id = sp.set_of_books_id
               AND ps.application_id = 200
               AND g_start_date BETWEEN ps.start_date AND ps.end_date
               AND ps.closing_status IN ('O','F')) OR
             NOT EXISTS (
               SELECT 1 FROM gl_period_statuses ps
               WHERE ps.ledger_id = sp.set_of_books_id
               AND ps.application_id = 200
               AND g_end_date BETWEEN ps.start_date AND ps.end_date
               AND ps.closing_status IN ('O','F')))
       ORDER by sp.org_id;
    END IF;
  
    -- If any OU's are skipped print a message to the log
    IF g_skipped_ous.count > 0 THEN
      debug('The following operating units were not processed because '||
        'the dates '||to_char(g_start_date,'DD-MON-YYYY')||' and '||
        to_char(g_end_date,'DD-MON-YYYY')||' do not fall into open periods '||
        'for the corresponding ledger:');
      FOR i in 1..g_skipped_ous.count LOOP
        print_log('     '||to_char(g_skipped_ous(i)));
      END LOOP;
    END IF;
  
      -- Validate the type
    IF g_trx_type NOT IN ('ALL','INVOICE','PAYMENT','SUPPLIER') THEN
      print_log('Invalid value provided for parameter p_type: '||g_trx_type);
      print_log('Valid values are ALL, INVOICE, PAYMENT, or SUPPLIER');
      raise app_exception;
    END IF;

    -- Validate include non-gdf parameter
    IF g_validations NOT IN ('ALL','GDF','NON-GDF') THEN
      print_log('Invalid value provided for parameter p_validations: '||
        g_validations);
      print_log('Valid values are ALL, GDF, or NON-GDF');
      raise app_exception;
    END IF;

    -- Validate print to stdout parameter
    IF g_print_to_stdout NOT IN ('Y','N') THEN
      print_log('Invalid value provided for parameter p_print_to_stdout: '||
        g_print_to_stdout);
      print_log('Valid values are Y and N. Using default value: N');
      g_print_to_stdout := 'N';
    END IF;

    -- Validate debug mode  parameter
    IF g_debug_mode NOT IN ('Y','N') THEN
      print_log('Invalid value provided for parameter p_debug_mode: '||
        g_debug_mode);
      print_log('Valid values are Y and N. Using default value: N');
      g_debug_mode := 'N';
    END IF;

  END IF;
  -- Now mode and transactions are determined write DX summary header
  write_dx('<!-- ######BEGIN MGD DX SUMMARY######');
  write_dx('<issues>');
  write_dx(' <mode>'||g_mode||'</mode>');

  debug('g_mode:            '||g_mode);
  debug('g_invoice_id:      '||to_char(g_invoice_id));
  debug('g_check_id:        '||to_char(g_check_id));
  debug('g_vendor_id:       '||to_char(g_vendor_id));
  debug('g_start_date:      '||to_char(g_start_date,'DD-MON-YYYY'));
  debug('g_end_date:        '||to_char(g_end_date,'DD-MON-YYYY'));
  debug('g_org_ids:         '||g_org_ids);
  debug('g_trx_type:        '||g_trx_type);
  debug('g_validations:     '||g_validations);
  debug('g_max_output_rows: '||to_char(g_max_output_rows));
  debug('g_print_to_stdout: '||g_print_to_stdout);
  debug('g_debug_mode:      '||g_debug_mode);
  debug('Leaving validate parameters');
EXCEPTION WHEN OTHERS THEN
  print_log('Error in validate parameters: '||sqlerrm);
  raise;
END validate_parameters;


--------------------------------------------
-- Prepare the SQL with the parameter values
--------------------------------------------
FUNCTION prepare_sql(
  p_signature_sql IN VARCHAR2,
  p_invoice_id IN NUMBER) RETURN VARCHAR2 IS

  l_sql VARCHAR2(20000);

BEGIN
  -- Assign signature to working variable
  l_sql := P_SIGNATURE_SQL;
  --  Build the appropriate SQL replacing all applicable values
  --  with the appropriate parameters
  IF g_mode = 'DATERANGE' THEN
    l_sql := replace(l_sql,'##$$IVIEW$$##',
               'SELECT /*+ qb_name(iview) */ DISTINCT d.invoice_id '||
               'FROM ap_invoice_distributions_all d '||
               'WHERE d.org_id in ('||g_org_ids||') '||
               'AND   d.accounting_date BETWEEN '||
               '        to_date('''||to_char(g_start_date,'DD-MON-YYYY')||''') AND '||
               '        to_date('''||to_char(g_end_date,'DD-MON-YYYY')||''')');
    l_sql := replace(l_sql,'##$$MIVIEW$$##',
               'SELECT /*+ materialize */ DISTINCT d.invoice_id '||
               'FROM ap_invoice_distributions_all d '||
               'WHERE d.org_id in ('||g_org_ids||') '||
               'AND   d.accounting_date BETWEEN '||
               '        to_date('''||to_char(g_start_date,'DD-MON-YYYY')||''') AND '||
               '        to_date('''||to_char(g_end_date,'DD-MON-YYYY')||''')');
     l_sql := replace(l_sql, '##$$CVIEW$$##',
               'SELECT /*+ qb_name(cview) */ DISTINCT ph.check_id '||
               'FROM ap_payment_history_all ph '||
               'WHERE ph.org_id in ('||g_org_ids||') '||
               'AND   ph.accounting_date BETWEEN '||
               '        to_date('''||to_char(g_start_date,'DD-MON-YYYY')||''') AND '||
               '        to_date('''||to_char(g_end_date,'DD-MON-YYYY')||''')');
     l_sql := replace(l_sql, '##$$MCVIEW$$##',
               'SELECT /*+ materialize */ DISTINCT ph.check_id '||
               'FROM ap_payment_history_all ph '||
               'WHERE ph.org_id in ('||g_org_ids||') '||
               'AND   ph.accounting_date BETWEEN '||
               '        to_date('''||to_char(g_start_date,'DD-MON-YYYY')||''') AND '||
               '        to_date('''||to_char(g_end_date,'DD-MON-YYYY')||''')');
  ELSE
    l_sql := replace(l_sql,'##$$IVIEW$$##',
               'SELECT /*+ qb_name(iview) */ '||to_char(p_invoice_id) ||
               ' invoice_id FROM dual');
    l_sql := replace(l_sql,'##$$MIVIEW$$##',
               'SELECT /*+ materialize */ '||to_char(p_invoice_id) ||
               ' invoice_id FROM dual');
    l_sql := replace(l_sql, '##$$CVIEW$$##',
               'SELECT /*+ qb_name(cview) */ '||to_char(g_check_id)||
               ' check_id FROM dual');
    l_sql := replace(l_sql, '##$$MCVIEW$$##',
               'SELECT /*+ materialize */ '||to_char(g_check_id)||
               ' check_id FROM dual');
  END IF;

  l_sql := replace(l_sql,'##$$INV$$##', nvl(to_char(p_invoice_id),'null'));
  l_sql := replace(l_sql,'##$$PMT$$##', nvl(to_char(g_check_id),'null'));
  l_sql := replace(l_sql,'##$$VND$$##', nvl(to_char(g_vendor_id),'null'));
  l_sql := replace(l_sql,'##$$SDT$$##', to_char(g_start_date,'DD-MON-YYYY'));
  l_sql := replace(l_sql,'##$$EDT$$##', to_char(g_end_date,'DD-MON-YYYY'));
  l_sql := replace(l_sql,'##$$ORGS$$##', g_org_ids);
  RETURN l_sql;
END prepare_sql;

----------------------------------------------------------------------
-- Runs a single Signature SQL using DBMS_SQL and prints a report
----------------------------------------------------------------------
FUNCTION  run_signature(
  p_signature in SIGNATURE_REC,
  p_invoice_id in NUMBER default NULL) RETURN BOOLEAN IS

  l_sql            VARCHAR2(32767);
  l_fix            VARCHAR2(2000) := null;
  l_note_url       VARCHAR2(200) := null;
  l_sig_title      VARCHAR2(1500);
  c                INTEGER;
  l_rows_fetched   NUMBER;
  l_step           VARCHAR2(20);
  l_row_cols       COL_LIST_TBL := col_list_tbl();
  l_col_headings   HEADINGS_TBL := headings_tbl();
  l_col_cnt        INTEGER;
  l_desc_rec_tbl   DBMS_SQL.DESC_TAB2;
  l_item_span      VARCHAR2(100);
  

BEGIN
  -- Massage the fix text
  l_step := '10';
  l_fix := p_signature.fix_text;
  IF p_signature.note_number is not null THEN
    l_step := '10.1';
    l_note_url := note_link(p_signature.note_number);
    IF l_fix is null THEN
      l_step := '10.1.1';
      l_fix := 'Please follow the '||
        'instructions provided in ['||p_signature.note_number||']';
    END IF;
  END IF;

  l_step := '20';
  IF l_fix is not null THEN
    l_step := '20.1';
    l_fix := expand_links('<strong>SOLUTION:</strong> '||l_fix);
    IF (regexp_like(l_fix, '[^a-z]APLIST', 'i') AND
       NOT (upper(l_fix) like '%SUPPORT.ORACLE.COM%')) THEN
      l_step := '20.1.3';
      l_fix := regexp_replace(l_fix, '([^a-z])APLIST',
        '\1'||note_link('1231565.1','APList'),1,1,'i');
    END IF;
  END IF;


  -- Prepare the Signature SQL
  l_step := '40';
  l_sql := prepare_sql(
             p_signature.signature_sql,
             nvl(p_invoice_id,g_invoice_id));

  -- Open cursor and parse signature
  l_step := '40.1';
  c := dbms_sql.open_cursor;

  l_step := '40.2';
  DBMS_SQL.PARSE(c, l_sql, DBMS_SQL.NATIVE);

  -- Get column count and descriptions
  l_step := '40.3';
  DBMS_SQL.DESCRIBE_COLUMNS2(c, l_col_cnt, l_desc_rec_tbl);

  -- Register arrays to bulk collect results and set headings
  l_step := '40.4';
  FOR i IN 1..l_col_cnt LOOP
    l_step := '40.4.'||to_char(i);
    l_col_headings.extend();
    l_col_headings(i) := initcap(replace(l_desc_rec_tbl(i).col_name,'|','<br>'));
    l_row_cols.extend();
    dbms_sql.define_array(c, i, l_row_cols(i), g_max_output_rows, 1);
  END LOOP;

  -- Execute and Fetch
  l_step := '40.5';

  start_timer(g_query_start_time);
  l_rows_fetched := DBMS_SQL.EXECUTE_AND_FETCH(c);
  debug('Script ('||to_char(p_signature.sig_id)
    ||'): '||p_signature.script_name);
  debug(' Rows fetched: '||to_char(l_rows_fetched));
  l_step := '40.6';
  IF l_rows_fetched > 0 THEN
    FOR i in 1..l_col_cnt LOOP
      l_step := '40.6.'||to_char(i);
      DBMS_SQL.COLUMN_VALUE(c, i, l_row_cols(i));
    END LOOP;
  END IF;
  g_query_elapsed := stop_timer(g_query_start_time);
  g_query_total := g_query_total + g_query_elapsed;

  -- Close cursor
  l_step := '40.7';
  IF dbms_sql.is_open(c) THEN
    dbms_sql.close_cursor(c);
  END IF;

  -- Print results....
  l_step := '50';
  IF l_rows_fetched > 0 THEN

    -- Write signature details to MGD DX summary
    write_dx('    <signature id="'||to_char(p_signature.sig_id)||'">');
    write_dx('     <category>'||p_signature.category||'</category>');
    write_dx('     <sub_category>'||p_signature.sub_category||
        '</sub_category>');
    write_dx('     <note>'||p_signature.note_number||'</note>');
    write_dx('     <bug>'||p_signature.bug_number||'</bug>');
    write_dx('     <gdf_flag>'||p_signature.gdf_flag||'</gdf_flag>');
    write_dx('     <undo>'||p_signature.undoes_accounting||'</undo>');
    write_dx('     <problem>'||p_signature.problem_text||'</problem>');
    write_dx('     <solution><![CDATA['||p_signature.fix_text||']]></solution>');

    -- Write to analyzer style DX summary
    gen_anlz_dx(p_sig_id => to_char(p_signature.sig_id),
      p_sig => p_signature,
      p_col_rows => l_row_cols,
      p_col_headings => l_col_headings);

    -- Create signature title
    l_step := '50.1';
    l_sig_title := '<hr class="hr1"><span class="sigtitle">
      <strong>Results for Signature ID '||
      to_char(p_signature.sig_id)||': </strong>'||p_signature.problem_text;
    IF p_invoice_id is not null THEN
      l_step := '50.1.1';
      l_sig_title := '<strong>Invoice ID: </strong>'||to_char(p_invoice_id)||
        '<br/> '||l_sig_title;
    END IF;
    IF p_signature.impact_areas.count > 0 THEN
      l_sig_title := l_sig_title||'<br/><strong>Impact Area(s): </strong>';
      FOR i IN 1..p_signature.impact_areas.count LOOP

        -- Write impact to DX summary
        write_dx('     <impact>'||p_signature.impact_areas(i)||'</impact>');

        -- Check if the item is in the global impact counts table and either 
        -- add it or add to its count.
        IF (g_impacts_tbl.exists(p_signature.impact_areas(i))) THEN
           g_impacts_tbl(p_signature.impact_areas(i)) :=
             g_impacts_tbl(p_signature.impact_areas(i)) + 1;
        ELSE
           g_impacts_tbl(p_signature.impact_areas(i)) := 1;
        END IF;
        l_item_span := '<span id="'||p_signature.impact_areas(i)||'_'||
          g_impacts_tbl(p_signature.impact_areas(i))||'">';
  
        l_sig_title := l_sig_title|| l_item_span ||
           p_signature.impact_areas(i) ||'</span>';
        IF i < p_signature.impact_areas.count THEN
          l_sig_title := l_sig_title||', ';
        END IF; 
      END LOOP;
    END IF;
    -- Close DX summary signature
    write_dx('    </signature>');

    l_sig_title := l_sig_title||'</span><hr class="hr1">';
    IF p_signature.bug_number is not null THEN
        l_step := '50.1.2';
        IF g_gdf THEN
          l_sig_title := l_sig_title||'<strong>Solution GDF: </strong>'||
            p_signature.bug_number||', ';
        ELSE
          l_sig_title := l_sig_title||'<strong>Bug Number: </strong>'||
            p_signature.bug_number||', ';
        END IF;
    END IF;
    IF p_signature.note_number is not null THEN
      l_step := '50.1.3';
      l_sig_title := l_sig_title||'<strong>Note: </strong>'||l_note_url;
    END IF;
    IF p_signature.script_name is not null THEN
      l_step := '50.1.4';
      l_sig_title := l_sig_title||'<br/><strong>Script Name: </strong>'||
        p_signature.script_name||'<br/> ';
    END IF;

    print_out('<div class="BoxSmall">');
    print_out(l_sig_title);

    IF l_rows_fetched < g_max_output_rows THEN
      l_step := '50.2';
      print_out('<strong>Occurence: </strong>A total of '||l_rows_fetched||
        ' instances of this problem were found.');
    ELSE
      l_step := '50.3';
      print_out('<strong>Occurence: </strong>Multiple instances of this '||
        'problem were found.');
      print_out('  Displaying only the first '||to_char(g_max_output_rows));
    END IF;
    print_out('.<span class="italsmall"> Elapsed: '||
      format_elapsed(g_query_elapsed)||'</span>');
    print_out('<br/><br/>');

    print_out('<div class="BoxFix">');
    print_out(l_fix);
    print_out('</div><br/>');

    IF p_signature.undoes_accounting = 'Y' THEN
      print_out('<div class="BoxUndo"><strong>IMPORTANT:</strong> 
        This fix will undo accounting.<br/><br/>');
        IF NOT g_undo_applied THEN
          print_out('<strong>You should apply the consolidated UNDO Accounting
            Patch 14082924 before applying the GDF patch for this issue.</strong>
            Without this patch undo accounting failures may not be reported
            and the GDF may appear to fail to fix the data when an undo
            error has occurred.<br><br/>');
        END IF;
        print_out('<strong>NOTE:</strong>For transactions posted in <strong>
          closed periods</strong> the reversing and corrected events 
          will be accounted <strong>in the current open period.</strong><br/>');
        print_out('For a deeper understanding of the undo
          accounting process please refer to note '||note_link('753695.1')||
          '</div><br/>');
    END IF;


    print_out('<div class="trxnlist">');

    print_out('<table>');
    -- Print Headings
    l_step := '50.4';
    print_out('<tr>');
    FOR i IN 1..l_col_headings.count LOOP
      print_out('<th id='||to_char(i)||'>'||nvl(l_col_headings(i),'&nbsp;')||'</th>');
    END LOOP;
    print_out('</tr>');

    l_step := '50.5';
    FOR i IN 1..least(l_rows_fetched, g_max_output_rows) LOOP
      print_out('<tr>');
      FOR j IN 1..l_col_cnt LOOP
        print_out('<td>'||l_row_cols(j)(i)||'</td>');
      END LOOP;
      print_out('</tr>');
    END LOOP;

    l_step := '50.6';

    -- Added for displaying SQL query
    print_out('<tr><td colspan="'||to_char(l_col_cnt)||'">'||
      '<input type="button" class="button" value="Show SQL" onclick="displaySQL(this, '||
      p_signature.sig_id||p_invoice_id||')"/></td></tr>'||
      '<tr><td style="display:none" colspan="'||to_char(l_col_cnt)||'" '||
      'id="sig'||p_signature.sig_id||p_invoice_id||'">'||
      '<pre><p align="left">     '||l_sql||'
      </pre></td></tr>');

    print_out('</table></div></div><br/>');

  END IF;
  return l_rows_fetched > 0;
EXCEPTION
  WHEN OTHERS THEN
    IF substr(l_step,1,2) = '50' THEN
      print_out('</table><br/><br/>');
      IF p_invoice_id is not null THEN
        print_out('</div>');
      END IF;
    END IF;
    print_log('ERROR: Failed to execute Signature: '||
      'ID = '||to_char(p_signature.sig_id)||
      ', BUG = '||p_signature.bug_number||
      ', NOTE = '||p_signature.note_number||
      ', SCRIPT = '||p_signature.script_name);
    print_log('SQL = '||l_sql);
    print_log('MODE = '||g_mode||', INVOICE_ID = '||nvl(p_invoice_id,g_invoice_id)||
      ', CHECK_ID = '|| g_check_id||', START_DATE = '|| g_start_date||
      ' , END_DATE = '||g_end_date||', Step = '||l_step||
      ', sqlerrm = '||sqlerrm);
    print_error('ERROR: Failed to execute Signature (ID = '||
      to_char(p_signature.sig_id)||').  See the log file for full details.');
    IF dbms_sql.is_open(c) THEN
      dbms_sql.close_cursor(c);
    END IF;
    RETURN l_rows_fetched > 0;
END run_signature;


-------------------------------------------
-- Main procedure for processing signatures
-------------------------------------------
PROCEDURE detect (p_type in VARCHAR2, p_gdf in VARCHAR2) IS

  CURSOR get_prepayments(c_inv_id NUMBER) IS
  SELECT DISTINCT ail.prepay_invoice_id
  FROM ap_invoice_lines_all ail
  WHERE ail.prepay_invoice_id IS NOT NULL
  AND   ail.invoice_id = c_inv_id;

  CURSOR get_paid_invoices(c_chk_id NUMBER) IS
  SELECT DISTINCT aip.invoice_id
  FROM ap_invoice_payments_all aip
  WHERE aip.check_id = c_chk_id;

  issues_found           BOOLEAN := false;
  secondary_issues_found BOOLEAN := false;
  l_step                 VARCHAR2(20);

BEGIN


  -- Run signatures
  l_step := '20';
  FOR i in g_signatures.first .. g_signatures.last LOOP
    IF (g_signatures(i).gdf_flag = p_gdf AND
        g_signatures(i).category = p_type) THEN
      l_step := '20.'||to_char(i);
      IF ( run_signature(g_signatures(i)) ) THEN
        issues_found := true;
      END IF;
    END IF;
  END LOOP;

  -- If in single trx mode, run invoice checks for the paid invoices or 
  -- prepayments related to the primary transaction

  l_step := '20';
  IF (p_type = 'PAYMENT' AND g_check_id is not null) THEN
    debug('Processing invoice signatures on paid invoices');
    l_step := '20.1';
    print_header('PAIDINVS');
    FOR rec IN get_paid_invoices(g_check_id) LOOP
      l_step := '20.1.1';
      write_dx('   <related_inv id="'||rec.invoice_id||'">');
      FOR i in g_signatures.first .. g_signatures.last LOOP
        l_step := '20.1.1.'||to_char(i);
        IF g_signatures(i).gdf_flag = p_gdf AND
           g_signatures(i).category = 'INVOICE' THEN
          IF ( run_signature(g_signatures(i),rec.invoice_id)) THEN
            secondary_issues_found := true;
            issues_found := true;
          END IF;
        END IF;
      END LOOP;
      write_dx('   </related_inv>');
    END LOOP;
    IF (NOT secondary_issues_found) THEN
      l_step := '20.1.2';
      print_out('<div class="BoxOk">No related data issues found</div><br/>');
    END IF;
    print_out('</div></div>'); --End internal sections from header
  ELSIF (p_type = 'INVOICE' AND g_invoice_id is not null) THEN
    debug('Processing invoice signatures on prepay invoices');
    l_step := '20.2';
    print_header('PREPAYS');
    FOR rec IN get_prepayments(g_invoice_id) LOOP
      l_step := '20.2.1';
      write_dx('   <related_inv id="'||rec.prepay_invoice_id||'">');
      FOR i in g_signatures.first .. g_signatures.last LOOP
        l_step := '20.2.1.'||to_char(i);
        IF g_signatures(i).gdf_flag = p_gdf AND
           g_signatures(i).category = 'INVOICE' THEN
          IF ( run_signature(g_signatures(i),rec.prepay_invoice_id)) THEN
            secondary_issues_found := true;
            issues_found := true;
          END IF;
        END IF;
      END LOOP;
      write_dx('   </related_inv>');
    END LOOP;
    IF (NOT secondary_issues_found) THEN
      l_step := '20.2.2';
      print_out('<div class="BoxOk">No related data issues found</div><br/>');
    END IF;
    print_out('</div></div>'); --End internal sections from header
  END IF;

  -- IF running in a conc_id send notification in case issues found
  l_step := '30';
  IF issues_found THEN
    g_retcode := 1;
    IF g_errbuf is null THEN
      g_errbuf := 'Issues found in validations for '||p_type;
    ELSE
      g_errbuf := g_errbuf||', '||p_type;
    END IF;
    print_log('Issues detected. Review output.');
  ELSE
    print_out('<div class="BoxOk">No related data issues found</div><br/>');
  END IF;
  print_out('</div></div>'); -- End Main Header
EXCEPTION WHEN OTHERS THEN
  print_log('Error occured in detect (step: '||l_step||') '||sqlerrm);
  raise;
END detect;




/********************************************************************************
    The following load signatures into memory tables these are called
    in validate_parameters based on the parameters passed in.

    Modified so that all signatures are loaded into g_signatures and the 
    category and gdf_flag included on the signature determines which are run
    rather than having separate tables of signatures.

    To add a signature, go to the bottom of the appropriate
    load procedure section and call:

    add_signature(
        <signature_table>,  -- g_signatures
        '<CATEGORY>',
        '<SUB_CATEGORY>',
        '<BUG_NUMBER>',
        '<NOTE_NUMBER>',
        '<SCRIPT_NAME>',
        '<PROBLEM_TEXT>',
        '<FIX_TEXT>',
        '<GDF_FLAG (Y/N)>',
        '<UNDOES_ACCTG (Y/N)>',
        '<IMPACT_AREAS TBL OF IMPACT AREAS>',
        '<SIGNATURE SQL Text>');

    If the query is invoice, payment or supplier related it should have a
    condition of the form below where table.column contains the invoice
    or check id of the transaction:

   AND   table.invoice_id = nvl(##$$INV$$##, table.invoice_id)
    or
   AND   table.check_id = nvl(##$$PMT$$##, table.check_id)
    or
   AND   table.vendor_id = nvl(##$$VND$$##, table.vendor_id)

    Each payment or invoice signature SQL should also contain the
    following condition on the driving transaction table:

   AND   table.org_id in (##$$ORGS$$##)

    Each payment or invoice signature should also contain the following date 
    conditions, where table is the driving transaction table:

      For invoice related signatures:
   AND   EXISTS (
           SELECT 1 FROM ap_invoice_distributions_all dates
           WHERE dates.invoice_id = table.invoice_id
           AND   dates.accounting_date BETWEEN
                   nvl(to_date(''##$$SDT$$##''), dates.accounting_date) AND
                   nvl(to_date(''##$$EDT$$##''), dates.accounting_date))

      For payment related signatures:
   AND   EXISTS (
           SELECT 1 FROM ap_payment_history_all dates
           WHERE dates.check_id = table.check_id
           AND   dates.accounting_date BETWEEN
                   nvl(to_date(''##$$SDT$$##''), dates.accounting_date) AND
                   nvl(to_date(''##$$EDT$$##''), dates.accounting_date))

For performance reasons using the above to limit by transaction or org
and date range has generally been replaced by including a dynamically 
created view to limit the invoice or check transactions. The view will either return
a single transaction id, or all transactions associated with the date range
and operating unit parameters. 

To do this include the following in the FROM clause

Invoices:

  (
    ##$$IVIEW$$##
  )  invs

Payments: 
  (
    ##$$CVIEW$$##
  )  chks

And then include a link to this view from the driving table:
   AND table.invoice_id = invs.invoice_id
OR 
   AND table.check_id = chks.check_id

********************************************************************************/


-- START LOAD PROCEDURES --
------------------------------------------------------------------------------
-- POPULATE SIGNATURES
------------------------------------------------------------------------------
PROCEDURE load_signatures IS
BEGIN
  add_signature(g_signatures,
    280,
    'GENERAL',
    'ACCOUNTING',
    '',
    '601318.1',
    'sh_invalid_aad.sql',
    'Invalid Application Accounting Definitions (AAD) exist for the indicated ledgers.  A valid Payables AAD is required to create Payables accounting for a ledger.',
    'Run the Validate Application Accounting definition program to validate the AAD.  Review the report output and investigate/resolve any invalids.  See [601318.1] for details on running and investigating/resolving invalid AAD errors.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close'),
    'SELECT l.name ledger_name,
            l.ledger_id,
            o.owner,
            o.object_name,
            o.object_id,
            o.status,
            o.last_ddl_time,
            o.timestamp,
            am.accounting_method_code,
            am.name accounting_method_name,
            am.enabled_flag accounting_method_enabled,
            pr.product_rule_code aad,
            pr.name aad_name,
            pr.enabled_flag aad_enabled_flag,
            pr.compile_status_code aad_compile_status,
            pr.product_rule_type_code,
            pr.product_rule_hash_id
     FROM ap_system_parameters_all sp,
          gl_ledgers l,
          xla_acctg_methods_vl am,
          xla_acctg_method_rules aad,
          xla_product_rules_vl pr,
          dba_objects o
     WHERE sp.org_id IN (##$$ORGS$$##)
     AND   o.owner = ''APPS''
     AND   o.object_type = ''PACKAGE BODY''
     AND   o.object_name like ''XLA_00200_AAD%''||pr.product_rule_hash_id||''%PKG''
     AND   o.status = ''INVALID''
     AND   l.ledger_id = sp.set_of_books_id
     AND   am.accounting_method_type_code = l.sla_accounting_method_type
     AND   am.accounting_method_code = l.sla_accounting_method_code
     AND   aad.application_id = 200
     AND   aad.accounting_method_code = am.accounting_method_code
     AND   aad.accounting_method_type_code = am.accounting_method_type_code
     AND   pr.application_id = aad.application_id
     AND   pr.amb_context_code = aad.amb_context_code
     AND   pr.product_rule_type_code = aad.product_rule_type_code
     AND   pr.product_rule_code = aad.product_rule_code
     ORDER BY l.ledger_id'
  );


  add_signature(g_signatures,
    245,
    'GENERAL',
    '',
    '21497508',
    '1543361.1',
    'ap_one_off_scripts_sel.sql General Matching',
    'Unmatched Purchase Orders with invoice related quantities and amounts.',
    'Apply the GDF patch following the instructions provided in [1543361.1]',
    'Y',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT /*+ parallel(pod,8) */
            ''MAT1.1'' category,
            pod.po_header_id,
            pod.po_line_id,
            pod.line_location_id,
            pod.po_distribution_id,
            pod.quantity_billed,
            pod.amount_billed,
            pod.quantity_financed,
            pod.amount_financed,
            pod.quantity_recouped,
            pod.amount_recouped,
            null rcv_transaction_id
     FROM po_distributions_all pod
     WHERE NOT EXISTS (
             SELECT 1
             FROM ap_invoice_distributions_all aid,
                  ap_invoices_all ai
             WHERE aid.po_distribution_id = pod.po_distribution_id
             AND   aid.line_type_lookup_code IN (''ITEM'', ''ACCRUAL'')
             AND   ai.invoice_id = aid.invoice_id
             AND   ai.invoice_type_lookup_code <> ''PREPAYMENT'')
     AND   (nvl(pod.quantity_billed,0) <> 0 OR
            nvl(pod.amount_billed,0) <> 0 )
     UNION
     SELECT /*+ parallel(pod,8) */
            ''MAT1.2'',
            pod.po_header_id,
            pod.po_line_id,
            pod.line_location_id,
            pod.po_distribution_id,
            pod.quantity_billed,
            pod.amount_billed,
            pod.quantity_financed,
            pod.amount_financed,
            pod.quantity_recouped,
            pod.amount_recouped,
            null
     FROM po_distributions_all pod
     WHERE NOT EXISTS (
             SELECT 1
             FROM ap_invoice_distributions_all aid,
                  ap_invoices_all ai
             WHERE aid.po_distribution_id = pod.po_distribution_id
             AND   aid.line_type_lookup_code IN (''ITEM'', ''ACCRUAL'')
             AND   ai.invoice_id = aid.invoice_id
             AND   ai.invoice_type_lookup_code = ''PREPAYMENT'')
     AND   (nvl(pod.quantity_financed,0) <> 0 OR
            nvl(pod.amount_financed,0) <> 0)
     UNION
     SELECT /*+ parallel(pod,8) */
            ''MAT1.3'',
            pod.po_header_id,
            pod.po_line_id,
            pod.line_location_id,
            pod.po_distribution_id,
            pod.quantity_billed,
            pod.amount_billed,
            pod.quantity_financed,
            pod.amount_financed,
            pod.quantity_recouped,
            pod.amount_recouped,
            null
    FROM po_distributions_all pod
    WHERE NOT EXISTS (
            SELECT 1
            FROM ap_invoice_distributions_all aid,
                 ap_invoices_all ai
            WHERE aid.po_distribution_id = pod.po_distribution_id
            AND   aid.line_type_lookup_code IN (''PREPAY'')
            AND   ai.invoice_id = aid.invoice_id
            AND   ai.invoice_type_lookup_code <> ''PREPAYMENT'')
     AND   (nvl(pod.quantity_recouped,0) <> 0 OR
            nvl(pod.amount_recouped,0) <> 0)
     UNION
     SELECT /*+ parallel(rt,8) */
            ''MAT5'',
            rt.po_header_id,
            rt.po_line_id,
            rt.po_line_location_id,
            rt.po_distribution_id,
            rt.quantity_billed,
            rt.amount_billed,
            null,
            null,
            null,
            null,
            rt.transaction_id
     FROM rcv_transactions rt
     WHERE NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.rcv_transaction_id = rt.transaction_id)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_lines_all ail
             WHERE ail.rcv_transaction_id = rt.transaction_id)
     AND   (nvl(rt.quantity_billed,0) <> 0 OR
            nvl(rt.amount_billed,0) <> 0)'
  );


  add_signature(g_signatures,
    74,
    'GENERAL',
    'ACCOUNTING',
    '18997204',
    '1144544.1',
    'ap_SysParamsNull_sel.sql',
    'NULL values in required columns of AP_System_Parameters',
    'Apply the GDF patch following the instructions provided in [1144544.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT org_id,
            set_of_books_id,
            accounting_method_option,
            rate_var_gain_ccid,
            rate_var_loss_ccid,
            recon_accounting_flag,
            when_to_account_pmt,
            when_to_account_gain_loss,
            rate_var_gain_ccid,
            rate_var_loss_ccid,
            recon_accounting_flag,
            when_to_account_pmt,
            when_to_account_gain_loss
     FROM ap_system_parameters_all asp
     WHERE (nvl(asp.rate_var_gain_ccid, -1) = -1 OR
            nvl(asp.rate_var_loss_ccid, -1) = -1 OR
            asp.recon_accounting_flag is null OR
            asp.when_to_account_pmt is null OR
            asp.when_to_account_gain_loss is null)
     AND   asp.org_id in (##$$ORGS$$##)'
  );


  add_signature(g_signatures,
    229,
    'GENERAL',
    'ACCOUNTING',
    '9793701',
    '1348372.1',
    'xla_man_sel.sql',
    'Manual events which remain in an unprocessed status even though they have been finally accounted',
    'Apply the GDF patch following the instructions provided in [1348372.1]',
    'Y',
    'N',
    impact_area_tbl('Period Close'),
    'SELECT  xe.event_type_code,
             xe.event_id,
             xe.entity_id,
             xe.event_status_code,
             xe.process_status_code,
             xe.event_number,
             xe.event_date,
             xe.transaction_date,
             xe.upg_batch_id,
             xe.on_hold_flag,
             xe.budgetary_control_flag
     FROM xla_events xe
     WHERE xe.application_id = 200
     AND   xe.event_type_code = ''MANUAL''
     AND   xe.event_status_code = ''U''
     AND   xe.process_status_code <> ''P''
     AND   EXISTS (
             SELECT 1
             FROM xla_ae_headers xah
             WHERE xah.application_id = xe.application_id
             AND   xah.accounting_entry_status_code = ''F''
             AND   xah.event_type_code = xe.event_type_code
             AND   xah.event_id = xe.event_id
             AND   xah.accounting_entry_type_code = ''MANUAL'')
     AND   xe.event_date BETWEEN
             nvl(to_date(''##$$SDT$$##''), xe.event_date) AND
             nvl(to_date(''##$$EDT$$##''), xe.event_date)'
  );


  add_signature(g_signatures,
    148,
    'INVOICE',
    '',
    '',
    '',
    'ap_orphan_zx_lines_sel.sql',
    'Orphan tax lines linked to missing invoice lines',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ leading(invs) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            tax.tax_line_id,
            tax.trx_id,
            tax.trx_number,
            tax.trx_line_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          zx_lines tax
     WHERE tax.application_id = 200
     AND   ai.invoice_id = tax.trx_id
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = tax.trx_id
             AND   ail.line_number = tax.trx_line_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    149,
    'INVOICE',
    '',
    '',
    '',
    'discard_non_tax_line_wrong_rev_sel.sql',
    'Discarded invoice lines on non-paid, non-canceled invoices which have no posted or tax distributions but with non-zero amounts or un-reversed distributions',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ail.invoice_id,
            ail.org_id,
            ail.line_number
     FROM ap_invoice_lines_all ail,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE discarded_flag = ''Y''
     AND   EXISTS (
             SELECT 1 FROM ap_invoices_all ai
             WHERE ai.invoice_id = ail.invoice_id
             AND   ai.cancelled_date is  null)
     AND   ((nvl(ail.amount,0) <> 0 OR nvl(ail.base_amount,0) <> 0) OR
            EXISTS (
              SELECT 1 FROM ap_invoice_distributions_all  aid
              WHERE ail.invoice_id = aid.invoice_id
              AND   ail.line_number = aid.invoice_line_number
              AND   aid.parent_reversal_id is null
              AND   NOT EXISTS (
                      SELECT 1 FROM ap_invoice_distributions_all  aid1
                      WHERE aid1.invoice_id = aid.invoice_id
                      AND   aid1.invoice_line_number = aid.invoice_line_number
                      AND   aid1.parent_reversal_id = aid.invoice_distribution_id)))
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all  aid
             WHERE ail.invoice_id = aid.invoice_id
             AND   ail.line_number=aid.invoice_line_number
             AND   aid.posted_flag = ''Y'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE ail.invoice_id = aid.invoice_id
             AND   ail.line_number=aid.invoice_line_number
             AND   aid.line_type_lookup_code like  ''%TAX%'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip
             WHERE ail.invoice_id = aip.invoice_id )
     AND   ail.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    150,
    'INVOICE',
    '',
    '',
    '',
    'ap_po_price_adj_flg_sel.sql',
    'Invoice distributions linked to PO distributions which are flagged as ''Selected'' for price adjustment',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT aid.invoice_id,
            aid.org_id,
            po.po_header_id,
            po.po_line_id,
            po.line_location_id,
            po.po_distribution_id
     FROM po_distributions_all po,
          ap_invoice_distributions_all aid,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE po.invoice_adjustment_flag = ''S''
     AND   po.po_distribution_id = aid.po_distribution_id
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    153,
    'INVOICE',
    '',
    '10279750',
    '',
    'del_holds_on_can_inv_sel.sql',
    'Canceled invoices which still have line or distribution variance holds',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Invoice Holds'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_amount,
            ai.payment_status_flag,
            ai.cancelled_date
     FROM ap_invoices_all ai,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.cancelled_date is not null
     AND   ai.temp_cancelled_amount is not null
     AND   NOT EXISTS (
             SELECT ''non zero amt line'' FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = ai.invoice_id
             AND   ail.amount <> 0)
     AND   0 = (
             SELECT sum(amount) FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id)
     AND   EXISTS(
             SELECT ''line dist var hold'' FROM ap_holds_all ah
             WHERE ai.invoice_id = ah.invoice_id
             AND   ah.hold_lookup_code in (''LINE VARIANCE'',''DIST VARIANCE'')
             AND   ah.release_lookup_code is null)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    154,
    'INVOICE',
    '',
    '',
    '',
    'orphan_self_assess_tax_inv_dists_sel.sql',
    'Orphan non-recoverable tax distributions created due to bug 7422547, where a normal tax line is modified to be self-assessed',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.accrual_posted_flag,
            aid.amount
     FROM ap_invoice_distributions_all aid,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.invoice_line_number is null
     AND   aid.line_type_lookup_code in (''REC_TAX'', ''NONREC_TAX'', ''TRV'',
             ''TIPV'', ''TERV'')
     AND   EXISTS (
             SELECT ''Tax Distributions'' FROM zx_rec_nrec_dist zd
             WHERE zd.rec_nrec_tax_dist_id = aid.detail_tax_dist_id
             AND   nvl(SELF_ASSESSED_FLAG, ''N'') = ''Y'')
     AND   EXISTS (
             SELECT ''self assessed tax'' FROM AP_SELF_ASSESSED_TAX_DIST_ALL asat
             WHERE asat.invoice_id = aid.invoice_id
             AND   asat.detail_tax_dist_id = aid.detail_tax_dist_id)
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    155,
    'INVOICE',
    '',
    '9891256',
    '',
    'paid_invoice_cancel_sel.sql',
    'Paid invoices which have been allowed to be canceled due to incorrect payment status flag in ap_payment_schedules',
    'Apply the root cause fix from bug {10034598} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.amount_paid,
            ai.invoice_currency_code,
            ai.payment_currency_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_payments_all p,
          financials_system_params_all fsp
     WHERE ai.invoice_id = invs.invoice_id
     AND   p.invoice_id = ai.invoice_id
     AND   nvl(p.reversal_flag,''N'') <> ''Y''
     AND   p.amount is not null
     AND   EXISTS (
             SELECT ''non void check'' FROM ap_checks_all A
             WHERE A.check_id = P.check_id
             AND   void_date is null)
     AND   ai.cancelled_date is not null
     AND   ai.cancelled_by is not null
     AND   fsp.org_id = ai.org_id
     AND   nvl(fsp.purch_encumbrance_flag, ''N'') = ''N'''
  );


  add_signature(g_signatures,
    157,
    'INVOICE',
    '',
    '10012949',
    '',
    'rcv_shpmt_miss_sel.sql',
    'Upgraded invoices with missing rcv_shipment_line_id values on invoice lines',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT ada.invoice_id  ada_inv_id,
            ada.org_id,
            ada.invoice_distribution_id,
            ada.rcv_transaction_id,
            ail.line_number,
            ail.rcv_shipment_line_id,
            ail.invoice_id,
            aid.old_distribution_id,
            ail.historical_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid,
          ap_invoice_dists_arch ada
     WHERE ada.invoice_id = aid.invoice_id
     AND   ada.invoice_distribution_id = aid.old_distribution_id
     AND   aid.invoice_line_number = ail.line_number
     AND   aid.invoice_id = ail.invoice_id
     AND   ada.rcv_transaction_id is not null
     AND   ail.rcv_transaction_id is not null
     AND   ail.rcv_shipment_line_id is null
     AND   ail.historical_flag = ''Y''
     AND   ail.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    158,
    'INVOICE',
    '',
    '9145026',
    '',
    'taxable_amount_zero_sel.sql',
    'Upgraded invoices with taxable amount incorrectly populated as zero.',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ leading(invs) */
            aidtax.invoice_id,
            aidtax.org_id,
            aidtax.invoice_line_number,
            aidtax.line_type_lookup_code,
            aidtax.invoice_distribution_id,
            aidtax.amount,
            aidtax.base_amount,
            aidtax.taxable_amount,
            aidtax.accounting_event_id,
            aidtax.posted_flag,
            aidtax.match_status_flag,
            aidtax.historical_flag,
            aidtax.reversal_flag,
            aidtax.parent_reversal_id,
            aidtax.old_distribution_id,
            aidtax.tax_recoverable_flag,
            aidtax.detail_tax_dist_id,
            aidtax.summary_tax_line_id,
            aidtax.tax_code_id,
            aidtax.tax_calculated_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aidtax
     WHERE taxable_amount = 0
     AND   historical_flag = ''Y''
     AND   line_type_lookup_code IN (''REC_TAX'',''NONREC_TAX'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aidtaxable
             WHERE aidtax.invoice_id = aidtaxable.invoice_id
             AND   aidtaxable.invoice_distribution_id = aidtax.charge_applicable_to_dist_id
             AND   aidtaxable.amount <> 0
             AND   aidtaxable.line_type_lookup_code NOT IN (''REC_TAX'',
                     ''NONREC_TAX'',''TRV'',''TERV'',''TIPV'',''AWT''))
     AND   aidtax.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    163,
    'INVOICE',
    '',
    '8922053',
    '',
    'update_individual_1099_sel.sql',
    'Individual and Foreign Individual suppliers which do not have individual_1099 populated.',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('1099'),
    'SELECT s.vendor_id,
            s.vendor_name,
            s.individual_1099,
            s.organization_type_lookup_code
     FROM ap_suppliers s
     WHERE s.num_1099 is null
     AND   s.individual_1099 is null
     AND   s.organization_type_lookup_code IN (''INDIVIDUAL'',''FOREIGN INDIVIDUAL'')
     AND   s.vendor_id IN (
             SELECT ai.vendor_id
             FROM ap_invoices_all ai,
                  (
                    ##$$IVIEW$$##
                  ) invs
             WHERE ai.invoice_id = invs.invoice_id)'
  );


  add_signature(g_signatures,
    166,
    'INVOICE',
    '',
    '9185134',
    '',
    'upd_inv_null_amt_sel.sql',
    'Invoices with null header amounts causing failures in appdstln.sql or apxlapay.sql during upgrade or xla hot patch application.',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Invoice Discard'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_amount,
            ai.payment_status_flag,
            ai.amount_paid
     FROM ap_invoices_all ai,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.invoice_amount is null
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    169,
    'INVOICE',
    '',
    '9365984',
    '',
    'ap_canc_inv_amt_paid_sel.sql',
    'Canceled invoices which still have a non-zero amount_paid value',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_amount,
            ai.amount_paid,
            ai.cancelled_date
     FROM ap_invoices_all ai,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.cancelled_date is not null
     AND   ai.amount_paid <> 0
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = ail.invoice_id
             AND   ail.line_type_lookup_code = ''PREPAY'')
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    171,
    'INVOICE',
    '',
    '9240004',
    '',
    'null_inv_line_num_sel.sql',
    'Tax distributions which have a null invoice_line_number',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Invoice Discard'),
    'SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.line_type_lookup_code,
            aid.detail_tax_dist_id,
            aid.invoice_distribution_id,
            aid.amount,
            aid.posted_flag,
            aid.accounting_event_id,
            aid.org_id
     FROM ap_invoice_distributions_all aid,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.line_type_lookup_code in (''REC_TAX'',''NONREC_TAX'',''TRV'',
             ''TERV'',''TIPV'')
     AND   aid.invoice_line_number is null
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    174,
    'INVOICE',
    '',
    '',
    '',
    'awt_rev_dist_sel.sql',
    'Canceled or discarded AWT invoice distributions with no corresponding reversal distribution.',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.line_type_lookup_code,
            aid.invoice_distribution_id,
            aid.parent_reversal_id,
            aid.charge_applicable_to_dist_id,
            aid.reversal_flag,
            aid.accounting_event_id,
            aid.org_id
     FROM ap_invoice_distributions_all aid,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.line_type_lookup_code = ''AWT''
     AND   aid.reversal_flag = ''Y''
     AND   aid.parent_reversal_id is null
     AND   NOT EXISTS (
             SELECT ''no reversal'' FROM ap_invoice_distributions_all aid1
             WHERE aid.invoice_id = aid1.invoice_id
             AND   aid.invoice_distribution_id = aid1.parent_reversal_id
             AND   aid1.line_type_lookup_code = ''AWT'')
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    179,
    'INVOICE',
    '',
    '',
    '',
    'tipv_terv_ccid_sel.sql',
    'Upgraded tax variance distributions with incorrect code combination ids.',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.historical_flag,
            aid.posted_flag,
            aid.amount,
            aid.line_type_lookup_code,
            aid.invoice_line_number,
            aid.dist_code_combination_id
     FROM ap_invoice_distributions_all aid,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.historical_flag = ''Y''
     AND   aid.line_type_lookup_code in (''TIPV'',''TERV'')
     AND   aid.dist_code_combination_id <> (
             SELECT decode(aid.line_type_lookup_code,
                      ''TIPV'', nvl(ada.price_var_code_combination_id,
                                    ada.dist_code_combination_id),
                      ''TERV'', nvl(ada.rate_var_code_combination_id,
                                    ada.dist_code_combination_id))
             FROM ap_invoice_dists_arch ada
             WHERE ada.invoice_id = aid.invoice_id
             AND   ada.invoice_distribution_id = aid.old_distribution_id)
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    282,
    'INVOICE',
    '',
    '',
    '',
    'AMT_NULL_MTCHD_DIST_SEL.sql',
    'Matched invoice distributions have a NULL amount preventing the invoice from accounting.',
    'Apply the fix for root cause bug {9445201} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            ai.cancelled_date,
            ai.invoice_currency_code,
            asp.base_currency_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid,
          ap_invoices_all ai,
          ap_system_parameters_all asp
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.po_distribution_id IS NOT NULL
     AND   aid.line_type_lookup_code in (''ITEM'',''ACCRUAL'')
     AND   aid.amount is null
     AND   asp.org_id = ai.org_id'
  );


  add_signature(g_signatures,
    290,
    'INVOICE',
    '',
    '',
    '',
    'ap_null_unitprice_sel.sql',
    'The unit price is null on invoice distributions though it exists on the lines, which can result in incorrect invoice price variance (IPV).',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.unit_price dist_price,
            ail.unit_price line_price
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid
     WHERE ail.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ail.invoice_id
     AND   aid.invoice_line_number = ail.line_number
     AND   aid.po_distribution_id IS NOT NULL
     AND   aid.line_type_lookup_code in (''ITEM'',''ACCRUAL'')
     AND   aid.unit_price is null
     AND   ail.unit_price is not null'
  );


  add_signature(g_signatures,
    292,
    'INVOICE',
    '',
    '13558262',
    '',
    'ap_ppay_dist_nulpair_sel.sql',
    'Prepay distribution id is null on non-historical prepay application and unapplication distribution pairs causing invoices to remain partially unaccounted.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aid.invoice_id,
         aid.org_id,
         aid.invoice_line_number,
         aid.invoice_distribution_id,
         aid.line_type_lookup_code,
         aid.encumbered_flag,
         aid.historical_flag,
         aid.posted_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid,
          ap_invoice_lines_all ail
     WHERE ail.invoice_id = invs.invoice_id
     AND   ail.invoice_id = aid.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     AND   nvl(ail.discarded_flag,''N'') = ''Y''
     AND   aid.line_type_lookup_code = ''PREPAY''
     AND   aid.prepay_distribution_id is null
     AND   nvl(aid.encumbered_flag, ''N'') <> ''Y''
     AND   nvl(aid.historical_flag,''N'') = ''N''
     AND   aid.posted_flag <> ''Y'''
  );


  add_signature(g_signatures,
    293,
    'INVOICE',
    '',
    '9478118',
    '',
    'ap_ppay_unmtch_encum_sel.sql',
    'Prepayment application lines on standard invoices refer to non-po-matched prepayments but a value for po_header_id is populated on teh prepay application lines and prepay invoice causing the invoice to be on CANT FUNDS CHECK hold.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ail.invoice_id,
            ail.line_number,
            ail.prepay_invoice_id,
            ail.prepay_line_number,
            ail.po_header_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_lines_all ail
     WHERE ail.invoice_id = invs.invoice_id
     AND   ail.prepay_invoice_id is not null
     AND   ail.prepay_line_number is not null
     AND   ail.po_header_id is not null
     AND   ail.po_line_id is null
     AND   ail.po_line_location_id is null
     AND   ail.po_distribution_id is null
     AND   EXISTS (
             SELECT invoice_id
             FROM ap_holds_all
             WHERE hold_lookup_code = ''CANT FUNDS CHECK''
             AND   status_flag != ''R''
             AND   release_lookup_code is null)'
  );


  add_signature(g_signatures,
    300,
    'INVOICE',
    '',
    '16234660',
    '',
    'ap_rcpt_num_corr_inv_sel.sql',
    'Receipt number does not show up on correction lines of invoices correcting price, quantity, or amount.',
    'Apply the root cause fix from bug {15946088} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ail.line_number,
            ail.rcv_transaction_id,
            ail.po_header_id,
            ail.match_type,
            ail.line_type_lookup_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = invs.invoice_id
     AND   ail.invoice_id = ai.invoice_id
     AND   ail.rcv_shipment_line_id is null
     AND   ail.rcv_transaction_id is not null'
  );


  add_signature(g_signatures,
    305,
    'INVOICE',
    '',
    '13774632',
    '',
    'ap_upd_null_hist_type_sel.sql',
    'Upgraded records in ap_inv_aprvl_hist_all of types DOCUMENTAPPROVAL, HOLDAPPROVAL, and LINESAPPROVAL have a null history_type value causing the Invoice Approval Status report not to show output for them.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Approval'),
    'SELECT aah.approval_history_id,
            aah.invoice_id,
            aah.iteration,
            aah.response,
            aah.approver_id,
            aah.approver_name,
            aah.amount_approved,
            aah.approver_comments,
            aah.created_by,
            aah.creation_date,
            aah.last_update_date,
            aah.last_updated_by,
            aah.last_update_login,
            aah.org_id,
            aah.notification_order,
            aah.orig_system,
            aah.item_class,
            aah.item_id,
            aah.line_number,
            aah.hold_id,
            aah.history_type
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_inv_aprvl_hist_all aah
     WHERE ai.invoice_id = invs.invoice_id
     AND   aah.invoice_id = ai.invoice_id
     AND   ai.historical_flag = ''Y''
     AND   aah.history_type is null'
  );


  add_signature(g_signatures,
    312,
    'INVOICE',
    '',
    '14405244',
    '',
    'RET_REL_ON_REV_DIST_SEL.sql',
    'When standard invoices with retainage are canceled or lines discarded, the retainage cannot be released, causing issues with accounting the invoice.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_invoice_distributions_all aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_type_lookup_code = ''RETAINAGE RELEASE''
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.line_type_lookup_code = ''RETAINAGE''
     AND   aid.po_distribution_id is not null
     AND   aid.retained_invoice_dist_id = aid1.invoice_distribution_id
     AND   aid1.parent_reversal_id is not null
     AND   aid1.line_type_lookup_code = ''RETAINAGE''
     AND   nvl(aid.historical_flag,''N'') <> ''Y''
     AND   nvl(aid1.historical_flag,''N'') <> ''Y'''
  );


  add_signature(g_signatures,
    314,
    'INVOICE',
    '',
    '',
    '',
    'wrng_pa_add_flag_sel.sql',
    'When project information is added to distributions via the invoice approval notification, the pa_addition_flag is incorrectly set, causing them not to interface to Projects.',
    'Apply the root cause fix from bug {12550017} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Projects'),
    'SELECT aid.invoice_id,
            aid.invoice_distribution_id,
            aid.pa_addition_flag,
            aid.project_id,
            aid.expenditure_type,
            aid.expenditure_organization_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.pa_addition_flag = ''E''
     AND   aid.project_id is not null
     AND   aid.expenditure_type is not null
     AND   aid.expenditure_organization_id is not null'
  );


  add_signature(g_signatures,
    323,
    'INVOICE',
    '',
    '',
    '',
    'ap_inv_ic_ccid_par_rev.sql',
    'Parent and reversal invoice distributions which do not have the same code combination ID which causes the invoice accounting to be incorrect.',
    'Diagnostic information only. Please generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_type_lookup_code,
            ai.invoice_date,
            ai.invoice_amount,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.parent_reversal_id,
            aid.dist_code_combination_id,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aid.accounting_event_id,
            aid.invoice_distribution_id,
            ai.org_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_suppliers asu,
          ap_supplier_sites_all assi
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   aid.reversal_flag=''Y''
     AND   aid.parent_reversal_id is not null
     AND   aid.dist_code_combination_id != (
             SELECT dist_code_combination_id FROM ap_invoice_distributions_all
             WHERE invoice_distribution_id=aid.parent_reversal_id)'
  );


  add_signature(g_signatures,
    326,
    'INVOICE',
    '',
    '',
    '',
    'ap_inv_dist_null_amt.sql',
    'Invoice distributions with a null amount causing them not to be accounted.',
    'Diagnostic information only. Please generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_type_lookup_code,
            ai.invoice_date,
            ai.invoice_amount,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aid.accounting_event_id,
            aid.invoice_distribution_id,
            ai.org_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_suppliers asu,
          ap_supplier_sites_all assi
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   amount is null'
  );


  add_signature(g_signatures,
    339,
    'INVOICE',
    '',
    '',
    '',
    'ap_pre_unv_wrng_disc_flg_sel.sql',
    'Prepayment invoice lines with an original_amount value have discarded_flag = Y causing them not to be available for application.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Discard'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.amount_paid,
            ail.line_number,
            ail.amount,
            ail.original_amount,
            ail.discarded_flag,
            ail.line_type_lookup_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = invs.invoice_id
     AND   ail.invoice_id = ai.invoice_id
     AND   ai.org_id = asp.org_id
     AND   asp.base_currency_code = ai.invoice_currency_code
     AND   ai.historical_flag is null
     AND   ai.amount_paid > 0
     AND   ai.payment_status_flag = ''Y''
     AND   ai.invoice_type_lookup_code = ''PREPAYMENT''
     AND   ail.amount > 0
     AND   ail.original_amount is not null
     AND   ail.discarded_flag = ''Y''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ail.invoice_id
             AND   aid.invoice_line_number = ail.line_number
             AND   aid.parent_reversal_id is not null)'
  );


  add_signature(g_signatures,
    340,
    'INVOICE',
    '',
    '',
    '',
    'ap_remtchdist_cnclinv_sel.sql',
    'Cancelled invoices are rematched after the match option is changed on the invoice header.',
    'Apply the root cause fix from bug {16841130} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure', 'PO Matching'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.cancelled_date,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.creation_date dist_creation_date,
            aid.po_distribution_id,
            aid.accounting_event_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.cancelled_date is not null
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.creation_date > ai.cancelled_date
     AND   aid.po_distribution_id is not null
     AND   aid.accounting_event_id is null'
  );


  add_signature(g_signatures,
    341,
    'INVOICE',
    '',
    '',
    '',
    'ap_std_inv_qui_cr_check_sel.sql',
    'The Quick Credit flag is enabled for invoices which are not CREDIT or DEBIT type invoices, causing an inability to add lines to these invoices.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Approval'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.quick_credit,
            ai.credited_invoice_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(ai.quick_credit, ''N'') = ''Y''
     AND   ai.credited_invoice_id is null
     AND   ai.invoice_type_lookup_code not IN (''CREDIT'',''DEBIT'')'
  );


  add_signature(g_signatures,
    343,
    'INVOICE',
    '',
    '',
    '',
    'ap_tipv_terv_ccid_sel.sql',
    'Tax Exchange Rage Variance (TERV) and Tax Invoice Price Variance (TIPV) accounting code combinations are interchanged.',
    'Apply the root cause fix from bug {16025353} (12.1) or {9154829} (12.0) if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.historical_flag,
            aid.line_type_lookup_code,
            aid.dist_code_combination_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.historical_flag = ''Y''
     AND   aid.line_type_lookup_code in (''TIPV'',''TERV'')
     AND   aid.dist_code_combination_id <> (
             SELECT decode(aid.line_type_lookup_code,
                      ''TIPV'', nvl(ada.price_var_code_combination_id,
                         ada.Dist_Code_Combination_ID),
                      ''TERV'', nvl(ada.rate_var_code_combination_id,
                         ada.Dist_Code_Combination_ID))
             FROM ap_invoice_dists_arch ada
             WHERE ada.invoice_id = aid.invoice_id
             AND   ada.invoice_distribution_id = aid.old_distribution_id)'
  );


  add_signature(g_signatures,
    346,
    'INVOICE',
    '',
    '',
    '',
    'ap_wrng_aad_historicdist_sel.sql',
    'Migrated MISC transactions with asset_tracking_flag as N are transferring to FA in R12 causing performance issues in mass additions.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Fixed Assets'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.assets_tracking_flag,
            aid.assets_addition_flag,
            aid.historical_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code IN (''FREIGHT'',
             ''MISCELLANEOUS'',''REC_TAX'',''NONREC_TAX'')
     AND   aid.assets_tracking_flag = ''N''
     AND   aid.assets_addition_flag = ''U''
     AND   aid.historical_flag = ''Y'''
  );


  add_signature(g_signatures,
    349,
    'INVOICE',
    '',
    '',
    '1500812.1',
    'inv_wf_wrong_status_sel.sql',
    'Invoices which are marked as approved at the header level have a workflow status of INITIATED at the line level causing the invoices not to be picked up by PPR.',
    'Apply the root cause fix from bug {14088192} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Approval'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ail.line_number,
            ai.wfapproval_status header_aprvl_status,
            ail.wfapproval_status line_aprvl_status
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = ail.invoice_id
     AND   ai.wfapproval_status = ''WFAPPROVED''
     AND   ail.wfapproval_status = ''INITIATED'''
  );


  add_signature(g_signatures,
    352,
    'INVOICE',
    '',
    '',
    '1482231.1',
    'Rel_Id_Null_On_IPV_sel.sql',
    'Multiple invoice price variance (IPV) distributions generated for a single matched distribution during invoice validation resulting in invoice variance hold.',
    'Apply the root cause fix from bug {14360581} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.related_id,
            aid.historical_flag,
            aid.dist_match_type,
            aid.corrected_invoice_dist_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code = ''IPV''
     AND   aid.related_id is null
     AND   aid.historical_flag is null
     AND   aid.dist_match_type in (''ITEM_TO_PO'',''ITEM_TO_RECEIPT'')
     AND   aid.corrected_invoice_dist_id is null'
  );


  add_signature(g_signatures,
    355,
    'INVOICE',
    '',
    '',
    '',
    'upg_awt_base_amt_null_sel.sql',
    'Base Amount is null on unpaid, unaccounted, upgraded AWT invoice distributions causing payments to be stuck in accounting and the invoices to remain on the trial balance.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.historical_flag,
            aid.base_amount
     FROM invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          ap_invoice_distributions_all aid,
          ap_payment_hist_dists aphd,
          xla_events xe
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code = ''AWT''
     AND   ai.invoice_id = aid.invoice_id
     AND   ai.invoice_currency_code = asp.invoice_currency_code
     AND   ai.org_id = asp.org_id
     AND   aid.base_amount is null
     AND   aid.awt_invoice_payment_id is not null
     AND   aid.historical_flag = ''Y''
     AND   aphd.invoice_distribution_id = aid.invoice_distribution_id
     AND   aphd.accounting_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   (nvl(xe.upg_batch_id,-9999) = -9999 OR
            xe.event_status_code <> ''P'')
     UNION
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.historical_flag,
            aid.base_amount
     FROM invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code = ''AWT''
     AND   ai.invoice_id = aid.invoice_id
     AND   ai.invoice_currency_code = asp.invoice_currency_code
     AND   ai.org_id = asp.org_id
     AND   aid.base_amount is null
     AND   aid.awt_invoice_payment_id is not null
     AND   aid.historical_flag = ''Y''
     AND   (ai.payment_status_flag IN (''N'',''P'') OR
            aid.posted_flag <> ''Y'')'
  );


  add_signature(g_signatures,
    356,
    'INVOICE',
    '',
    '',
    '1510863.1',
    'wrng_chrgapp_taxonly_sel.sql',
    'Tax Only invoice distributions are populated with a charge_applicable_to_dist_id value.',
    'Apply the root cause fix from bug {14772756} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ai.invoice_num,
            ai.invoice_id,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          zx_rec_nrec_dist zrd
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid.invoice_id
     AND   ai.invoice_id = zrd.trx_id
     AND   aid.line_type_lookup_code in (''REC_TAX'',''NONREC_TAX'')
     AND   aid.charge_applicable_to_dist_id is not null
     AND   aid.detail_tax_dist_id = zrd.rec_nrec_tax_dist_id
     AND   zrd.tax_only_line_flag = ''Y''
     AND   nvl(aid.historical_flag,''N'') = ''N'''
  );


  add_signature(g_signatures,
    357,
    'INVOICE',
    '',
    '',
    '',
    'wrng_rel_id_tax_dists_sel.sql',
    'RELATED_ID is populated on upgraded tax distributions causing the Mass Additions program to error with "unable to get a stable set of rows".',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Mass Additions'),
    'SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.charge_applicable_to_dist_id,
            aid.corrected_invoice_dist_id,
            aid.historical_flag,
            aid.related_id,
            aid.line_type_lookup_code,
            aid.assets_addition_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.charge_applicable_to_dist_id is null
     AND   aid.corrected_invoice_dist_id is null
     AND   nvl(aid.historical_flag,''N'') = ''Y''
     AND   aid.related_id is not null
     AND   aid.line_type_lookup_code in (''REC_TAX'',''NONREC_TAX'')
     AND   aid.assets_addition_flag = ''U''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = aid.invoice_id
             AND   aid1.invoice_line_number = aid.invoice_line_number
             AND   aid1.related_id = aid.related_id
             AND   aid1.invoice_distribution_id <> aid.invoice_distribution_id)'
  );


  add_signature(g_signatures,
    358,
    'INVOICE',
    '',
    '',
    '',
    'wrong_project_data_tax_rev_sel.sql',
    'Reversed tax distributions have incorrectly copied project details from the reversed item distribution rather than the reversed tax distribution causing incorrect project totals.',
    'Apply the root cause fix from bug {12373584} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('EBTax'),
    'SELECT aid_rev.invoice_id,
            aid_rev.org_id,
            aid_rev.invoice_line_number,
            aid_rev.invoice_distribution_id,
            aid_rev.parent_reversal_id,
            aid_rev.reversal_flag,
            aid_rev.project_id rev_project_id,
            aid_par.project_id par_project_id,
            aid_rev.pa_quantity rev_pa_quantity,
            aid_par.pa_quantity par_pa_quantity,
            aid_rev.project_accounting_context rev_pa_acct_context,
            aid_par.project_accounting_context par_pa_acct_context,
            aid_rev.task_id rev_task_id,
            aid_par.task_id par_task_id,
            aid_rev.award_id rev_award_id,
            aid_par.award_id par_award_id,
            aid_rev.expenditure_item_date rev_exp_item_date,
            aid_par.expenditure_item_date par_exp_item_date,
            aid_rev.expenditure_organization_id rev_exp_org,
            aid_par.expenditure_organization_id par_exp_org,
            aid_rev.expenditure_type rev_exp_type,
            aid_par.expenditure_type par_exp_type
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid_rev,
          ap_invoice_distributions_all aid_par
     WHERE aid_rev.invoice_id = invs.invoice_id
     AND   aid_rev.parent_reversal_id = aid_par.invoice_distribution_id
     AND   aid_par.line_type_lookup_code = ''NONREC_TAX''
     AND   aid_par.reversal_flag = ''Y''
     AND   aid_rev.reversal_flag = ''Y''
     AND   aid_rev.project_id is not null
     AND   (aid_rev.project_id <> aid_par.project_id OR
            aid_rev.pa_addition_flag <> aid_par.pa_addition_flag OR
            aid_rev.pa_quantity <> aid_par.pa_quantity OR
            aid_rev.project_accounting_context <> aid_par.project_accounting_context OR
            aid_rev.task_id <> aid_par.task_id OR
            aid_rev.award_id <> aid_par.award_id OR
            aid_rev.expenditure_item_date <> aid_par.expenditure_item_date OR
            aid_rev.expenditure_organization_id <> aid_par.expenditure_organization_id OR
            aid_rev.expenditure_type <> aid_par.expenditure_type)
     AND   1 = (
             SELECT count(1) FROM ap_invoice_distributions_all aid
             WHERE aid.parent_reversal_id = aid_par.invoice_distribution_id)'
  );


  add_signature(g_signatures,
    363,
    'INVOICE',
    '',
    '',
    '1486372.1',
    'ap_null_expend_item_date_sel.sql',
    'The expenditure item date on invoice distributions is null for matched transactions having project information, though the expenditure item date is not null in Purchasing.',
    'Apply the complete fix as described in [1486372.1] if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT aid.invoice_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.po_distribution_id,
            aid.expenditure_item_date
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid,
          po_distributions_all d
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.expenditure_item_date is null
     AND   aid.project_id is not null
     AND   nvl(aid.historical_flag, ''N'') = ''N''
     AND   d.po_distribution_id = aid.po_distribution_id
     AND   d.expenditure_item_date is not null'
  );


  add_signature(g_signatures,
    364,
    'INVOICE',
    '',
    '',
    '',
    'REQ_EXCH_RATE_NULL_SEL.sql',
    'Foreign currency invoices with null exchange rate information causing a NO RATE hold on the invoice.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Holds'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.exchange_rate,
            ai.exchange_rate_type,
            ai.invoice_currency_code invoice_currency,
            asp.base_currency_code base_currency,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.match_status_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_currency_code <> asp.base_currency_code
     AND   ai.exchange_rate is null
     AND   asp.org_id = ai.org_id
     AND   asp.set_of_books_id = ai.set_of_books_id
     AND   ai.exchange_rate_type is null
     AND   ai.invoice_id = aid.invoice_id
     AND   aid.match_status_flag is null'
  );


  add_signature(g_signatures,
    365,
    'INVOICE',
    '',
    '',
    '1497203.1',
    'wrong_adf_atf_dists_sel.sql',
    'Miscellaneous, freight, or tax invoice distributions have incorrect assets_tracking_flag/asset_addition_flag values.',
    'Apply the root cause fix from bug {13821160} (12.0) or {14466506} (12.1) if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Mass Additions'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''1'' corruption_type,
            aid.invoice_id,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.assets_tracking_flag,
            aid.assets_addition_flag,
            aid.accounting_date,
            aid.set_of_books_id
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   nvl(aid.charge_applicable_to_dist_id,
             aid.corrected_invoice_dist_id) is null
     AND   aid.line_type_lookup_code IN (''MISCELLANEOUS'',
             ''FREIGHT'',''NONREC_TAX'',''REC_TAX'')
     AND   aid.posted_flag = ''Y''
     AND   aid.assets_tracking_flag = ''Y''
     AND   aid.assets_addition_flag = ''N''
     UNION ALL
     SELECT ''2'' CORRUPTION_TYPE,
            aid.invoice_id,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.assets_tracking_flag,
            aid.assets_addition_flag,
            aid.accounting_date,
            aid.set_of_books_id
     FROM invs,
          ap_invoice_distributions_all aid,
          gl_code_combinations gcc
     WHERE aid.invoice_id = invs.invoice_id
     AND   nvl(aid.charge_applicable_to_dist_id,
             aid.corrected_invoice_dist_id) is null
     AND   aid.line_type_lookup_code IN (''MISCELLANEOUS'',
             ''FREIGHT'',''NONREC_TAX'',''REC_TAX'')
     AND   aid.assets_tracking_flag = ''N''
     AND   aid.posted_flag = ''Y''
     AND   aid.dist_code_combination_id = gcc.code_combination_id
     AND   gcc.account_type = ''A'''
  );


  add_signature(g_signatures,
    371,
    'INVOICE',
    '',
    '9508416',
    '1193928.1',
    'ap_quick_po_update_sel.sql',
    'Invoices which have been matched to a PO are not showing the PO Number in the PO Number field due to a missing value for quick_po_header_id.',
    'Apply the root cause fix from bug {9508416} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT /*+ leading(invs) */
            ai.invoice_id,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_amount,
            ai.quick_po_header_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   EXISTS (
             SELECT d.invoice_id
             FROM ap_invoice_distributions_all d,
                  po_distributions_all pod
             WHERE d.invoice_id = ai.invoice_id
             AND   d.po_distribution_id = pod.po_distribution_id)
     AND   ai.quick_po_header_id is null
     AND   ai.cancelled_date is null
     AND   ai.invoice_amount <> 0
     AND   ai.historical_flag is null
     AND   1 = (
             SELECT count(*)
             FROM (
                    SELECT distinct
                           l.invoice_id,
                           ph.segment1,
                           ph.po_header_id,
                           nvl(sum(l.amount),0) line_matched_amt
                    FROM ap_invoice_lines_all l,
                         po_headers_all ph
                    WHERE l.po_header_id = ph.po_header_id
                    AND   l.match_type IN ( ''PRICE_CORRECTION'',
                            ''QTY_CORRECTION'',''ITEM_TO_PO'',
                            ''ITEM_TO_RECEIPT'', ''AMOUNT_CORRECTION'',
                            ''RETRO PRICE ADJUSTMENT'',''ITEM_TO_SERVICE_PO'',
                            ''ITEM_TO_SERVICE_RECEIPT'')
                    AND    NVL (l.discarded_flag, ''N'' ) <> ''Y''
                    AND    NVL (l.cancelled_flag, ''N'' ) <> ''Y''
                    GROUP BY ph.po_header_id, ph.segment1, l.invoice_id
                    HAVING (nvl(sum(l.amount), 0) <> 0 OR
                            nvl(sum(l.quantity_invoiced), 0) <> 0)
                  ) po,
                  (
                     SELECT ail.po_header_id,
                            ail.corrected_inv_id,
                            nvl(sum(ail.amount), 0) corrected_amt
                     FROM ap_invoice_lines_all ail
                     WHERE nvl(ail.discarded_flag, ''N'' ) <> ''Y''
                     AND   nvl(ail.cancelled_flag, ''N'' ) <> ''Y''
                     GROUP BY ail.po_header_id, ail.corrected_inv_id
                  ) l
            WHERE l.po_header_id = po.po_header_id
            AND   po.invoice_id = ai.invoice_id
            AND   l.corrected_inv_id = ai.invoice_id
            AND   (ai.invoice_type_lookup_code NOT IN (''CREDIT'',''DEBIT'') OR
                   ((-1)*l.corrected_amt < (-1)*po.line_matched_amt))
            AND   (nvl(ai.invoice_type_lookup_code,''CREDIT'') IN (
                     ''CREDIT'',''DEBIT'') OR
                   ((-1)*l.corrected_amt < po.line_matched_amt)))'
  );


  add_signature(g_signatures,
    373,
    'INVOICE',
    '',
    '',
    '',
    'ap_wng_tax_dis_itm_lin_sel.sql',
    'Distributions on ITEM type lines which are stamped incorrectly with a line type lookup code of TAX and as a result cannot be accounted.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('EBTax'),
    'SELECT aid.invoice_id,
            ail.line_number,
            ail.line_type_lookup_code line_type,
            aid.line_type_lookup_code,
            aid.posted_flag,
            aid.invoice_distribution_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid,
          ap_invoice_lines_all ail
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code = ''TAX''
     AND   nvl(aid.posted_flag,   ''N'') = ''N''
     AND   ail.invoice_id = aid.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     AND   ail.line_type_lookup_code = ''ITEM''
     AND   aid.charge_applicable_to_dist_id is null'
  );


  add_signature(g_signatures,
    374,
    'INVOICE',
    '',
    '8973086',
    '1232144.1',
    'quick_match_qty_rnd_sel.sql',
    'During quick match the Quantity Invoiced is populated with multiple precision on invoice lines and distributions causing the invoice to be placed on QUALITY hold with the reason "Quantity billed is more than quantity accepted"',
    'Apply the root cause fix from bug {8973086} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT ai.invoice_id,
            ai.invoice_amount,
            ai.invoice_num,
            ai.vendor_id,
            ail.quantity_invoiced,
            ail.line_number,
            ail.line_type_lookup_code,
            ail.rcv_transaction_id,
            ail.po_distribution_id,
            ail.po_line_location_id,
            ail.po_line_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          fnd_currencies fnc
     WHERE ai.invoice_id = invs.invoice_id
     AND   fnc.currency_code = ai.invoice_currency_code
     AND   ai.historical_flag is null
     AND   ai.quick_po_header_id is not null
     AND   ai.invoice_id = ail.invoice_id
     AND   ail.po_line_location_id is not null
     AND   upper(ail.unit_meas_lookup_code) = ''EACH''
     AND   ail.quantity_invoiced is not null
     AND   EXISTS (
             SELECT 1 FROM po_distributions_all pod
             WHERE pod.po_header_id = ail.po_header_id
             AND   ail.po_line_id = pod.po_line_id
             AND   ail.po_line_location_id = pod.line_location_id
             AND   ((round(pod.quantity_billed) = quantity_ordered AND
                     pod.quantity_billed <> quantity_ordered) OR
                    (round(pod.quantity_billed) = quantity_delivered AND
                     pod.quantity_billed <>  Quantity_delivered))
             AND   decode(instr(pod.quantity_billed, ''.'', 1, 1),
                     0, 0,
                     length(substr(pod.quantity_billed,
                       instr(pod.quantity_billed, ''.'', 1, 1) + 1)))
                      > fnc.precision)'
  );


  add_signature(g_signatures,
    377,
    'INVOICE',
    '',
    '',
    '',
    'ap_pop_item_attr_sel.sql',
    'AP Invoice workflow item is missing the WF_NOTE attribute causing the workflow to fail with an ORA-20001 error.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Workflow'),
    'SELECT wfi.item_type,
            wfi.item_key,
            wfi.root_activity,
            wfi.root_activity_version,
            wfi.owner_role,
            wfi.parent_item_type,
            wfi.parent_item_key,
            wfi.parent_context,
            wfi.begin_date,
            wfi.end_date,
            wfi.user_key
     FROM (
            ##$$IVIEW$$##
          ) invs,
          wf_items wfi
     WHERE wfi.item_key LIKE to_char(invs.invoice_id)||''\_%'' escape ''\''
     AND   wfi.item_type = ''APINV''
     AND   NOT EXISTS (
             SELECT 1 FROM wf_item_attribute_values wfa
             WHERE wfa.item_type = wfi.item_type
             AND   wfa.item_key = wfi.item_key
             AND   wfa.name = ''WF_NOTE'')'
  );


  add_signature(g_signatures,
    378,
    'INVOICE',
    '',
    '12660674',
    '',
    'priccor_reltd_id_null_sel.sql',
    'RELATED_ID is null for invoice price variance (IPV) distributions of price correction invoices and for ITEM/ACCRUAL distributions of quantity correction invoices causing incorrect base amounts and accounting.',
    'Apply the root cause fix from bug {12660674} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT aid.invoice_id,
            aid.invoice_distribution_id,
            aid.corrected_invoice_dist_id,
            aid.amount,
            aid.related_id
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code = ''IPV''
     AND   aid.dist_match_type IN (''PRICE_CORRECTION'')
     AND   aid.corrected_invoice_dist_id is not null
     AND   aid.related_id is null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aidx
             WHERE aidx.invoice_id = aid.invoice_id
             AND   aidx.related_id = aid.invoice_distribution_id)
     UNION ALL
     SELECT aid.invoice_id,
            aid.invoice_distribution_id,
            aid.corrected_invoice_dist_id,
            aid.amount,
            aid.related_id
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code in (''ITEM'', ''ACCRUAL'')
     AND   aid.dist_match_type IN (''QTY_CORRECTION'')
     AND   aid.corrected_invoice_dist_id is not null
     AND   aid.related_id is null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aidx
             WHERE aidx.invoice_id = aid.invoice_id
             AND   aidx.related_id = aid.invoice_distribution_id)'
  );


  add_signature(g_signatures,
    379,
    'INVOICE',
    '',
    '',
    '',
    'wrong_inv_validation_pick_sel.sql',
    'Invoice validation is incorrectly picking old invoices for validation resulting in unnecessary processing and performance.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Validation Selection'),
    'SELECT ail.invoice_id,
            ail.line_number,
            ail.line_type_lookup_code,
            ail.amount,
            ail.generate_dists
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_lines_all ail,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = ail.invoice_id
     AND   nvl(ail.discarded_flag, ''N'') <> ''Y''
     AND   nvl(ail.cancelled_flag, ''N'') <> ''Y''
     AND   ail.amount = 0
     AND   ail.generate_dists = ''Y''
     AND   ail.line_type_lookup_code IN (''ITEM'',''TAX'')
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */
                    ''distributed line''
             FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ail.invoice_id
             AND   aid.invoice_line_number = ail.line_number)'
  );


  add_signature(g_signatures,
    380,
    'INVOICE',
    '',
    '11934187',
    '1354661.1',
    'ap_hist_inv_pp_appl_sel.sql',
    'When pre-payments are applied to upgraded invoices the force revalidation flag is not being set causing them not to be picked up for validation.',
    'Apply the root cause fix from bug {11934187} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Validation Selection'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.payment_status_flag,
            ai.historical_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.historical_flag = ''Y''
     AND   payment_status_flag  = ''Y''
     AND   nvl(force_revalidation_flag,''N'') = ''N''
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   nvl(aid.match_status_flag,''N'') = ''N''
             AND   aid.historical_flag is null
             AND   aid.prepay_distribution_id is not null)'
  );


  add_signature(g_signatures,
    382,
    'INVOICE',
    '',
    '11720134',
    '1562666.1',
    'ap_awt_ccid_incrt_sel.sql',
    'The account on AWT invoices is not overlayed as per the Automatic offset with the account for the corresponding item.  This causes incorrect accounting on the AWT invoice.',
    'Apply the root cause fix from bug {11720134} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ai.invoice_id "STD_INV_ID",
            aid.awt_invoice_id "AWT_INVOICE_ID",
            aid.org_id,
            aid.invoice_distribution_id "STD_INV_AWT_DIST_ID",
            aid.dist_code_combination_id "STD_INV_AWT_CCID",
            aid.invoice_line_number "STD_INV_AWT_LINE_NUM",
            aid.accounting_date "STD_INV_AWT_GL_DATE",
            aid.distribution_line_number,
            aid1.dist_code_combination_id "STD_INV_ITEM_CCID",
            CASE
              WHEN ap_invoices_utility_pkg.get_posting_status(
                     aid.awt_invoice_id) IN (''Y'', ''P'')
              THEN ''ACCOUNTED''
              ELSE ''UNACCOUNTED''
            END "AWT_INV_ACCTG_STATUS"
    FROM (
            ##$$IVIEW$$##
          ) invs,
         ap_invoices_all ai,
         ap_system_parameters_all asp,
         ap_invoice_distributions_all aid,
         ap_invoice_distributions_all aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.historical_flag is null
     AND   ai.org_id = asp.org_id
     AND   asp.automatic_offsets_flag = ''Y''
     AND   ai.invoice_id = aid.invoice_id
     AND   aid.awt_invoice_id is not null
     AND   aid.awt_flag = ''A''
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_related_id = aid1.invoice_distribution_id
     AND   ap_invoice_distributions_pkg.get_balancing_segment_value(
             aid1.dist_code_combination_id,
             aid1.set_of_books_id) <>
           ap_invoice_distributions_pkg.get_balancing_segment_value(
             aid.dist_code_combination_id,
             aid.set_of_books_id)
     AND   EXISTS (
             SELECT 1
             FROM ap_invoices_all ai2,
                  ap_invoice_distributions_all aid2
             WHERE ai2.invoice_id = aid.awt_invoice_id
             AND   ai2.description||to_char(aid.distribution_line_number) =
                     aid2.description
             AND   ai2.invoice_type_lookup_code = ''AWT''
             AND   aid2.invoice_id = ai2.invoice_id
             AND   aid2.dist_code_combination_id = aid.dist_code_combination_id)'
  );


  add_signature(g_signatures,
    383,
    'INVOICE',
    '',
    '17743503',
    '',
    'ap_mass_add_related_id_sel.sql',
    'The related_id column is populated on upgraded miscellaneous and freight invoice distributions causing creation of duplicate records and ultimately ORA-30962 errors in Mass Additions Create.',
    'Apply the root cause fix from bug {17743503} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Mass Additions'),
    'SELECT ''N'' PROCESS_FLAG, aid.*
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.historical_flag = ''Y''
     AND   aid.line_type_lookup_code IN (''MISCELLANEOUS'',''FREIGHT'')
     AND   aid.assets_tracking_flag = ''Y''
     AND   aid.assets_addition_flag = ''U''
     AND   aid.related_id is not null
     AND   NOT EXISTS (
             SELECT ''No incorrect IPV/ERV Variance exists''
             FROM ap_invoice_distributions_all aid2
             WHERE aid2.related_id = aid.invoice_distribution_id
             AND   aid.line_type_lookup_code <> aid2.line_type_lookup_code)'
  );


  add_signature(g_signatures,
    400,
    'INVOICE',
    '',
    '',
    '',
    'ap_pay_xdl_applied_col_nul_sel.sql',
    'Fully paid upgraded invoices appear in the Open Items Revaluation Report.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT DISTINCT
            aip.invoice_id,
            ac.check_id,
            ac.check_number,
            ac.org_id,
            asp.set_of_books_id,
            xah.ae_header_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_payments_all aip,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          xla_distribution_links xdl
     WHERE aip.invoice_id = invs.invoice_id
     AND   ac.check_id = aip.check_id
     AND   asp.org_id = ac.org_id
     AND   xte.ledger_id = asp.set_of_books_id
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   xte.application_id = 200
     AND   nvl(xte.source_id_int_1, -99 ) = ac.check_id
     AND   xte.entity_id = xah.entity_id
     AND   xah.application_id = 200
     AND   xah.ae_header_id = xdl.ae_header_id
     AND   xdl.application_id = 200
     AND   xdl.accounting_line_code = ''AP_LIAB_PMT''
     AND   xdl.applied_to_source_id_num_1 is null
     AND   xdl.applied_to_entity_id is not null'
  );


  add_signature(g_signatures,
    403,
    'INVOICE',
    '',
    '16982384',
    '1622375.1',
    'ap_ful_pay_sch_on_hold_sel.sql',
    'Fully paid invoices with a schedule payment hold.',
    'Apply the root cause fix from bug {16982384} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Holds'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aps.payment_num
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aps.invoice_id
     AND   nvl(aps.hold_flag,''N'') = ''Y''
     AND   nvl(aps.payment_status_flag,''N'') = ''Y''
     AND   nvl(ai.payment_status_flag,''N'') = ''Y''
     AND   aps.amount_remaining = ''0''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = aps.invoice_id
             AND   nvl(ail.cancelled_flag,''N'')= ''Y'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = aps.invoice_id
             HAVING sum(aid.amount) = (
                      SELECT sum(aip.amount) FROM ap_invoice_payments_all aip
                      WHERE aip.invoice_id = aps.invoice_id))'
  );


  add_signature(g_signatures,
    404,
    'INVOICE',
    '',
    '17046524',
    '',
    'ap_old_disc_fa_trans_sel.sql',
    'Old discounts which were not transferred to FA in 11i because automatic offsets were off, are transferred to FA after upgrading to R12.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Fixed Assets'),
    'SELECT DISTINCT
            aip.invoice_id,
            aip.check_id,
            aip.org_id,
            aip.posted_flag,
            aip.assets_addition_flag,
            aip.payment_num,
            aip.accounting_date,
            aip.amount,
            aip.posted_flag,
            aip.set_of_books_id,
            aip.accounting_event_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_payments_all aip,
          ap_ae_headers_all aeh,
          ap_ae_lines_all ael
     WHERE aip.invoice_id = invs.invoice_id
     AND   aip.assets_addition_flag = ''U''
     AND   aip.posted_flag = ''Y''
     AND   ael.source_table = ''AP_INVOICE_PAYMENTS''
     AND   ael.source_id = aip.invoice_payment_id
     AND   ael.ae_line_type_code = ''DISCOUNT''
     AND   aeh.ae_header_id = ael.ae_header_id
     AND   aeh.set_of_books_id = aip.set_of_books_id
     AND   aeh.gl_transfer_flag = ''Y''
     AND   ael.account_overlay_source_id is null'
  );


  add_signature(g_signatures,
    405,
    'INVOICE',
    '',
    '19400189',
    '1617159.1',
    'pending_alloc_large_num_chrg_line_sel.sql',
    'Line discard creates very large distribution line numbers which cause ORA-01438 errors when trying to cancel the invoice.',
    'Apply the root cause fix from bug {19400189} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.amount,
            aid.last_updated_by,
            aid.last_update_login,
            aid.last_update_date
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code in (''FREIGHT'', ''MISCELLANEOUS'')
     AND   aid.distribution_line_number > 100000
     AND   EXISTS (
             SELECT 1 FROM  ap_invoice_distributions_all aidx
             WHERE aidx.invoice_id = aid.invoice_id
             AND   aidx.parent_reversal_id = aid.invoice_distribution_id
             AND   aidx.distribution_line_number = aid.distribution_line_number * 2)
     AND   EXISTS (
             SELECT 1 FROM ap_allocation_rules aar
             WHERE aar.invoice_id = aid.invoice_id
             AND   aar.chrg_invoice_line_number = aid.invoice_line_number
             AND   aar.status = ''PENDING'')'
  );


  add_signature(g_signatures,
    406,
    'INVOICE',
    '',
    '',
    '',
    'ap_cancel_11i_wf_notif_sel.sql',
    'Open invoice approval workflow notifications from 11i cannot be processed in R12.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Approval'),
    'SELECT n.*,
            substr(n.item_key,1,(instr(n.item_key,''_'')- 1)) invoice_id,
            substr(n.item_key,(instr(n.item_key,''_'')  + 1),
              length(n.item_key)) iteration
     FROM wf_notifications n,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE n.message_type = ''APINV''
     AND   n.status = ''OPEN''
     AND   invs.invoice_id = to_number(substr(n.item_key,1,(instr(n.item_key,''_'')- 1)))
     AND   n.message_name IN (''APINV_MEAR'',''APINV_MAR'',''APINV_MRA'')'
  );


  add_signature(g_signatures,
    410,
    'INVOICE',
    '',
    '',
    '1556126.1',
    'ap_trxupg_m_sel.sql',
    'Consolidated fixes for upgraded invoices that have been modified since the upgrade.  See Note 1556126.1 for the complete list.',
    'Review and follow the referenced note which contains the data fix for the detected issues.',
    'N',
    'N',
    impact_area_tbl('Invoice Data'),
    'WITH invs AS (
       SELECT /*+ materialize */ ai.invoice_id
       FROM (
              ##$$IVIEW$$##
            ) ai
       WHERE EXISTS (
               SELECT 1 FROM ap_invoice_distributions_all aid_sub
               WHERE aid_sub.invoice_id = ai.invoice_id
               AND   nvl(aid_sub.historical_flag,''N'') = ''N''
               UNION ALL
               SELECT 1
               FROM ap_invoice_distributions_all aid_sub,
                    xla_events xe_sub,
                    ap_accounting_events_all aae_sub
               WHERE aid_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.event_id = aae_sub.accounting_event_id
               AND   xe_sub.upg_batch_id = -9999
               AND   aid_sub.invoice_id = ai.invoice_id
               UNION ALL
               SELECT 1
               FROM ap_invoice_payments_all aip_sub,
                    ap_payment_history_all aph_sub,
                    xla_events xe_sub,
                    ap_accounting_events_all aae_sub
               WHERE  aip_sub.invoice_id = ai.invoice_id
               AND   aip_sub.check_id = aph_sub.check_id
               AND   aph_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.application_id = 200
               AND   xe_sub.event_id = aae_sub.accounting_event_id
               AND   xe_sub.upg_batch_id = -9999
               UNION ALL
               SELECT 1
               FROM ap_invoice_distributions_all aid_sub,
                    xla_events xe_sub,
                    xla_ae_headers xah_sub
               WHERE aid_sub.invoice_id = ai.invoice_id
               AND   aid_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.application_id = 200
               AND   xe_sub.event_id = xah_sub.event_id
               AND   xah_sub.application_id = 200
               AND   xah_sub.upg_batch_id  is null
               UNION ALL
               SELECT 1
               FROM ap_invoice_payments_all aip_sub,
                    ap_payment_history_all aph_sub,
                    xla_events xe_sub,
                    xla_ae_headers xah_sub
               WHERE aip_sub.invoice_id = ai.invoice_id
               AND   aip_sub.check_id = aph_sub.check_id
               AND   aph_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.application_id = 200
               AND   xe_sub.event_id = xah_sub.event_id
               AND   xah_sub.application_id = 200
               AND   xah_sub.upg_batch_id  is null)
     )
     SELECT aid_rev.invoice_id invoice_id,
            aid_rev.invoice_line_number,
            aid_org.invoice_distribution_id parent_dist_id,
            aid_org.line_type_lookup_code,
            aid_org.amount,
            aid_rev.invoice_distribution_id reversal_dist_id,
            1.1 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid_org,
          ap_invoice_dists_arch aid_rev
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid_org.invoice_id
     AND   aid_rev.invoice_id = aid_org.invoice_id
     AND   aid_rev.parent_reversal_id = aid_org.invoice_distribution_id
     AND   aid_rev.amount <> (-1)*aid_org.amount
     UNION ALL
     SELECT aid_rev.invoice_id invoice_id,
            aid_rev.invoice_line_number,
            aid_org.invoice_distribution_id,
            aid_org.line_type_lookup_code,
            aid_org.amount,
            aid_rev.invoice_distribution_id,
            1.2 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid_org,
          ap_invoice_dists_arch aid_rev
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid_org.invoice_id
     AND   aid_rev.invoice_id = aid_org.invoice_id
     AND   aid_rev.parent_reversal_id = aid_org.invoice_distribution_id
     AND   aid_rev.line_type_lookup_code <> aid_org.line_type_lookup_code
     UNION ALL
     SELECT aid1.invoice_id invoice_id,
            aid1.invoice_line_number,
            aid1.parent_reversal_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            null,
            1.3 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid1.invoice_id = ai.invoice_id
     AND   aid1.parent_reversal_id is not null
     GROUP BY aid1.invoice_id, aid1.invoice_line_number,
              aid1.parent_reversal_id, aid1.line_type_lookup_code,
              aid1.amount
     HAVING COUNT(aid1.parent_reversal_id) > 1
     UNION ALL
     SELECT
            aid_rev.invoice_id invoice_id,
            aid_rev.invoice_line_number,
            aid_rev.parent_reversal_id,
            aid_rev.line_type_lookup_code,
            aid_rev.amount,
            aid_rev.invoice_distribution_id,
            1.4 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid_org,
          ap_invoice_dists_arch aid_rev
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid_org.invoice_id
     AND   aid_rev.invoice_id = aid_org.invoice_id
     AND   aid_rev.parent_reversal_id = aid_org.invoice_distribution_id
     AND   aid_org.parent_reversal_id is not null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_dists_arch arcx
             WHERE arcx.invoice_id = aid_org.invoice_id
             AND   arcx.invoice_distribution_id = aid_org.parent_reversal_id
             AND   arcx.parent_reversal_id is null)
     UNION ALL
     SELECT aid1.invoice_id parent_invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            aid1.parent_reversal_id,
            1.5 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid1.invoice_id
     AND   aid1.parent_reversal_id is not null
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_dists_arch aid2
             WHERE aid2.invoice_id = aid1.invoice_id
             AND   aid2.invoice_distribution_id = aid1.parent_reversal_id)
     UNION ALL
     SELECT aid1.invoice_id parent_invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            aid1.parent_reversal_id,
            1.6 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid1.invoice_id
     AND   aid1.reversal_flag = ''Y''
     AND   aid1.parent_reversal_id is null
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_invoice_dists_arch aid2
             WHERE aid2.parent_reversal_id is not null
             AND   aid2.invoice_id = aid1.invoice_id
             AND   aid2.parent_reversal_id = aid1.invoice_distribution_id)
     UNION ALL
     SELECT aid1.invoice_id parent_invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            aid1.parent_reversal_id,
            1.7 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid1.invoice_id
     AND   aid1.parent_reversal_id is not null
     AND   nvl(aid1.reversal_flag,''N'') = ''N''
     UNION ALL
     SELECT aid1.invoice_id parent_invoice_id,
            aid1.invoice_line_number,
            aid2.invoice_distribution_id,
            aid2.line_type_lookup_code,
            aid2.amount,
            aid1.invoice_distribution_id,
            1.8 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1,
          ap_invoice_dists_arch aid2
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid1.invoice_id
     AND   aid1.parent_reversal_id is not null
     AND   aid1.invoice_id = aid2.invoice_id
     AND   aid1.line_type_lookup_code = aid2.line_type_lookup_code
     AND   aid1.parent_reversal_id = aid2.invoice_distribution_id
     AND   aid2.parent_reversal_id is null
     AND   nvl(aid2.reversal_flag,''N'') = ''N''
     UNION ALL
     SELECT ai.invoice_id parent_invoice_id,
            aid_org.invoice_line_number,
            aid_org.parent_reversal_id,
            aid_org.line_type_lookup_code,
            aid_org.amount,
            aid_org.invoice_distribution_id,
            1.9 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid_org,
          ap_invoice_dists_arch aid_rev
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid_org.invoice_id
     AND   aid_rev.invoice_id = aid_org.invoice_id
     AND   aid_rev.parent_reversal_id = aid_org.invoice_distribution_id
     AND   aid_org.parent_reversal_id is not null
     AND   aid_rev.invoice_distribution_id = aid_org.parent_reversal_id
     AND   aid_rev.invoice_distribution_id < aid_org.invoice_distribution_id
     UNION ALL
     SELECT aid1.invoice_id parent_invoice_id,
            aid1.invoice_line_number,
            aid1.parent_reversal_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            aid1.invoice_distribution_id,
            1.10 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid1.invoice_id
     AND   reversal_flag IN (''U'', ''R'')
     UNION ALL
     SELECT aid1.invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            null,
            2.1 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1,
          ap_invoice_dists_arch aid2,
          ap_chrg_allocations_all aca
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid1.invoice_id = aid2.invoice_id
     AND   aid1.invoice_distribution_id = aca.item_dist_id
     AND   aid2.invoice_distribution_id = aca.charge_dist_id
     AND   aid1.line_type_lookup_code = aid2.line_type_lookup_code
     AND   ai.invoice_id = aid1.invoice_id
     UNION ALL
     SELECT aid1.invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            null,
            2.2 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1,
          ap_chrg_allocations_all aca
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid1.invoice_distribution_id = aca.charge_dist_id
     AND   aid1.line_type_lookup_code = ''ITEM''
     AND   ai.invoice_id = aid1.invoice_id
     UNION ALL
     SELECT aid1.invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            null,
            2.3 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1,
          ap_invoice_dists_arch aid2,
          ap_chrg_allocations_all aca
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid1.invoice_id = aid2.invoice_id
     AND   aid1.invoice_distribution_id = aca.item_dist_id
     AND   aid2.invoice_distribution_id = aca.charge_dist_id
     AND   aid2.line_type_lookup_code  IN (''FREIGHT'',''MISCELLANEOUS'')
     AND   aid1.line_type_lookup_code = ''TAX''
     AND   ai.invoice_id = aid1.invoice_id
     UNION ALL
     SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            null,
            2.4 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid,
          ap_chrg_allocations_all acax
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.prepay_tax_parent_id is not null
     AND   aid.line_type_lookup_code = ''TAX''
     AND   aid.invoice_distribution_id = acax.charge_dist_id
     AND   aid.prepay_tax_parent_id <> acax.item_dist_id
     AND   ai.invoice_id = aid.invoice_id
     UNION ALL
     SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            null,
            2.5 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid,
          ap_chrg_allocations_all acax,
          ap_invoice_dists_arch aid_i
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.prepay_tax_parent_id is null
     AND   aid.line_type_lookup_code = ''TAX''
     AND   aid.invoice_distribution_id = acax.charge_dist_id
     AND   acax.item_dist_id = aid_i.invoice_distribution_id
     AND   aid_i.line_type_lookup_code = ''PREPAY''
     AND   ai.invoice_id = aid.invoice_id
     UNION ALL
     SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            null,
            2.6 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code = ''TAX''
     AND   aid.amount <> (
             SELECT sum(acax.allocated_amount) FROM ap_chrg_allocations_all acax
             WHERE acax.charge_dist_id = aid.invoice_distribution_id)
     AND   ai.invoice_id = aid.invoice_id
     UNION ALL
     SELECT ada.invoice_id,
            ada.invoice_line_number,
            ada.invoice_distribution_id,
            ada.line_type_lookup_code,
            ada.amount,
            null,
            2.7 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch ada
     WHERE ai.invoice_id = invs.invoice_id
     AND   ada.line_type_lookup_code = ''TAX''
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_dists_arch aidi
             WHERE aidi.invoice_id = ada.invoice_id
             AND   aidi.line_type_lookup_code not IN (''AWT'', ''TAX'')
             AND   ada.tax_code_id = aidi.tax_code_id)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_chrg_allocations_all aca
             WHERE aca.charge_dist_id = ada.invoice_distribution_id)
     AND   ai.invoice_id = ada.invoice_id
     UNION ALL
     SELECT
            arc.invoice_id,
            arc.distribution_line_number,
            arc.invoice_distribution_id,
            arc.line_type_lookup_code,
            arc.amount,
            null,
            3 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch arc
     WHERE ai.invoice_id = invs.invoice_id
     AND   arc.invoice_id = ai.invoice_id
     AND   NOT EXISTS (
        SELECT 1 FROM ap_invoice_distributions_all aid
        WHERE aid.invoice_id = arc.invoice_id
        AND   aid.old_distribution_id = arc.invoice_distribution_id)
     UNION ALL
     SELECT
            ail.invoice_id,
            ail.line_number,
            null invoice_distribution_id,
            ail.line_type_lookup_code,
            ail.amount,
            null,
            6 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = ail.invoice_id
     AND   nvl(ail.historical_flag, ''N'') = ''Y''
     AND   ail.line_type_lookup_code not IN (''TAX'', ''AWT'', ''PREPAY'')
     AND   ail.corrected_inv_id is not null
     AND   ail.corrected_line_number is null
     AND   EXISTS (
             SELECT 1
             FROM ap_invoice_distributions_all aid,
                  ap_invoice_dists_arch arc
             WHERE aid.invoice_id = ail.invoice_id
             AND   aid.invoice_line_number = ail.line_number
             AND   aid.invoice_id = arc.invoice_id
             AND   arc.invoice_distribution_id = aid.old_distribution_id
             AND   arc.price_correct_inv_id is not null)
     UNION
     SELECT /*+ ORDERED */
            aid_t.invoice_id,
            aid_t.distribution_line_number,
            aid_t.invoice_distribution_id,
            aid_t.line_type_lookup_code,
            aid_t.amount,
            null,
            7 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid_t,
          ap_chrg_allocations_all aca,
          ap_invoice_dists_arch aid_i
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid_i.line_type_lookup_code IN (''ITEM'', ''FREIGHT'', ''MISCELLANEOUS'')
     AND   aid_i.reversal_flag = ''Y''
     AND   aca.charge_dist_id = aid_t.invoice_distribution_id
     AND   aca.item_dist_id = aid_i.invoice_distribution_id
     AND   aid_t.line_type_lookup_code = ''TAX''
     AND   aid_t.prepay_tax_parent_id is null
     AND   aid_t.invoice_id = ai.invoice_id
     AND   nvl(aid_t.reversal_flag, ''N'') = ''N'''
  );


  add_signature(g_signatures,
    417,
    'INVOICE',
    '',
    '19649854',
    '',
    'ap_dup_inv_number_sel.sql',
    'Invoices exist in the application with duplicate invoice numbers',
    'Apply the root cause fix from bug {19649854} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Data'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.vendor_id,
            ai.party_site_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   (ai.vendor_id, ai.invoice_num, ai.org_id ,ai.party_site_id) IN (
             SELECT ai2.vendor_id,
                    ai2.invoice_num,
                    ai2.org_id,
                    ai2.party_site_id
             FROM ap_invoices_all ai2
             GROUP BY vendor_id, invoice_num, party_site_id,org_id
             HAVING COUNT(1) > 1)'
  );


  add_signature(g_signatures,
    418,
    'INVOICE',
    '',
    '',
    '',
    'ap_invld_chars_inv_desc_sel.sql',
    'Non-standard characters exist in the descriptions of imported invoices which can cause errors in invoice cancellation and other invoice workbench actions and warnings in some reports',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Cancellation', 'Invoice Data'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.vendor_id,
            ai.description
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   translate(ai.description,
             '',''''ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+-=,!\`~{}./?:";''''[ ]'',
             '' '') <> '' ''
     AND   EXISTS (
          SELECT 1 FROM nls_database_parameters
          WHERE parameter = ''NLS_CHARACTERSET''
          AND   value IN (''UTF8'', ''WE8ISO8859P1'', ''AL32UTF8''))
     AND   EXISTS (
          SELECT 1 FROM ap_invoice_lines_all ail
          WHERE ail.invoice_id = ai.invoice_id
          AND   ail.line_source = ''IMPORTED'')'
  );


  add_signature(g_signatures,
    420,
    'INVOICE',
    '',
    '19848929',
    '1961120.1',
    'ap_upd_line_sel_rel_flag_sel.sql',
    'When creating a retainage release invoice for a PO shipment (with multiple distributions) a unique constraint error (ORA-00001) occurs resulting in the line_selected_for_release_flag remaining as Y on affected lines',
    'Apply the root cause fix from bug {19848929} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Data', 'PO Matching'),
    'SELECT ail.invoice_id,
            ail.line_number,
            ail.line_selected_for_release_flag,
            ail.retained_amount,
            ail.retained_amount_remaining
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_lines_all ail
     WHERE ail.invoice_id = invs.invoice_id
     AND   ail.po_line_location_id is not null
     AND   ail.retained_amount is not null
     AND   ail.line_selected_for_release_flag = ''Y''
     AND   ail.retained_amount_remaining > 0
     AND   nvl(ail.discarded_flag,''N'') <> ''Y''
     AND   (-1) * ail.retained_amount  <> (
             SELECT nvl(sum(ail2.amount),0) FROM ap_invoice_lines_all ail2
             WHERE ail2.retained_invoice_id = ail.invoice_id
             AND   ail2.retained_line_number = ail.line_number)'
  );


  add_signature(g_signatures,
    421,
    'INVOICE',
    '',
    '',
    '1984125.1',
    'ap_purged_inv_attmnt_sel.sql',
    'Invoice attachments still exist in FND_LOBS for invoices which have been purged',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Archive/Purge'),
    'SELECT ad.pk1_value invoice_id,
            ad.entity_name,
            rownum seqno
     FROM (
            ##$$IVIEW$$##
          ) invs,
          fnd_attached_documents ad
     WHERE ad.pk1_value = to_char(invs.invoice_id)
     AND   ad.entity_name = ''AP_INVOICES''
     AND   ad.pk1_value IN (
             SELECT ahi.invoice_id FROM ap_history_invoices_all ahi
             WHERE invoice_id NOT IN (
                     SELECT invoice_id FROM AP_INVOICES_ALL))'
  );


  add_signature(g_signatures,
    426,
    'INVOICE',
    '',
    '',
    '',
    'ap_incorr_ptp_rounding_rule_sel.sql',
    'Invoices cannot be validated due to errors in ZX_TDS_CALC_SERVICES_PUB_PKG.PRORATE_IMPORTED_SUM_TAX_LINES due to incorrect values in ZX_PARTY_TAX_PROFILE.ROUNDING_RULE_CODE',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Approval', 'Supplier'),
    'SELECT ptp.party_id,
            ptp.party_tax_profile_id,
            ptp.party_type_code,
            ptp.supplier_flag,
            ptp.site_flag,
            ptp.rounding_rule_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_supplier_sites_all ss,
          zx_party_tax_profile ptp
     WHERE ai.invoice_id = invs.invoice_id
     AND   ss.vendor_site_id = ai.vendor_site_id
     AND   ptp.rounding_rule_code in (''U'',''D'',''N'')
     AND   ptp.party_type_code in (''THIRD_PARTY_SITE'')
     AND   ptp.party_id = ss.party_site_id'
  );


  add_signature(g_signatures,
    428,
    'INVOICE',
    '',
    '20452983',
    '',
    'active_tax_on_reversed_chrg_sel.sql',
    'Invoice validation fails when trying to delete frozen tax distributions.  Freight distrubutions are reversed, but corresponding tax distributions are not.',
    'Apply the root cause fixes from bug {12419997} or {14383132} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Approval'),
    'SELECT aid.invoice_id,
            aid.line_type_lookup_code,
            aid.invoice_distribution_id,
            aid.amount
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          financials_system_params_all fsp,
          ap_invoice_distributions_all aid,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid.invoice_id
     AND   aid.invoice_id = ail.invoice_id
     AND   aid.invoice_line_number = ail.line_number
     AND   fsp.org_id = ai.org_id
     AND   aid.line_type_lookup_code IN (''FREIGHT'', ''MISCELLANEOUS'')
     AND   aid.reversal_flag = ''Y''
     AND   aid.parent_reversal_id is null
     AND   nvl(ail.discarded_flag, ''N'') = ''N''
     AND   nvl(ai.historical_flag, ''N'') = ''N''
     AND   EXISTS (
             SELECT 1 FROM zx_rec_nrec_dist zrnd
             WHERE zrnd.trx_id = aid.invoice_id
             AND   zrnd.application_id = 200
             AND   zrnd.entity_code = ''AP_INVOICES''
             AND   zrnd.event_class_code IN (''STANDARD INVOICES'',
                     ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
             AND   zrnd.trx_line_dist_id = aid.invoice_distribution_id
             AND   nvl(zrnd.reverse_flag, ''N'') = ''N'')
     AND   EXISTS (
             SELECT 1 FROM ap_allocation_rule_lines arl
             WHERE arl.invoice_id = ai.invoice_id
             AND   arl.chrg_invoice_line_number = ail.line_number)
     AND   EXISTS (
             SELECT 1 FROM dual
             WHERE ai.force_revalidation_flag = ''Y''
             UNION ALL
             SELECT 1 FROM ap_invoice_distributions_all aidx
             WHERE aidx.invoice_id = ai.invoice_id
             AND   fsp.purch_encumbrance_flag = ''Y''
             AND   aidx.match_status_flag <> ''A''
             UNION ALL
             SELECT 1 FROM ap_invoice_distributions_all aidx
             WHERE aidx.invoice_id = ai.invoice_id
             AND   fsp.purch_encumbrance_flag = ''N''
             AND   aidx.match_status_flag not IN (''T'', ''A'')
             UNION ALL
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.release_lookup_code is null)'
  );


  add_signature(g_signatures,
    430,
    'INVOICE',
    '',
    '14804508',
    '1556628.1',
    'update_approval_iteration_sel.sql',
    'Invoices with null approval_iteration but which have workflow attributes in the workflow tables causing workflow approval process to fail and approval cannot be initiated for the invoice.',
    'Apply the root cause fix from bug {14804508} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Approval', 'Workflow'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.approval_iteration is null
     AND   EXISTS (
             SELECT 1 FROM wf_items i
             WHERE i.item_type like ''APINVAPR''
             AND   i.item_key = ai.invoice_id||''_''||''1'')'
  );


  add_signature(g_signatures,
    432,
    'INVOICE',
    '',
    '21907761',
    '2079259.1',
    'ap_zero_amt_line_no_dist_needs_revalid_sel.sql',
    'Invoices with zero amount lines having no distributions are displayed in "Needs Revalidation" status.',
    'Apply the root cause fix from bug {21907761} if you have not done so. No additional data fix should be required.',
    'N',
    'N',
    impact_area_tbl('Invoice Approval'),
    'SELECT ail.invoice_id,
            ail.org_id,
            ail.line_number,
            ail.discarded_flag,
            ail.cancelled_flag,
            ail.amount,
            ail.distribution_set_id,
            ail.default_dist_ccid
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_lines_all ail
     WHERE ail.invoice_id = invs.invoice_id
     AND   nvl(ail.discarded_flag, ''N'') <> ''Y''
     AND   nvl(ail.cancelled_flag, ''N'') <> ''Y''
     AND   ail.amount = 0
     AND   distribution_set_id is null
     AND   default_dist_ccid is null
     AND   NOT EXISTS (
             SELECT ''distributed line''
             FROM AP_INVOICE_DISTRIBUTIONS_ALL D5
             WHERE D5.INVOICE_ID = AIL.INVOICE_ID
             AND   D5.INVOICE_LINE_NUMBER = AIL.LINE_NUMBER)
     AND   NOT EXISTS (
             SELECT ''NO RCA'' FROM ad_bugs
             WHERE bug_number = ''21907761'')'
  );


  add_signature(g_signatures,
    435,
    'INVOICE',
    '',
    '',
    '2086996.1',
    'psa_ap_fc_enc_holds_sel.sql',
    'Invoices exist with "Funds Check", "Insufficient Funds" or "Encumbrance Acctg Fail" holds.',
    'Download and run the PSA Data Validation Analyzer from [2086996.1] for additional analysis and available solutions for these types of holds.',
    'N',
    'Y',
    impact_area_tbl('Invoice Approval', 'Invoice Data'),
    'SELECT apl.invoice_id,
            apl.hold_lookup_code,
            apl.hold_reason,
            apl.release_reason,
            apl.status_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_holds_all apl
     WHERE apl.hold_lookup_code IN (''CANT FUNDS CHECK'',
             ''INSUFFICIENT FUNDS'', ''Encumbrance Acctg Fail'')
     AND   apl.release_lookup_code is null
     AND   apl.invoice_id=invs.invoice_id'
  );


  add_signature(g_signatures,
    184,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'aid_event_missing_in_xe.sql',
    'Invoice distributions with accounting_event_id values which are not not present in XLA',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_amount,
            aid.invoice_distribution_id,
            aid.accounting_date,
            aid.posted_flag,
            aid.accounting_event_id
     FROM ap_invoice_distributions_all aid,
          ap_invoices_all ai,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.posted_flag <> ''Y''
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.accounting_event_id is not null
     AND   NOT EXISTS (
             SELECT 1 FROM xla_events xe
             WHERE xe.event_id = aid.accounting_event_id
             AND   xe.application_id = 200)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    186,
    'INVOICE',
    'ACCOUNTING',
    '9075722',
    '',
    'awt_on_erv_fix.sql',
    'Withholding (AWT) distributions related to exchange rate variance (ERV) distributions',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id awt_dist_id,
            aid_erv.invoice_distribution_id erv_dist_id,
            aid_erv.related_id
     FROM ap_invoice_distributions_all aid,
          ap_invoice_distributions_all aid_erv,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.line_type_lookup_code = ''AWT''
     AND   aid_erv.line_type_lookup_code = ''ERV''
     AND   aid.awt_related_id = aid_erv.invoice_distribution_id
     AND   aid.awt_invoice_payment_id is not null
     AND   aid.invoice_id = aid_erv.invoice_id
     AND   aid.posted_flag <> ''Y''
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    187,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'cancel_encum_flag.sql',
    'Canceled invoices with unapproved distributions even though there are no holds on the invoice',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_amount,
            ai.invoice_date,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.encumbered_flag,
            aid.match_status_flag,
            aid.bc_event_id,
            aid.accounting_event_id,
            aid.posted_flag
     FROM ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          financials_system_params_all fsp,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.invoice_id = aid.invoice_id
     AND   fsp.purch_encumbrance_flag = ''Y''
     AND   aid.accounting_event_id is null
     AND   ai.cancelled_date is not null
     AND   fsp.org_id = ai.org_id
     AND   fsp.set_of_books_id = ai.set_of_books_id
     AND   aid.match_status_flag <> ''A''
     AND   nvl(aid.encumbered_flag, ''N'') <> ''R''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all d1
             WHERE d1.invoice_id = ai.invoice_id
             AND   d1.historical_flag is null
             AND   encumbered_flag = ''Y'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_holds_all ah
             WHERE ah.invoice_id = ai.invoice_id
             AND   ah.release_lookup_code is null)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    188,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'del_cfc_hold.sql',
    'CANT FUNDS CHECK hold on the invoice even though there are no unapproved distributions',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Invoice Holds'),
    'SELECT aph.invoice_id,
            aph.org_id,
            aph.hold_lookup_code
     FROM ap_holds_all aph,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aph.hold_lookup_code = ''CANT FUNDS CHECK''
     AND   aph.release_lookup_code is null
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = aph.invoice_id
             AND   match_status_flag ! = ''A'' )
     AND   aph.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    190,
    'INVOICE',
    'ACCOUNTING',
    '',
    '751160.1',
    'Check_Migration_Status.sql',
    'Periods containing selected transactions for which the XLA hot patch has not been run, potentially resulting in the accounting error ''Error 0 - This line cannot be Accounted till the line it references has been Accounted''',
    'If your selected transactions or related transactions are encountering the error described, please review [751160.1] and implement the solution option that best meets your needs.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT glps.period_name,
            glps.start_date,
            glps.end_date,
            glps.set_of_books_id,
            glps.application_id,
            glps.adjustment_period_flag
     FROM ap_invoices_all ai,
          gl_period_statuses glps,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.historical_flag = ''Y''
     AND   EXISTS (
             SELECT 1
             FROM ap_invoice_distributions_all aid,
                  xla_ae_headers xah
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.historical_flag = ''Y''
             AND   aid.accounting_event_id = xah.event_id
             AND   xah.accounting_entry_status_code = ''F''
             AND   xah.application_id = 200
             AND   xah.upg_batch_id is not null
             AND   xah.upg_batch_id <> -9999)
     AND   ai.gl_date BETWEEN glps.start_date AND glps.end_date
     AND   glps.set_of_books_id = ai.set_of_books_id
     AND   glps.application_id = 200
     AND   nvl(glps.adjustment_period_flag, ''N'') = ''N''
     AND   glps.migration_status_code is null
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    193,
    'INVOICE',
    'ACCOUNTING',
    '11683638',
    '',
    'ApPrepay0CorruptEvntSel.sql',
    'Zero amount prepayment application distributions with null or incorrect accounting events',
    'Generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'Y',
    impact_area_tbl('Prepay Application'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''Null Accounting_Event_ID'' category,
            ai.invoice_id,
            ai.invoice_num,
            aid.org_id,
            ai.invoice_type_lookup_code,
            ai.invoice_amount,
            ai.invoice_date,
            ail.line_number,
            ail.amount line_amount,
            ail.discarded_flag,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.amount,
            aid.base_amount,
            aid.match_status_flag,
            aid.accounting_event_id event_id,
            ''N'' budgetary_control_flag,
            aid.bc_event_id,
            aid.encumbered_flag,
            aid.posted_flag,
            aid.prepay_distribution_id,
            aid.parent_reversal_id,
            aid.reversal_flag,
            aid.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          financials_system_params_all fsp,
          ap_invoice_distributions_all aid,
          ap_invoice_lines_all ail
     WHERE aid.invoice_id = ai.invoice_id
     AND   aid.invoice_id = ail.invoice_id
     AND   aid.invoice_line_number = ail.line_number
     AND   aid.line_type_lookup_code = ''PREPAY''
     AND   nvl(ail.discarded_flag, ''N'') <> ''Y''
     AND   aid.amount = 0
     AND   aid.prepay_distribution_id is not null
     AND   ai.org_id = fsp.org_id
     AND   ((nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y'' AND
             aid.match_status_flag = ''A'') OR
            (nvl(fsp.purch_encumbrance_flag, ''N'') = ''N'' AND
             aid.match_status_flag IN (''A'', ''T'')))
     AND   aid.accounting_event_id is null
     AND   aid.posted_flag <> ''Y''
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ''Incorrect Event Type'' category,
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.invoice_amount,
            ai.invoice_date,
            ail.line_number,
            ail.amount,
            ail.discarded_flag,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.amount,
            aid.base_amount,
            aid.match_status_flag,
            aid.accounting_event_id,
            ''N'' budgetary_control_flag,
            aid.bc_event_id,
            aid.encumbered_flag,
            aid.posted_flag,
            aid.prepay_distribution_id,
            aid.parent_reversal_id,
            aid.reversal_flag,
            aid.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          financials_system_params_all fsp,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid,
          xla_events xe
     WHERE aid.invoice_id = ai.invoice_id
     AND   aid.invoice_id = ail.invoice_id
     AND   aid.invoice_line_number = ail.line_number
     AND   ail.discarded_flag = ''Y''
     AND   aid.line_type_lookup_code = ''PREPAY''
     AND   aid.amount = 0
     AND   aid.prepay_distribution_id is not null
     AND   ai.org_id = fsp.org_id
     AND   aid.accounting_event_id is not null
     AND   xe.application_id = 200
     AND   aid.accounting_event_id = xe.event_id
     AND   decode(aid.parent_reversal_id,
             null, ''PREPAYMENT APPLIED'',
             ''PREPAYMENT UNAPPLIED'') <> xe.event_type_code
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = aid.invoice_id
             AND   aid1.invoice_line_number = aid.invoice_line_number
             AND   aid1.prepay_distribution_id is not null
             AND   aid1.posted_flag <> ''Y'')
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    279,
    'INVOICE',
    'ACCOUNTING',
    '',
    '1546653.1',
    'sig_1546653_1.sql',
    'Create Accounting for Invoices fails with error number 95314: The entered amount and accounted amount for line xx are not on the same side.',
    'Follow the instructions provided in [1546653.1]',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'WITH invs AS
          (
            ##$$MIVIEW$$##
          )
     SELECT ''INVOICE'' category,
            aid.invoice_id,
            aid.description,
            aid.dist_code_combination_id,
            aid.line_type_lookup_code,
            aid.accounting_event_id,
            sum(aid.amount) amount,
            sum(aid.base_amount) base_amount
     FROM ap_invoice_distributions_all aid
     WHERE (nvl(aid.description,'' ''), aid.dist_code_combination_id,
             aid.line_type_lookup_code, aid.accounting_event_id) IN (
               SELECT nvl(aid2.description,'' ''), aid2.dist_code_combination_id,
                      aid2.line_type_lookup_code, aid2.accounting_event_id
               FROM invs,
                    ap_invoice_distributions_all aid2
               WHERE aid2.invoice_id = invs.invoice_id
               AND   aid2.posted_flag <> ''Y''
               GROUP BY nvl(aid2.description,'' ''), aid2.dist_code_combination_id,
                        aid2.line_type_lookup_code, aid2.accounting_event_id
               HAVING   sum(aid2.amount) * sum(aid2.base_amount) < 0 )
     AND   NOT EXISTS (
             SELECT ''No opp. sign dists'' FROM ap_invoice_distributions_all
             WHERE invoice_id = aid.invoice_id
             AND (amount * base_amount) < 0)
     GROUP BY aid.invoice_id, aid.description,
            aid.dist_code_combination_id, aid.line_type_lookup_code,
            aid.accounting_event_id
     UNION
     SELECT ''TAX'',
            aid.invoice_id,
            aid.description,
            aid.dist_code_combination_id,
            aid.line_type_lookup_code,
            aid.accounting_event_id,
            sum(aid.amount) amount,
            sum(aid.base_amount) base_amount
     FROM ap_self_assessed_tax_dist_all aid
     WHERE (nvl(aid.description,'' ''), aid.dist_code_combination_id,
             aid.line_type_lookup_code, aid.accounting_event_id) IN (
               SELECT nvl(aid2.description,'' ''), aid2.dist_code_combination_id,
                      aid2.line_type_lookup_code, aid2.accounting_event_id
               FROM invs,
                    ap_self_assessed_tax_dist_all aid2
               WHERE aid2.invoice_id = invs.invoice_id
               AND   aid2.posted_flag <> ''Y''
               GROUP BY nvl(aid2.description,'' ''), aid2.dist_code_combination_id,
                        aid2.line_type_lookup_code, aid2.accounting_event_id
               HAVING sum(aid2.amount) * sum(aid2.base_amount) < 0 )
     AND   NOT EXISTS (
             SELECT ''No opp. sign dists''
             FROM ap_self_assessed_tax_dist_all
             WHERE invoice_id=aid.invoice_id
             AND (amount * base_amount) < 0)
     GROUP BY aid.invoice_id, aid.description,
            aid.dist_code_combination_id, aid.line_type_lookup_code,
            aid.accounting_event_id'
  );


  add_signature(g_signatures,
    294,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'ap_prep_apad_terv_sel.sql',
    'Accounting fails for prepayment application events if prepay application distributions are prorated against tax exchange rate variance lines (TERV).',
    'Apply the root cause fix from bug {10181254} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT apph.invoice_id,
            apph.transaction_type,
            apph.accounting_event_id,
            apph.posted_flag,
            apph.invoice_line_number,
            apph.prepay_invoice_id,
            apph.prepay_line_num
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid,
          ap_prepay_app_dists apad,
          ap_prepay_history_all apph
     WHERE aid.invoice_id = invs.invoice_id
     AND   apad.prepay_history_id = apph.prepay_history_id
     AND   apph.posted_flag <> ''Y''
     AND   apad.invoice_distribution_id = aid.invoice_distribution_id
     AND   aid.line_type_lookup_code = ''TERV'''
  );


  add_signature(g_signatures,
    295,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'ap_prep_cash_bzns_code_sel.sql',
    'For cash basis accounting, tax journal lines created for the payment accounting of the prepayment invoice are missing the business class code, causing issues while accounting the prepayment application events.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT aip_prepay.invoice_id,
         xal.ae_header_id,
         xal.ae_line_num,
         xal.accounting_class_code,
         xal.business_class_code,
         xal.accounting_date,
         xal.ledger_id,
         xal.gl_sl_link_id,
         xal.party_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_prepay_history_all aph,
          ap_invoices_all ai_prepay,
          ap_invoice_distributions_all aid_prepay,
          ap_invoice_payments_all aip_prepay,
          gl_ledgers gl,
          xla_ae_headers xah,
          xla_ae_lines xal
     WHERE ai_prepay.invoice_id = invs.invoice_id
     AND   aph.posted_flag <>''Y''
     AND   aph.prepay_invoice_id = aid_prepay.invoice_id
     AND   aph.prepay_invoice_id = ai_prepay.invoice_id
     AND   ai_prepay.invoice_type_lookup_code = ''PREPAYMENT''
     AND   aid_prepay.posted_flag = ''Y''
     AND   aid_prepay.invoice_id = aip_prepay.invoice_id
     AND   aip_prepay.posted_flag = ''Y''
     AND   aip_prepay.accounting_event_id = xah.event_id
     AND   xah.application_id = 200
     AND   xal.application_id = 200
     AND   xah.ae_header_id = xal.ae_header_id
     AND   xal.accounting_class_code IN (''NRTAX'',''RTAX'',
             ''PREPAID_EXPENSE'')
     AND   xal.business_class_code is null
     AND   xah.ledger_id = gl.ledger_id
     AND   gl.sla_accounting_method_code like ''%CASH%'''
  );


  add_signature(g_signatures,
    296,
    'INVOICE',
    'ACCOUNTING',
    '20317799',
    '2149693.1',
    'ap_prep_unap_apd_invld_sel.sql',
    'Prepayment unapplication events will not account because the prepay application distributions for the corresponding application have been deleted and recreated after they were accounted. This causes the line level reversal for the prepayment unapplication to fail to account.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT DISTINCT
           phu.invoice_id,
           phu.prepay_invoice_id,
           phu.accounting_event_id,
           phu.prepay_history_id,
           pha.accounting_event_id app_acct_event_id,
           pha.prepay_history_id app_prepay_hist_id
      FROM (
             ##$$IVIEW$$##
           ) invs,
           ap_prepay_history_all pha,
           ap_prepay_history_all phu,
           ap_prepay_app_dists   ada,
           ap_prepay_app_dists   adu,
           xla_events xea,
           xla_events xeu
     WHERE pha.invoice_id = invs.invoice_id
     AND   phu.prepay_history_id = adu.prepay_history_id
     AND   pha.prepay_history_id = ada.prepay_history_id
     AND   phu.invoice_id = pha.invoice_id
     AND   phu.invoice_line_number = pha.invoice_line_number
     AND   pha.transaction_type = ''PREPAYMENT APPLIED''
     AND   phu.transaction_type = ''PREPAYMENT UNAPPLIED''
     AND   pha.accounting_event_id = xea.event_id
     AND   xea.application_id = 200
     AND   phu.accounting_event_id = xeu.event_id
     AND   xeu.application_id = 200
     AND   xea.event_status_code = ''P''
     AND   xeu.event_status_code <> ''P''
     AND   xea.event_type_code = ''PREPAYMENT APPLIED''
     AND   xeu.event_type_code = ''PREPAYMENT UNAPPLIED''
     AND   adu.reversed_prepay_app_dist_id = ada.prepay_app_dist_id
     AND   NOT EXISTS (
             SELECT 1 FROM xla_distribution_links xdl
             WHERE xdl.application_id = 200
             AND   xdl.source_distribution_type = ''AP_PREPAY''
             AND   xdl.source_distribution_id_num_1 = ada.prepay_app_dist_id
             AND   xdl.event_id = ada.accounting_event_id)'
  );


  add_signature(g_signatures,
    298,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'ap_prep_x_fnl_appl_rnd_sel.sql',
    'Very large rounding lines incorrectly created during final application for prepay events.',
    'Apply the root cause fixes from bug {9256922} or {10183934} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.accounting_event_id,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            apad.prepay_dist_lookup_code,
            apad.prepay_app_dist_id,
            apad.amount prepay_app_dist_amt,
            apad.base_amount prepay_app_dist_base_amt,
            apad.base_amt_at_prepay_xrate
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_prepay_app_dists apad,
          ap_invoice_distributions_all aid,
          ap_prepay_history_all apph
     WHERE aid.invoice_id = invs.invoice_id
     AND   apad.prepay_dist_lookup_code LIKE ''FINAL APPL ROUNDING''
     AND   apad.prepay_history_id = apph.prepay_history_id
     AND   abs(apad.base_amt_at_prepay_xrate) > 5
     AND   apad.prepay_app_distribution_id = aid.invoice_distribution_id
     AND   aid.prepay_distribution_id is not null
     AND   aid.line_type_lookup_code IN (''PREPAY'',
             ''REC_TAX'', ''NONREC_TAX'')
     AND   aid.invoice_id = apph.invoice_id
     AND   aid.invoice_line_number = apph.invoice_line_number
     AND   aid.accounting_event_id = apph.accounting_event_id
     AND   EXISTS (
             SELECT 1
             FROM ap_prepay_app_dists apad_old,
                  ap_invoice_distributions_all aid_old,
                  ap_prepay_history_all apph_old
             WHERE apad_old.prepay_history_id = apph_old.prepay_history_id
             AND   apph_old.prepay_invoice_id = apph.prepay_invoice_id
             AND   apph_old.prepay_line_num = apph.prepay_line_num
             AND   apph_old.invoice_id = aid_old.invoice_id
             AND   apph_old.invoice_line_number = aid_old.invoice_line_number
             AND   apph_old.accounting_event_id = aid_old.accounting_event_id
             AND   aid_old.prepay_distribution_id is not null
             AND   aid_old.line_type_lookup_code IN (''PREPAY'',
                     ''REC_TAX'',''NONREC_TAX'')
             AND   aid.prepay_distribution_id = aid_old.prepay_distribution_id
             AND   apad_old.base_amt_at_prepay_xrate is null
             AND   nvl(aid_old.historical_flag, ''N'') = ''Y''
             AND   nvl(apph_old.historical_flag, ''N'') = ''Y'')'
  );


  add_signature(g_signatures,
    307,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'ap_x_pp_exp_enc_rev_acct_s.sql',
    'The incorrect account is charged for prepay application encumbrance reversal accounting.',
    'Apply the root cause fix from bug {13620905} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            apad.prepay_app_dist_id,
            apad.invoice_distribution_id,
            aid.dist_code_combination_id,
            xal.ae_header_id,
            xal.ae_line_num,
            xal.code_combination_id,
            xal.accounting_class_code,
            xal.entered_dr,
            xal.entered_cr,
            xal.upg_batch_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          xla_ae_headers xah,
          xla_events xe,
          xla_transaction_entities_upg xte,
          xla_ae_lines xal,
          xla_distribution_links xdl,
          ap_prepay_app_dists apad,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   nvl(xe.upg_batch_id, -9999) = -9999
     AND   xe.budgetary_control_flag = ''N''
     AND   xe.application_id = 200
     AND   xte.entity_id = xe.entity_id
     AND   xte.application_id = 200
     AND   xah.application_id = xe.application_id
     AND   xah.event_id = xe.event_id
     AND   xah.balance_type_code = ''E''
     AND   xah.ledger_id = xte.ledger_id
     AND   xah.ae_header_id = xal.ae_header_id
     AND   xal.application_id = xah.application_id
     AND   xal.accounting_class_code = ''PREPAID_EXPENSE''
     AND   xal.ae_header_id = xdl.ae_header_id
     AND   xal.ae_line_num = xdl.ae_line_num
     AND   xdl.application_id = xal.application_id
     AND   xdl.source_distribution_type = ''AP_PREPAY''
     AND   xdl.source_distribution_id_num_1 = apad.prepay_app_dist_id
     AND   apad.prepay_app_distribution_id = aid.invoice_distribution_id
     AND   aid.prepay_distribution_id is not null
     AND   aid.dist_code_combination_id <> xal.code_combination_id'
  );


  add_signature(g_signatures,
    308,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'cm_tqv_no_rev_sel.sql',
    'Invoices have incorrect quantity variance reversals, resulting in incorect encumbrance accounting.',
    'Apply the root cause fix from bug {12362963} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT ai.invoice_id,
            ai.invoice_type_lookup_code,
            ai.invoice_date,
            ai.invoice_amount,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.amount,
            aid.base_amount,
            aid.match_status_flag,
            aid.encumbered_flag,
            aid.posted_flag,
            aid.bc_event_id,
            aid.accounting_event_id event_id,
            aid.org_id,
            aid.set_of_books_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          financials_system_params_all fsp,
          po_distributions_all pod,
          po_line_locations_all pll,
          xla_events xe,
          xla_ae_headers xah,
          xla_distribution_links xdl
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_type_lookup_code = ''CREDIT''
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.quantity_variance is not null
     AND   aid.org_id = fsp.org_id
     AND   nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y''
     AND   aid.line_type_lookup_code IN (''NONREC_TAX'', ''TRV'')
     AND   aid.po_distribution_id = pod.po_distribution_id
     AND   pod.line_location_id = pll.line_location_id
     AND   nvl(pll.accrue_on_receipt_flag, ''N'') = ''N''
     AND   aid.bc_event_id = xe.event_id
     AND   xe.budgetary_control_flag = ''Y''
     AND   xe.application_id = 200
     AND   xe.event_id = xah.event_id
     AND   xe.event_status_code = ''P''
     AND   xah.application_id = 200
     AND   xah.balance_type_code = ''E''
     AND   xah.ae_header_id = xdl.ae_header_id
     AND   xdl.application_id = 200
     AND   xdl.source_distribution_type = ''AP_INV_DIST''
     AND   xdl.source_distribution_id_num_1 = aid.invoice_distribution_id
     AND   xdl.accounting_line_code = ''AP_QUANTITY_VARIANCE_CM_ENC_DR''
     AND   nvl(xdl.unrounded_entered_dr, xdl.unrounded_entered_cr) <> 0
     AND   aid.posted_flag = ''Y''
     AND   NOT EXISTS (
             SELECT /*+ index(xdl1 XLA_DISTRIBUTION_LINKS_N1) */ 1
             FROM xla_distribution_links xdl1,
                  xla_ae_headers xah1,
                  xla_events xe1
             WHERE xe1.application_id = 200
             AND   xdl1.application_id = 200
             AND   xdl1.source_distribution_type = ''AP_INV_DIST''
             AND   xdl1.source_distribution_id_num_1 = aid.invoice_distribution_id
             AND   xdl1.accounting_line_code = ''AP_TAX_QTY_VARIANCE_CM_ENC''
             AND   xdl1.ae_header_id = xah1.ae_header_id
             AND   xah1.balance_type_code = ''E''
             AND   xah1.event_id = xe1.event_id
             AND   nvl(xe1.budgetary_control_flag, ''N'') = ''N'')'
  );


  add_signature(g_signatures,
    309,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'ap_erv_accrual_diff_liab_ccid.txt',
    'When automatic offsets are enabled on the balancing segment, different liability accounts are being charged for exchange rate variance (ERV) and their related distributions. This causes problems with the trial balance.',
    'Apply the root cause fix from bug {13508145} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Trial Balance'),
    'SELECT aidv.invoice_id,
            aidv.invoice_distribution_id var_dist_id,
            aidv.line_type_lookup_code var_line_type,
            aidv.amount var_amount,
            aidv.base_amount var_base_amount,
            aidv.accounting_event_id var_event_id,
            aidr.invoice_distribution_id related_dist_id,
            aidr.line_type_lookup_code related_line_type,
            aidr.amount related_dist_amount,
            aidr.base_amount related_base_amount,
            aidr.accounting_event_id related_dist_event_id,
            xdlv.ae_header_id,
            xdlv.ae_line_num,
            xalv.entered_dr,
            xalv.entered_cr,
            xalv.accounted_dr,
            xalv.accounted_cr,
            xalv.ledger_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aidv ,
          ap_invoice_distributions_all aidr,
          xla_distribution_links xdlv,
          xla_ae_lines xalv,
          xla_distribution_links xdlr,
          xla_ae_lines xalr
     WHERE aidv.invoice_id = invs.invoice_id
     AND   aidv.invoice_id = aidr.invoice_id
     AND   aidv.related_id = aidr.invoice_distribution_id
     AND   aidv.invoice_distribution_id <> aidr.invoice_distribution_id
     AND   aidv.line_type_lookup_code IN (''ERV'', ''TERV'')
     AND   xdlv.application_id = 200
     AND   xdlv.source_distribution_type = ''AP_INV_DIST''
     AND   xdlv.source_distribution_id_num_1 = aidv.invoice_distribution_id
     AND   xdlv.accounting_line_code LIKE ''%LIAB%''
     AND   xalv.application_id = xdlv.application_id
     AND   xalv.ae_header_id = xdlv.ae_header_id
     AND   xalv.ae_line_num = xdlv.ae_line_num
     AND   xalv.accounting_class_code LIKE ''LIABILITY''
     AND   xdlr.application_id = 200
     AND   xdlr.source_distribution_type = ''AP_INV_DIST''
     AND   xdlr.source_distribution_id_num_1 = aidr.invoice_distribution_id
     AND   xdlr.accounting_line_code LIKE ''%LIAB%''
     AND   xalr.application_id = xdlr.application_id
     AND   xalr.ae_header_id = xdlr.ae_header_id
     AND   xalr.ae_line_num = xdlr.ae_line_num
     AND   xalr.accounting_class_code LIKE ''LIABILITY''
     AND   xalv.ledger_id = xalr.ledger_id
     AND   xalv.code_combination_id <> xalr.code_combination_id'
  );


  add_signature(g_signatures,
    310,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'prepay_event_rev_item_enc_accrual_sel.sql',
    'Encumbrance reversals for prepayment application or unapplication events are cretating item encumbrance reversals in non-cash ledgers.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Prepay Application'),
    'SELECT d.accounting_event_id event_id,
            d.invoice_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all d,
          xla_ae_headers h,
          gl_ledgers gld
     WHERE d.invoice_id = invs.invoice_id
     AND   d.posted_flag = ''Y''
     AND   d.accounting_event_id = h.event_id
     AND   d.prepay_distribution_id is not null
     AND   nvl(d.historical_flag , ''N'') != ''Y''
     AND   h.application_id = 200
     AND   h.balance_type_code = ''E''
     AND   d.set_of_books_id = gld.ledger_id
     AND   gld.sla_ledger_cash_basis_flag != ''Y''
     AND   EXISTS (
             SELECT 1 FROM xla_ae_lines l
             WHERE l.application_id = 200
             AND   l.ae_header_id = h.ae_header_id
             AND   l.accounting_class_code = ''ITEM EXPENSE''
             AND   L.Business_Class_Code = ''AP_INV_ENCUM'')'
  );


  add_signature(g_signatures,
    313,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'unenc_inv_released_hold_fix.txt',
    'Invoices which have not been encumbered because the encumbrance accounting hold was released manually.',
    'Apply the root cause fix from bug {11662550} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.invoice_amount,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.amount,
            aid.base_amount,
            aid.line_type_lookup_code,
            aid.match_status_flag,
            aid.bc_event_id,
            aid.accounting_event_id,
            aid.encumbered_flag,
            aid.posted_flag,
            ai.cancelled_date,
            aid.org_id,
            aid.set_of_books_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          po_distributions_all pod,
          po_line_locations_all pll,
          financials_system_params_all fsp
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.org_id = fsp.org_id
     AND   fsp.purch_encumbrance_flag = ''Y''
     AND   aid.po_distribution_id = pod.po_distribution_id(+)
     AND   pod.line_location_id = pll.line_location_id(+)
     AND   aid.amount <> 0
     AND   aid.line_type_lookup_code <> ''REC_TAX''
     AND   (aid.po_distribution_id is null OR
            nvl(pll.accrue_on_receipt_flag, ''N'') = ''N'')
     AND   aid.match_status_flag = ''A''
     AND   NOT EXISTS (
             SELECT 1 FROM xla_events xe
             WHERE xe.event_id = aid.bc_event_id
             AND   xe.application_id = 200
             AND   xe.event_status_code = ''P''
             AND   xe.process_status_code = ''P'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_encumbrance_lines_all ael
             WHERE ael.invoice_distribution_id = aid.invoice_distribution_id
             AND   aid.encumbered_flag = ''Y'')
     AND   EXISTS (
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.hold_lookup_code = ''Encumbrance Acctg Fail''
             AND   aha.release_lookup_code is not null
             AND   aha.release_lookup_code <> ''Encumbrance Acctg Ok'')'
  );


  add_signature(g_signatures,
    315,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'ap_fnl_apl_rndg_def_tx_sel.sql',
    'Prepay application accounting fails when final application rounding has been calculated on a deferred recoverable tax distribution and it is unable to find a required business flow item on the prepayment invoice''s payment.',
    'Apply the root cause fix from bug {13705794} (on 12.1) or bug {14113056} (on 12.0) if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT apad.prepay_app_dist_id,
            apph.invoice_id,
            apad.prepay_dist_lookup_code,
            xal.ae_header_id,
            xal.ae_line_num,
            xal.code_combination_id,
            xal.accounting_class_code,
            xdl.source_distribution_id_num_1,
            xdl.source_distribution_type,
            xdl.accounting_line_code,
            apad.amount,
            apad.base_amount,
            apad.base_amt_at_prepay_xrate,
            zxd.rec_nrec_tax_dist_id,
            zxd.def_rec_settlement_option_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aidp,
          ap_prepay_app_dists apad,
          ap_prepay_history_all apph,
          xla_distribution_links xdl,
          xla_ae_lines xal,
          zx_rec_nrec_dist zxd
     WHERE aidp.invoice_id = invs.invoice_id
     AND   apad.prepay_app_dist_id = xdl.source_distribution_id_num_1
     AND   apad.prepay_dist_lookup_code = ''FINAL APPL ROUNDING''
     AND   apad.prepay_history_id = apph.prepay_history_id
     AND   apph.posted_flag <> ''Y''
     AND   xdl.source_distribution_type = ''AP_PREPAY''
     AND   xdl.application_id = 200
     AND   xdl.application_id = xal.application_id
     AND   xal.ae_header_id = xdl.ae_header_id
     AND   xal.ae_line_num = xdl.ae_line_num
     AND   xal.application_id = xdl.application_id
     AND   xal.accounting_class_code = ''PREPAID_EXPENSE''
     AND   xal.code_combination_id = -1
     AND   apad.prepay_app_distribution_id = aidp.invoice_distribution_id
     AND   apad.accounting_event_id = aidp.accounting_event_id
     AND   aidp.line_type_lookup_code = ''REC_TAX''
     AND   zxd.application_id = 200
     AND   zxd.event_class_code IN (''STANDARD INVOICES'',''EXPENSE REPORTS'')
     AND   zxd.entity_code = ''AP_INVOICES''
     AND   zxd.rec_nrec_tax_dist_id = aidp.detail_tax_dist_id
     AND   zxd.def_rec_settlement_option_code = ''DEFERRED'''
  );


  add_signature(g_signatures,
    328,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'ap_inv_enc_acc_setup_change.sql',
    'An invoice validation event is accounted using Encumbrance Cash accounting setup. Subsequently the setup is changed to use Accrual Basis accounting and the invoice is cancelled. Since there are no parent distributions links in XLA_DISTRIBUTION_LINKS for the original validation event, the cancelled event fails to get accounted.',
    'Diagnostic information only. Please generate the APLIST output for affected invoices and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_type_lookup_code,
            ai.invoice_date,
            ai.invoice_amount,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aid.accounting_event_id,
            aid.invoice_distribution_id,
            ai.org_id,
            xe.event_id,
            xe.event_type_code,
            xte.source_id_int_1 invoice_id,
            xte.transaction_number,
            xe.transaction_date,
            xte.entity_code source_type,
            xte.ledger_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          gl_ledgers gl,
          xla_events xe,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   nvl(xte.source_id_int_1,-99) = ai.invoice_id
     AND   xte.ledger_id = ai.set_of_books_id
     AND   gl.ledger_id = xte.ledger_id
     AND   nvl(gl.sla_ledger_cash_basis_flag, ''N'') = ''N''
     AND   xe.entity_id = xte.entity_id
     AND   xe.application_id = xte.application_id
     AND   xe.event_type_code LIKE ''INVOICE%CANCELLED''
     AND   xe.event_status_code <> ''P''
     AND   xe.budgetary_control_flag = ''N''
     AND   aid.invoice_id = ai.invoice_id
     AND   EXISTS (
             SELECT 1 FROM xla_events xe1
             WHERE xe1.application_id = 200
             AND   xe1.event_type_code LIKE ''INVOICE%VALIDATED''
             AND   xe1.entity_id = xe.entity_id
             AND   xe1.budgetary_control_flag = ''N''
             AND   xe1.event_status_code = ''P''
             AND   EXISTS (
                     SELECT 1 FROM ap_invoice_distributions_all aid
                     WHERE aid.accounting_event_id = xe1.event_id
                     AND   aid.cash_posted_flag = ''Y'')
             AND   NOT EXISTS (
                     SELECT 1 FROM xla_ae_headers xah1
                     WHERE xah1.application_id = 200
                     AND   xah1.event_id = xe1.event_id
                     AND   xah1.accounting_entry_status_code = ''F''))'
  );


  add_signature(g_signatures,
    331,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'ap_gl_trnsfr_ec13_sel.sql',
    'GL Transfer fails with exception EC13 due to very large amounts on the accounting lines.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('GL Transfer'),
    'SELECT /* leading (invs) */
         ai.invoice_id,
         ai.invoice_num,
         ai.invoice_date,
         ai.org_id,
         xah.ae_header_id,
         xah.entity_id,
         xah.gl_transfer_status_code,
         xal.ae_header_id,
         xal.ae_line_num,
         xal.entered_dr,
         xal.entered_cr,
         xal.accounted_dr,
         xal.accounted_cr
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          xla_ae_lines xal
     WHERE ai.invoice_id = invs.invoice_id
     AND   xte.ledger_id = ai.set_of_books_id
     AND   ai.cancelled_date is not null
     AND   ai.invoice_amount = 0
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   xah.application_id = xte.application_id
     AND   xah.entity_id = xte.entity_id
     AND   xah.gl_transfer_status_code = ''N''
     AND   xal.application_id = 200
     AND   (nvl(xal.entered_dr,xal.entered_cr) >= 1000000000000000000000000 OR
            nvl(xal.accounted_dr,xal.accounted_cr) >= 1000000000000000000000000)
     AND   NOT EXISTS (
             SELECT 1 FROM xla_ae_headers xah1
             WHERE xah1.application_id = 200
             AND   xah1.entity_id = xte.entity_id
             AND   xah1.gl_transfer_status_code = ''Y'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   awt_invoice_payment_id is null
             AND   posted_flag <> ''Y'')'
  );


  add_signature(g_signatures,
    332,
    'INVOICE',
    'ACCOUNTING',
    '',
    '1307103.1',
    'ap_incor_relatedid_sel.sql',
    'Tax Rate Variance (TRV) and Tax Exchange Rate Variance (TERV) distributions have a RELATED_ID which points to the TERV distribution causing incorrect accounting and issues with the trial balance.',
    'Apply the root cause fix from bug {9504351} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'Trial Balance'),
    'SELECT aid_trv.invoice_id,
            aid_trv.invoice_distribution_id trv_inv_dist_id,
            aid_trv.related_id trv_related_id,
            aid_trv.line_type_lookup_code trv_line_type_lookup_code,
            aid_terv.invoice_distribution_id terv_inv_dist_id,
            aid_terv.related_id terv_related_id,
            aid_trv.posted_flag,
            aid_trv.detail_tax_dist_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid_trv,
          ap_invoice_distributions_all aid_terv
     WHERE aid_trv.invoice_id = invs.invoice_id
     AND   aid_trv.line_type_lookup_code IN (''TRV'',''TIPV'',''NONREC_TAX'')
     AND   aid_terv.line_type_lookup_code = ''TERV''
     AND   aid_trv.invoice_id = aid_terv.invoice_id
     AND   aid_trv.detail_tax_dist_id = aid_terv.detail_tax_dist_id
     AND   aid_trv.related_id = aid_terv.invoice_distribution_id'
  );


  add_signature(g_signatures,
    334,
    'INVOICE',
    'ACCOUNTING',
    '',
    '1334907.1',
    'AP_MAN_RR_CANC_INV_SEL.sql',
    'Retainage Release lines created manually do not hold Retainage details and therefore cannot be accounted.',
    'Apply the root cause fix from bug {11716947} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.cancelled_date,
            ail.line_number,
            ail.line_type_lookup_code,
            ail.line_source,
            aid.invoice_distribution_id,
            aid.reversal_flag,
            aid.retained_invoice_dist_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_type_lookup_code = ''RETAINAGE RELEASE''
     AND   ai.cancelled_date is not null
     AND   ai.invoice_id = ail.invoice_id
     AND   ail.invoice_id = aid.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     AND   nvl(ai.historical_flag,''N'') <> ''Y''
     AND   ail.line_type_lookup_code = ''RETAINAGE RELEASE''
     AND   ail.line_source = ''MANUAL LINE ENTRY''
     AND   aid.reversal_flag = ''Y''
     AND   aid.retained_invoice_dist_id is null'
  );


  add_signature(g_signatures,
    344,
    'INVOICE',
    'ACCOUNTING',
    '',
    '1540013.1',
    'ap_upgevt_msng_doc_seq_sel.sql Invoices',
    'Document sequence and value are null on upgraded events which had these values populated in 11i.',
    'Apply the root cause fix from bug {16711745} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ ordered */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aeh.accounting_event_id,
            aeh.ae_header_id,
            xah.doc_sequence_id,
            xah.doc_sequence_value,
            max(subledger_doc_sequence_id) subledger_doc_sequence_id,
            max(subledger_doc_sequence_value) subledger_doc_sequence_value
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          ap_ae_headers_all aeh,
          ap_ae_lines_all ael
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(xte.source_id_int_1,-99) = ai.invoice_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.ledger_id = ai.set_of_books_id
     AND   (ael.subledger_doc_sequence_id is not null OR
            ael.subledger_doc_sequence_value is not null)
     AND   aeh.ae_header_id = ael.ae_header_id
     AND   xah.completion_acct_seq_value = aeh.ae_header_id
     AND   xah.event_id = aeh.accounting_event_id
     AND   xah.upg_batch_id is not null
     AND   xah.upg_batch_id <> -9999
     AND   (xah.doc_sequence_id is null OR
            xah.doc_sequence_value is null)
     AND   xte.application_id = xah.application_id
     AND   xte.entity_id = xah.entity_id
     GROUP BY ai.invoice_id, ai.invoice_num, ai.invoice_date, ai.org_id,
              aeh.accounting_event_id, aeh.ae_header_id,
              xah.doc_sequence_id, xah.doc_sequence_value'
  );


  add_signature(g_signatures,
    366,
    'INVOICE',
    'ACCOUNTING',
    '14580313',
    '',
    'ap_prep_appl_adj_enc_rev_s.sql',
    'Prepayment application adjustment events have gotten encumbrance reversal headers created during accounting.',
    'Apply the root cause fix from bug {14580313} when available if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT apph.invoice_id,
            apph.accounting_event_id,
            apph.transaction_type
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_prepay_history_all apph
     WHERE apph.invoice_id = invs.invoice_id
     AND   apph.transaction_type = ''PREPAYMENT APPLICATION ADJ''
     AND   EXISTS (
             SELECT 1 FROM xla_ae_headers xah
             WHERE xah.event_id = apph.accounting_event_id
             AND xah.balance_type_code = ''E''
             AND xah.application_id = 200)'
  );


  add_signature(g_signatures,
    384,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'ap_aid_null_event_for_awt_sel.sql',
    'Automatic Witholding Tax (AWT) lines have distributions with null accounting_event_id',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT DISTINCT
            aid.awt_invoice_payment_id,
            aip.invoice_payment_id,
            aip.accounting_event_id,
            aid.invoice_id,
            aip.posted_flag,
            aip.accounting_date,
            aip.check_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_diStributionS_all aid,
          ap_invoice_paymentS_all aip
     WHERE aid.invoice_id = invs.invoice_id
     AND   aip.invoice_id=aid.invoice_id
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_invoice_payment_id is not null
     AND   aid.accounting_event_id is null
     AND   aid.awt_invoice_payment_id=aip.invoice_payment_id
     AND   aip.reversal_inv_pmt_id is null
     AND   EXISTS(
             SELECT ''PAYMENT CREATED'' FROM ap_payment_history_all aph
             WHERE aph.check_id=aip.check_id
             AND   aph.tranSaction_type = ''PAYMENT CREATED'')'
  );


  add_signature(g_signatures,
    390,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'sla_hotpatch_err_diag_inv.sql',
    'The SLA hotpatch is failing with "ORA-00001: unique constraint (XLA.XLA_DISTRIBUTION_LINKS_U1) violated" when running apxlainv.sql.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.gl_date,
            ai.set_of_books_id,
            dbms_rowid.rowid_create(
              1,
              u.data_object_id,
              u.relative_fno,
              u.start_block,
              0) start_rowid ,
            dbms_rowid.rowid_create(
              1,
              u.data_object_id,
              u.relative_fno,
              u.end_block,
              9999) end_rowid
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_upgrade_dates upg,
          ad_parallel_update_units u
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.rowid BETWEEN
             dbms_rowid.rowid_create(
               1, u.data_object_id, u.relative_fno, u.start_block, 0) AND
             dbms_rowid.rowid_create(
               1, u.data_object_id, u.relative_fno, u.end_block, 9999)
     AND   upg.ledger_id = ai.set_of_books_id
     AND   trunc(ai.gl_date) BETWEEN upg.start_date AND upg.end_date
     AND   u.update_id IN (
             SELECT pu.update_id FROM ad_parallel_updates pu
             WHERE pu.table_name = ''AP_INVOICES_ALL''
             AND pu.script_name LIKE ''apxlainv.sql%'')
     AND   u.status != ''P'''
  );


  add_signature(g_signatures,
    392,
    'INVOICE',
    'ACCOUNTING',
    '',
    '',
    'sla_ondemand_upg_err_diag_inv.sql',
    'The Upgrade Historical Subledger Transaction Accounting program errors with "ORA-00001: unique constraint (XLA.XLA_DISTRIBUTION_LINKS_U1) violated"',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.gl_date,
            ai.set_of_books_id,
            dbms_rowid.rowid_create(
              1, u.data_object_id, u.relative_fno, u.start_block, 0) start_rowid,
           dbms_rowid.rowid_create(
              1, u.data_object_id, u.relative_fno, u.end_block, 9999) end_rowid
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_upgrade_dates upg,
          ad_parallel_update_units u
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.rowid BETWEEN
             dbms_rowid.rowid_create(
               1, u.data_object_id, u.relative_fno, u.start_block, 0) AND
             dbms_rowid.rowid_create(
               1, u.data_object_id, u.relative_fno, u.end_block, 9999)
     AND   upg.ledger_id = ai.set_of_books_id
     AND   trunc(ai.gl_date) BETWEEN upg.start_date AND upg.end_date
     AND   u.update_id IN (
             SELECT ad_par.update_id FROM ad_parallel_updates ad_par
             WHERE ad_par.table_name = ''AP_INVOICES_ALL''
             AND ad_par.script_name LIKE ''apidstln.sql%'')
     AND u.status != ''P'''
  );


  add_signature(g_signatures,
    438,
    'INVOICE',
    'ACCOUNTING',
    '',
    '1359966.1',
    'ap_custom_prc_jld_jlt.sql Invoice',
    'Custom subledger accounting method components have been detected.',
    'Review your modifications/customizations.  See [1359966.1] to determine if there was a bug fix or change implemented for your component, and correct your customized component accordingly. Also verify in a test instance whether using the seeded application accounting definition (AAD) results in the same issue to confirm the cause.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure', 'Accounting Incorrect', 'Trial Balance'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''Product Rule Code'' component_type,
            xah.product_rule_code "Code",
            xah.ledger_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah
     WHERE ai.invoice_id = invs.invoice_id
     AND   xte.application_id = 200
     AND   xte.ledger_id = ai.set_of_books_id
     AND   nvl( xte.source_id_int_1, - 99 ) = ai.invoice_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.entity_id = xah.entity_id
     AND   xah.application_id = 200
     AND   xah.product_rule_type_code = ''C''
     UNION ALL
     SELECT ''Journal Line Definition'',
            xdl.line_definition_code,
            xah.ledger_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          xla_distribution_links xdl
     WHERE ai.invoice_id = invs.invoice_id
     AND   xte.application_id = 200
     AND   xte.ledger_id = ai.set_of_books_id
     AND   nvl( xte.source_id_int_1, - 99 ) = ai.invoice_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.entity_id = xah.entity_id
     AND   xah.application_id = 200
     AND   xdl.ae_header_id = xah.ae_header_id
     AND   xdl.line_definition_owner_code = ''C''
     AND   xdl.application_id = 200
     UNION ALL
     SELECT ''Journal Line Type'',
           xdl.accounting_line_code,
           xah.ledger_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          xla_distribution_links xdl
     WHERE ai.invoice_id = invs.invoice_id
     AND   xte.application_id = 200
     AND   xte.ledger_id = ai.set_of_books_id
     AND   nvl( xte.source_id_int_1, - 99 ) = ai.invoice_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.entity_id = xah.entity_id
     AND   xah.application_id = 200
     AND   xdl.ae_header_id = xah.ae_header_id
     AND   xdl.accounting_line_type_code = ''C''
     AND   xdl.application_id = 200'
  );


  add_signature(g_signatures,
    442,
    'INVOICE',
    'ACCOUNTING',
    '20132902',
    '1316316.1',
    'zx_rec_nrec_inv_acct.sql',
    'Create Accounting process errors because the accounted amount and entered amount for the subledger journal entry line have different signs',
    'Apply the Root Cause fix from bug {20132902} if you have not done so, and follow section #50 of [1316316.1] and log a service request to obtain the Data fix',
    'N',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+ ordered use_nl(dist) */
         ai.invoice_num,
         ai.org_id,
         ai.invoice_id,
         dist.application_id,
         dist.entity_code,
         dist.event_class_code,
         dist.rec_nrec_tax_dist_id,
         dist.reverse_flag,
         dist.reversed_tax_dist_id,
         dist.historical_flag,
         dist.creation_date,
         dist.rec_nrec_tax_amt,
         dist.rec_nrec_tax_amt_tax_curr,
         dist.rec_nrec_tax_amt_funcl_curr
  FROM (
         ##$$IVIEW$$##
       ) invs,
       ap_invoices_all ai,
       (
         SELECT /*+ materialize */
                nvl((
                  SELECT MIN(pr.end_date)
                  FROM ad_appl_tops at,
                       ad_applied_patches aap,
                       ad_patch_drivers pd,
                       ad_patch_runs pr,
                       ad_patch_run_bugs prb,
                       ad_file_versions afv,
                       ad_patch_run_bug_actions prba,
                       ad_files f
                  WHERE f.app_short_name = ''ZX''
                  AND   f.subdir = ''patch/115/sql''
                  AND   f.filename = ''zxdiroundtaxpkgb.pls''
                  AND   f.file_id = prba.file_id
                  AND   prba.executed_flag = ''Y''
                  AND   prba.patch_run_bug_id = prb.patch_run_bug_id
                  AND   pr.appl_top_id = at.appl_top_id
                  AND   prb.patch_run_id = pr.patch_run_id
                  AND   pr.patch_driver_id = pd.patch_driver_id
                  AND   pd.applied_patch_id = aap.applied_patch_id
                  AND   prba.patch_file_version_id = afv.file_version_id
                  AND   to_number(nvl(afv.version_segment4, afv.VERSION_SEGMENT2)) > =
                          to_number(
                            decode(afv.version_segment3,
                              12020000, 13,
                              12010000, 32,
                              12000000, 50,
                              afv.version_segment2))),
                  sysdate) AS applied_date
         FROM dual
       ) ptch,
    zx_rec_nrec_dist dist
  WHERE ai.invoice_id = invs.invoice_id
  AND   ai.creation_date < ptch.applied_date
  AND   dist.trx_id = ai.invoice_id
  AND   dist.application_id = 200
  AND   dist.entity_code = ''AP_INVOICES''
  AND   dist.event_class_code IN (''STANDARD INVOICES'',
          ''PREPAYMENT INVOICES'',''EXPENSE REPORTS'')
  AND   sign(dist.rec_nrec_tax_amt) <> sign(dist.rec_nrec_tax_amt_funcl_curr)'
  );


  add_signature(g_signatures,
    168,
    'INVOICE',
    'TAX',
    '20344709',
    '',
    'unrev_upg_TIPV_sel.sql',
    'Tax Invoice Price Variance (TIPV) distributions which are reversed but the reversal distributions are not created in R12.',
    'Apply the root cause fix from bug {16804798} if you have not done so, and then re-upgrade the affected invoice(s) using patch {20344709}, following the instructions provided in [1556126.1]',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'EBTax'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            aid.reversal_flag,
            aid.cancellation_flag
     FROM ap_invoice_distributions_all aid,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.line_type_lookup_code = ''TIPV''
     AND   aid.historical_flag = ''Y''
     AND   aid.parent_reversal_id     is null
     AND   aid.reversal_flag = ''Y''
     AND   NOT EXISTS (
             SELECT ''no reversal'' FROM ap_invoice_distributions_all aid1
             WHERE aid.invoice_id = aid1.invoice_id
             AND   aid.invoice_line_number = aid1.invoice_line_number
             AND   (aid.invoice_distribution_id = aid1.parent_reversal_id OR
                    aid.old_distribution_id = aid1.parent_reversal_id)
             AND   aid1.line_type_lookup_code = ''TIPV'')
     AND EXISTS (
           SELECT ''reversed in R12''
           FROM ap_invoice_distributions_all aid2,
                ap_invoice_distributions_all aid3
           WHERE aid.related_id = aid2.invoice_distribution_id
           AND   aid2.line_type_lookup_code LIKE ''%TAX''
           AND   aid2.parent_reversal_id       is null
           AND   (aid2.invoice_distribution_id = aid3.parent_reversal_id OR
                  aid2.old_distribution_id = aid3.parent_reversal_id)
           AND nvl(aid3.historical_flag,''N'') = ''N'')
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    281,
    'INVOICE',
    'TAX',
    '',
    '1316316.1',
    'zx_rmv_orphn_tax_lines.sql',
    'Non-cancelled tax lines with null tax_amt and which is allocated to a trx line which does not exist in ZX_LINES_DET_FACTORS or is discared, causing tax calculation failure: Cannot update AP_INVOICE_LINES_ALL.AMOUNT to NULL.',
    'Follow the instructions provided in [1316316.1] section #24.',
    'N',
    'N',
    impact_area_tbl('EBTax'),
    'WITH invs as (
       ##$$MIVIEW$$##
     )
     SELECT /*+ leading(invs) use_nl(zl) */
            zl.trx_id invoice_id,
            zl.trx_level_type,
            zl.trx_line_number,
            zl.tax_line_id
     FROM invs,
          zx_lines zl
     WHERE zl.trx_id = invs.invoice_id
     AND   zl.application_id = 200
     AND   zl.entity_code = ''AP_INVOICES''
     AND   zl.event_class_code IN (''STANDARD INVOICES'',''EXPENSE REPORTS'',
             ''PREPAYMENT INVOICES'')
     AND   NOT EXISTS (
             SELECT 1 FROM zx_lines_det_factors zldf
             WHERE zldf.trx_id = zl.trx_id
             AND   zldf.application_id = zl.application_id
             AND   zldf.entity_code = zl.entity_code
             AND   zldf.event_class_code = zl.event_class_code
             AND   zldf.trx_line_id = zl.trx_line_id
             AND   nvl(zldf.trx_level_type,''X'') = nvl(zl.trx_level_type,''X''))
     AND   NOT EXISTS (
             SELECT 1 FROM zx_rec_nrec_dist zd
             WHERE zd.trx_id = zl.trx_id
             AND   zd.application_id = zl.application_id
             AND   zd.entity_code = zl.entity_code
             AND   zd.event_class_code = zl.event_class_code
             AND   zd.tax_line_id = zl.tax_line_id)
     UNION
     SELECT /*+ leading(invs)use_nl(zl) */
            zl.trx_id invoice_id,
            zl.trx_level_type,
            zl.trx_line_number,
            zl.tax_line_id
     FROM invs,
          zx_lines zl
     WHERE zl.trx_id = invs.invoice_id
     AND   zl.application_id = 200
     AND   zl.entity_code = ''AP_INVOICES''
     AND   zl.event_class_code IN (''STANDARD INVOICES'',''EXPENSE REPORTS'',
             ''PREPAYMENT INVOICES'')
     AND   zl.tax_amt IS NULL
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = zl.trx_id
             AND   ail.line_number = zl.trx_line_id
             AND   ail.line_type_lookup_code <> ''TAX''
             AND   (nvl(ail.discarded_flag,''N'') = ''Y'' OR
             nvl(ail.cancelled_flag,''N'') = ''Y''))
     AND   NOT EXISTS (
             SELECT 1 FROM zx_rec_nrec_dist zd
             WHERE zd.trx_id = zl.trx_id
             AND   zd.application_id = zl.application_id
             AND   zd.entity_code = zl.entity_code
             AND   zd.event_class_code = zl.event_class_code
             AND   zd.tax_line_id = zl.tax_line_id)'
  );


  add_signature(g_signatures,
    348,
    'INVOICE',
    'TAX',
    '',
    '',
    'INV_TYPE_NOT_SYNC_SEL.sql',
    'Unvalidated invoices which have no tax lines, but whose invoice type has been changed after tax has been calculated preventing them from being validated.',
    'Apply the root cause fix from bug {14778067} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Approval'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          zx_lines_det_factors zld
     WHERE ai.invoice_id = invs.invoice_id
     AND   zld.trx_id = ai.invoice_id
     AND   zld.application_id = 200
     AND   zld.entity_code = ''AP_INVOICES''
     AND   zld.event_class_code IN (''STANDARD INVOICES'',
             ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_lines_all ail2
             WHERE ail2.invoice_id = ai.invoice_id
             AND   ail2.line_type_lookup_code = ''TAX'')
     AND   zld.event_class_code <> (decode(ai.invoice_type_lookup_code,
             ''PREPAYMENT'',''PREPAYMENT INVOICES'',
             ''EXPENSE REPORT'',''EXPENSE REPORTS'',
             ''STANDARD INVOICES''))'
  );


  add_signature(g_signatures,
    369,
    'INVOICE',
    'TAX',
    '9954778',
    '1314465.1',
    'ap_ccid_nrec_tax_incrt_sel.sql',
    'Non-recoverable tax distributions assigned the account from the recoverable tax account from the tax setup rather than the account of the ITEM line to which the tax is applicable.',
    'Apply the root cause fix from bug {9954778} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ leading(invs) */
           ''NORMAL TAX'' "TAX TYPE",
           aid.invoice_distribution_id,
           aid.invoice_id,
           aid.org_id,
           aid.line_type_lookup_code,
           aid.dist_code_combination_id "NONREC_TAX_ACCOUNT",
           aid1.dist_code_combination_id "REC_TAX_ACCOUNT",
           aid.charge_applicable_to_dist_id,
           aid.posted_flag,
           nvl(aid.encumbered_flag,''N'') encumbered_flag,
           aid.bc_event_id
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_invoice_distributions_all aid1,
          zx_rec_nrec_dist zrnd
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.historical_flag is null
     AND   ai.invoice_id = aid.invoice_id
     AND   aid.invoice_id = aid1.invoice_id
     AND   ai.cancelled_date is null
     AND   aid1.detail_tax_dist_id is not null
     AND   aid.detail_tax_dist_id is not null
     AND   aid.detail_tax_dist_id = zrnd.rec_nrec_tax_dist_id
     AND   aid.invoice_id = zrnd.trx_id
     AND   zrnd.application_id = 200
     AND   zrnd.entity_code = ''AP_INVOICES''
     AND   zrnd.applied_from_tax_dist_id is null
     AND   nvl(ai.quick_credit,''N'') <> ''Y''
     AND   aid.line_type_lookup_code = ''NONREC_TAX''
     AND   aid1.line_type_lookup_code = ''REC_TAX''
     AND   aid.charge_applicable_to_dist_id = aid1.charge_applicable_to_dist_id
     AND   aid.dist_code_combination_id = aid1.dist_code_combination_id
     AND   NOT EXISTS(
             SELECT 1 FROM ap_invoice_distributions_all aid3
             WHERE aid3.invoice_distribution_id = aid.charge_applicable_to_dist_id
             AND   (aid3.project_id is not null OR
                    aid3.po_distribution_id is not null))
     UNION ALL
     SELECT /*+ leading(invs)*/
            ''SELF_ASSESSED'',
            satx.invoice_distribution_id,
            satx.invoice_id,
            satx.org_id,
            satx.line_type_lookup_code,
            satx.dist_code_combination_id "NONREC_TAX_ACCOUNT",
            satx1.dist_code_combination_id "REC_TAX_ACCOUNT",
            satx.charge_applicable_to_dist_id,
            satx.posted_flag,
            nvl(satx.encumbered_flag,''N'') encumbered_flag,
            satx.bc_event_id
     FROM invs,
          ap_invoices_all ai,
          ap_self_assessed_tax_dist_all satx,
          ap_self_assessed_tax_dist_all satx1,
          zx_rec_nrec_dist zrnd
     WHERE ai.invoice_id = invs.invoice_id
     AND   satx.invoice_id = ai.invoice_id
     AND   satx.invoice_id = satx1.invoice_id
     AND   ai.historical_flag is null
     AND   ai.cancelled_date is null
     AND   satx1.detail_tax_dist_id is not null
     AND   satx.detail_tax_dist_id is not null
     AND   satx.detail_tax_dist_id = zrnd.rec_nrec_tax_dist_id
     AND   satx.invoice_id = zrnd.trx_id
     AND   zrnd.entity_code = ''AP_INVOICES''
     AND   zrnd.application_id = 200
     AND   zrnd.applied_from_tax_dist_id is null
     AND   nvl(ai.quick_credit,''N'') <> ''Y''
     AND   satx.line_type_lookup_code = ''NONREC_TAX''
     AND   satx1.line_type_lookup_code = ''REC_TAX''
     AND   satx.charge_applicable_to_dist_id = satx1.charge_applicable_to_dist_id
     AND   satx.dist_code_combination_id = satx1.dist_code_combination_id
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid4
             WHERE aid4.invoice_distribution_id = satx.charge_applicable_to_dist_id
             AND   (aid4.project_id is not null OR
                    aid4.po_distribution_id is not null))'
  );


  add_signature(g_signatures,
    440,
    'INVOICE',
    'TAX',
    '',
    '1316316.1',
    'ZX_Invoice_Vald_Log.sql',
    'Invoices cannot be validated because (a) the total recovery rate is greater than 100 or (b) the system is trying to delete frozen tax distributions (or frozen self-assessed tax distributions)',
    'Apply the root cause fix from bug {18910468} if you have not done so, then follow the instructions provided in [1316316.1] section #49 and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('EBTax', 'Invoice Approval'),
    'SELECT rnd.application_id,
            rnd.entity_code,
            rnd.event_class_code,
            rnd.trx_id,
            rnd.reverse_flag,
            rnd.reversed_tax_dist_id,
            rnd.rec_nrec_tax_dist_id
     FROM zx_rec_nrec_dist rnd
     WHERE rnd.application_id = 200
     AND   rnd.entity_code = ''AP_INVOICES''
     AND   rnd.event_class_code IN (''STANDARD INVOICES'',''PREPAYMENT INVOICES'',
             ''EXPENSE REPORTS'')
     AND   nvl(rnd.reverse_flag,''N'') = ''N''
     AND   rnd.reversed_tax_dist_id is not null
     AND   EXISTS (
             SELECT 1
             FROM (
                    ##$$IVIEW$$##
                  ) invs,
                  ap_invoices_all ai
             WHERE ai.invoice_id = invs.invoice_id
             AND   rnd.trx_id = ai.invoice_id
             AND   ai.creation_date < (
                     SELECT min(pr.end_date)
                     FROM ad_appl_tops at,
                          ad_applied_patches aap,
                          ad_patch_drivers pd,
                          ad_patch_runs pr,
                          ad_patch_run_bugs prb,
                          ad_file_versions afv,
                          ad_patch_run_bug_actions prba,
                          ad_files f
                     WHERE f.app_short_name = ''ZX''
                     AND   f.subdir = ''patch/115/sql''
                     AND   f.filename = ''zxifnewsrvcspubb.pls''
                     AND   f.file_id = prba.file_id
                     AND   prba.executed_flag = ''Y''
                     AND   prba.patch_run_bug_id = prb.patch_run_bug_id
                     AND   pr.appl_top_id = at.appl_top_id
                     AND   prb.patch_run_id = pr.patch_run_id
                     AND   pr.patch_driver_id = pd.patch_driver_id
                     AND   pd.applied_patch_id = aap.applied_patch_id
                     AND   prba.patch_file_version_id = afv.file_version_id
                     AND   to_number(nvl(afv.version_segment4,afv.version_segment2)) >=
                             to_number(decode(afv.version_segment3,
                               12020000,9,
                               12010000,22,
                               12000000,22,
                               afv.version_segment2))))'
  );


  add_signature(g_signatures,
    1,
    'INVOICE',
    '',
    '13102335',
    '967242.1',
    'AP_AWT_ROUNDING_DIFF_SEL.sql',
    'Automatic Withholding TAX (AWT) invoice distributions which will not validate due to rounding differences',
    'Apply the GDF patch following the instructions provided in [967242.1]',
    'Y',
    'Y',
    impact_area_tbl('Invoice Holds'),
    'SELECT maxdist.invoice_id,
            aid2.org_id,
            maxdist.invoice_line_number,
            maxdist.dist_line_number,
            maxdist.line_amt,
            maxdist.line_base_amt,
            maxdist.dist_amt_tot,
            maxdist.dist_base_amt_tot,
            maxdist.amount_adj,
            maxdist.base_amt_adj,
            aid2.posted_flag,
            aid2.awt_invoice_payment_id
     FROM (
            SELECT /*+ push_pred */
                   aid.invoice_id,
                   aid.invoice_line_number,
                   max(aid.distribution_line_number) dist_line_number,
                   ail.amount line_amt,
                   nvl(ail.base_amount,0) line_base_amt,
                   sum(aid.amount) dist_amt_tot,
                   sum(nvl(aid.base_amount,0)) dist_base_amt_tot,
                   (ail.amount- sum(aid.amount)) amount_adj,
                   (nvl(ail.base_amount,0) - sum(nvl(aid.base_amount,0))) base_amt_adj
            FROM ap_invoice_distributions_all aid,
                 ap_invoice_lines_all ail,
                 (
                   ##$$IVIEW$$##
                 ) invs
            WHERE aid.invoice_id = ail.invoice_id
            AND   ail.line_number = aid.invoice_line_number
            AND   ail.line_type_lookup_code = ''AWT''
            AND   aid.line_type_lookup_code = ''AWT''
            AND   nvl(aid.historical_flag,''N'') <> ''Y''
            AND   ail.LINE_SOURCE = ''AUTO WITHHOLDING''
            AND   nvl(ail.discarded_flag,''N'') <> ''Y''
            AND   aid.invoice_id = invs.invoice_id
            GROUP BY aid.invoice_id, aid.invoice_line_number,
                     ail.amount, ail.base_amount
            HAVING   ail.amount <> sum(aid.amount)) maxdist,
          ap_invoice_distributions_all aid2
     WHERE aid2.invoice_id = maxdist.invoice_id
     AND   aid2.invoice_line_number = maxdist.invoice_line_number
     AND   aid2.distribution_line_number = maxdist.dist_line_number'
  );


  add_signature(g_signatures,
    2,
    'INVOICE',
    '',
    '19637573',
    '964952.1',
    'unrev_man_awt_sel.sql',
    'Witholding invoice distributions which are not reversed, but the withholding line amount is 0. These invoices will be on distribution variance hold after cancelation.',
    'Apply the GDF patch following the instructions provided in [964952.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Holds'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id unreversed_dist_id,
            aid.invoice_line_number unreversed_dist_line_num,
            aid.distribution_line_number unreversed_dist_num,
            aid.line_type_lookup_code unreversed_dist_line_type,
            aid.amount unreversed_dist_amt,
            ''1'' issue_type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid,
          ap_holds_all aha
     WHERE ai.invoice_id = invs.invoice_id
     AND   ail.invoice_id = ai.invoice_id
     AND   aid.invoice_id = ail.invoice_id
     AND   aha.invoice_id = ai.invoice_id
     AND   aha.hold_lookup_code = ''DIST VARIANCE''
     AND   aha.release_lookup_code is null
     AND   ai.invoice_amount = 0
     AND   nvl(ai.historical_flag,''N'') = ''N''
     AND   aid.awt_invoice_payment_id is null
     AND   ap_invoices_utility_pkg.get_approval_status (
             ai.invoice_id,
             ai.invoice_amount,
             ai.payment_status_flag,
             ai.invoice_type_lookup_code) = ''NEEDS REAPPROVAL''
     AND   ai.cancelled_date is null
     AND   ai.temp_cancelled_amount is not null
     AND   ail.line_type_lookup_code = ''AWT''
     AND   ail.invoice_id = ai.invoice_id
     AND   aid.invoice_line_number = ail.line_number
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.parent_reversal_id is null
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid1
             WHERE  aid1.invoice_id = aid.invoice_id
             AND    aid1.parent_reversal_id = aid.invoice_distribution_id)
     UNION
     SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.line_type_lookup_code,
            aid.amount,
            ''2''
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid,
          ap_holds_all aha
     WHERE ai.invoice_id = invs.invoice_id
     AND   ail.invoice_id = ai.invoice_id
     AND   aid.invoice_id = ail.invoice_id
     AND   aha.invoice_id(+) = ai.invoice_id
     AND   aha.release_lookup_code IS NOT NULL
     AND   ai.invoice_amount = 0
     AND   nvl(ai.historical_flag,''N'') = ''Y''
     AND   ai.cancelled_date IS NOT NULL
     AND   ail.line_type_lookup_code = ''AWT''
     AND   aid.invoice_line_number = ail.line_number
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.parent_reversal_id is null
     AND   nvl(aid.historical_flag,''N'') = ''Y''
     AND   aid.awt_invoice_id is null
     AND   aid.awt_invoice_payment_id is null
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = aid.invoice_id
             AND   aid1.parent_reversal_id = aid.invoice_distribution_id)'
  );


  add_signature(g_signatures,
    3,
    'INVOICE',
    '',
    '17965275',
    '982802.1',
    'ap_sup_merge_remit_cols_sel.sql',
    'Remit to columns are incorrect in AP_INVOICES_ALL and AP_PAYMENT_SCHEDULES_ALL after supplier merge',
    'Apply the GDF patch following the instructions provided in [982802.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''AP_INVOICES_ALL'' source_table,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.vendor_id,
            ai.vendor_site_id,
            ai.remit_to_supplier_id,
            ai.remit_to_supplier_site_id,
            ai.relationship_id
     FROM invs,
          ap_invoices_all ai
     WHERE ai.relationship_id is not null
     AND   ai.remit_to_supplier_id is not null
     AND   ai.remit_to_supplier_site_id is not null
     AND   ai.relationship_id = -1
     AND   CASE
             WHEN nullif(ai.remit_to_supplier_id,ai.vendor_id) is not null THEN 1
             WHEN nullif(ai.remit_to_supplier_site_id,ai.vendor_site_id) is not null THEN 1
             ELSE 0
           END = 1
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ''AP_PAYMENT_SCHEDULES_ALL'',
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            aps.org_id,
            ai.vendor_id,
            ai.vendor_site_id,
            aps.remit_to_supplier_id,
            aps.remit_to_supplier_site_id,
            aps.relationship_id
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps
     WHERE ai.invoice_id = aps.invoice_id
     AND   aps.relationship_id is not null
     AND   aps.remit_to_supplier_id is not null
     AND   aps.remit_to_supplier_site_id is not null
     AND   aps.relationship_id = -1
     AND   CASE
             WHEN nullif(aps.remit_to_supplier_id, nvl(ai.vendor_id,0)) is not null THEN 1
             WHEN nullif(aps.remit_to_supplier_site_id,nvl(ai.vendor_site_id,0))
                    is not null THEN 1
             ELSE 0
           END = 1
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    4,
    'INVOICE',
    '',
    '20407187',
    '1061563.1',
    'AP_AWT_RELATED_ID_SEL.sql',
    'Automatic withholding tax (AWT) distributions with missing AWT_RELATED_ID',
    'Apply the GDF patch following the instructions provided in [1061563.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure', 'Accounting Incorrect'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     ),
     zero_amt_awt_no_nonrev_itm as (
       SELECT /*+ leading(invs) use_nl(aid) */
              aid.invoice_id,
              aid.invoice_line_number,
              aid.invoice_distribution_id,
              aid.amount,
              sum(aid.amount)
                over(partition by aid.invoice_id, aid.invoice_line_number)
                line_wise_sum,
              sum(aid.amount)
                over(partition by aid.invoice_id)
                inv_wise_sum
       FROM invs,
            ap_invoice_distributions_all aid
       WHERE aid.invoice_id = invs.invoice_id
       AND   aid.line_type_lookup_code = ''AWT''
       AND   aid.awt_related_id is null
       AND   aid.historical_flag = ''Y''
       AND   nvl(aid.reversal_flag, ''N'') = ''N''
       AND   NOT EXISTS (
               SELECT 1 FROM ap_invoice_distributions_all aidx
               WHERE aidx.invoice_id = aid.invoice_id
               AND   aidx.line_type_lookup_code not in (''AWT'',''ERV'',''TERV'')
               AND   aidx.prepay_distribution_id is null
               AND   nvl(aidx.reversal_flag, ''N'') = ''N''
               AND   sign(aidx.amount) <> sign(aid.amount)
               AND   abs(aidx.amount) >= abs(aid.amount))
     ),
     invs2 AS (
       SELECT invoice_id
       FROM invs
       WHERE EXISTS (
               SELECT 1 FROM ap_invoice_distributions_all aid_sub
               WHERE aid_sub.invoice_id = invs.invoice_id
               AND   nvl(aid_sub.historical_flag,''N'') = ''N''
               UNION ALL
               SELECT 1
               FROM ap_invoice_distributions_all aid_sub,
                    xla_events xe_sub,
                    ap_accounting_events_all aae_sub
               WHERE aid_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.event_id = aae_sub.accounting_event_id
               AND   xe_sub.upg_batch_id = -9999
               AND   aid_sub.invoice_id = invs.invoice_id
               UNION ALL
               SELECT 1
               FROM ap_invoice_payments_all aip_sub,
                    ap_payment_history_all aph_sub,
                    xla_events xe_sub,
                    ap_accounting_events_all aae_sub
               WHERE  aip_sub.invoice_id = invs.invoice_id
               AND   aip_sub.check_id = aph_sub.check_id
               AND   aph_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.application_id = 200
               AND   xe_sub.event_id = aae_sub.accounting_event_id
               AND   xe_sub.upg_batch_id = -9999
               UNION ALL
               SELECT 1
               FROM ap_invoice_distributions_all aid_sub,
                    xla_events xe_sub,
                    xla_ae_headers xah_sub
               WHERE aid_sub.invoice_id = invs.invoice_id
               AND   aid_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.application_id = 200
               AND   xe_sub.event_id = xah_sub.event_id
               AND   xah_sub.application_id = 200
               AND   xah_sub.upg_batch_id  is null
               UNION ALL
               SELECT 1
               FROM ap_invoice_payments_all aip_sub,
                    ap_payment_history_all aph_sub,
                    xla_events xe_sub,
                    xla_ae_headers xah_sub
               WHERE aip_sub.invoice_id = invs.invoice_id
               AND   aip_sub.check_id = aph_sub.check_id
               AND   aph_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.application_id = 200
               AND   xe_sub.event_id = xah_sub.event_id
               AND   xah_sub.application_id = 200
               AND   xah_sub.upg_batch_id is null)
     )
     SELECT /*+ ordered use_nl(aid) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.posted_flag,
            aid.awt_flag,
            null related_id,
            aid.awt_invoice_payment_id,
            ''1'' category
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE aid.line_type_lookup_code = ''AWT''
     AND   nvl(aid.historical_flag,''N'') = ''N''
     AND   aid.awt_related_id is null
     AND   aid.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.posted_flag,
            aid.awt_flag,
            null,
            aid.awt_invoice_payment_id,
            ''2''
     FROM invs2,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
     WHERE aid.line_type_lookup_code = ''AWT''
     AND   aid.historical_flag = ''Y''
     AND   aid.awt_related_id is null
     AND   ai.invoice_id = aid.invoice_id
     AND   ai.payment_status_flag IN (''N'',''P'')
     AND   ai.historical_flag = ''Y''
     AND   ai.invoice_id = invs2.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.posted_flag,
            aid.awt_flag,
            null,
            aid.awt_invoice_payment_id,
            ''3''
     FROM invs2,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs2.invoice_id
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.historical_flag = ''Y''
     AND   aid.awt_related_id is null
     AND   ai.invoice_id = aid.invoice_id
     AND   ai.payment_status_flag = ''Y''
     AND   ai.historical_flag = ''Y''
     UNION ALL
     SELECT /*+ ordered use_nl(aid) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.posted_flag,
            aid.awt_flag,
            null,
            aid.awt_invoice_payment_id,
            ''4''
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE aid.line_type_lookup_code = ''AWT''
     AND   nvl(aid.historical_flag,''N'') = ''N''
     AND   aid.awt_related_id is not null
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid_parent
             WHERE aid_parent.invoice_id = aid.invoice_id
             AND   aid.awt_related_id = aid_parent.invoice_distribution_id)
     AND   aid.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(aid, aid_erv) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.posted_flag,
            aid.awt_flag,
            aid_erv.related_id,
            aid.awt_invoice_payment_id,
            ''6''
     FROM invs,
          ap_invoice_distributions_all aid,
          ap_invoice_distributions_all aid_erv
     WHERE aid.invoice_id = aid_erv.invoice_id
     AND   aid.awt_related_id = aid_erv.invoice_distribution_id
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_flag = ''A''
     AND   nvl(aid.historical_flag, ''N'') = ''N''
     AND   aid_erv.line_type_lookup_code in (''TERV'', ''ERV'')
     AND   aid.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid_awt, aid_item, xe_item) */
            aid_awt.invoice_id,
            aid_awt.org_id,
            aid_awt.invoice_distribution_id,
            aid_awt.invoice_line_number,
            aid_awt.distribution_line_number,
            aid_awt.posted_flag,
            aid_awt.awt_flag,
            null related_id,
            aid_awt.awt_invoice_payment_id,
            ''7''
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid_awt,
          ap_invoice_distributions_all aid_item,
          xla_events xe_item,
          ap_system_parameters_all param
     WHERE aid_awt.line_type_lookup_code = ''AWT''
     AND   aid_item.invoice_distribution_id = aid_awt.awt_related_id
     AND   ai.invoice_id = aid_awt.invoice_id
     AND   ai.invoice_id = aid_item.invoice_id
     AND   xe_item.event_id = aid_item.accounting_event_id
     AND   xe_item.application_id = 200
     AND   (nvl(ai.payment_status_flag, ''N'') <> ''Y'' OR
            EXISTS (
              SELECT /*+ no_unnest ordered use_nl(aip, aph, xe) */ 1
              FROM ap_invoice_payments_all aip,
                   ap_payment_history_all aph,
                   xla_events xe
              WHERE aip.invoice_id = ai.invoice_id
              AND   aip.check_id = aph.check_id
              AND   xe.event_id = aph.accounting_event_id
              AND   xe.application_id = 200
              AND   (aph.posted_flag = ''N'' OR
                     (aph.posted_flag = ''Y'' AND
                      EXISTS (
                        SELECT 1 FROM xla_ae_headers xh
                        WHERE xh.event_id = xe.event_id
                        AND   xh.application_id = 200
                        AND   nvl(xh.upg_batch_id, -9999) = -9999)))))
     AND   xe_item.event_type_code like ''%ADJUSTED''
     AND   ai.historical_flag = ''Y''
     AND   param.org_id = ai.org_id
     AND   aid_awt.parent_reversal_id is null
     AND   param.automatic_offsets_flag = ''N''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aidx
             WHERE aidx.accounting_event_id = xe_item.event_id
             AND   aidx.invoice_id = aid_item.invoice_id
             HAVING sum(aidx.amount) = 0)
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.posted_flag,
            aid.awt_flag,
            null related_id,
            aid.awt_invoice_payment_id,
            ''8''
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_related_id is null
     AND   ai.cancelled_date is null
     AND   (aid.awt_flag = ''M'' OR
            (aid.awt_flag = ''A'' AND aid.historical_flag = ''Y''))
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aidx
             WHERE aidx.invoice_id = aid.invoice_id
             AND   aidx.line_type_lookup_code not in (''AWT'',''ERV'',''TERV'')
             AND   aidx.prepay_distribution_id is null
             AND   abs(aidx.amount) >= abs(aid.amount))
     AND   (nvl(ai.payment_status_flag, ''N'') <> ''Y'' OR
            EXISTS (
              SELECT /*+ no_unnest */ 1
              FROM ap_invoice_payments_all aip,
                   ap_payment_history_all aph,
                   xla_events xe
              WHERE  aip.invoice_id = ai.invoice_id
              AND   aip.check_id = aph.check_id
              AND   xe.event_id = aph.accounting_event_id
              AND   xe.application_id = 200
              AND   (aph.posted_flag = ''N'' OR
                     (aph.posted_flag = ''Y'' AND
                      EXISTS (
                        SELECT 1 FROM xla_ae_headers xh
                        WHERE xh.event_id = xe.event_id
                        AND   xh.application_id = 200
                        AND   nvl(xh.upg_batch_id, -9999) = -9999)))))
     UNION
     SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.posted_flag,
            aid.awt_flag,
            null related_id,
            aid.awt_invoice_payment_id,
            ''10''
     FROM ap_invoice_distributions_all aid
     WHERE aid.invoice_distribution_id IN (
             SELECT invoice_distribution_id FROM zero_amt_awt_no_nonrev_itm
             WHERE (line_wise_sum = 0 OR
                    inv_wise_sum = 0))'
  );


  add_signature(g_signatures,
    5,
    'INVOICE',
    '',
    '19276929',
    '1060611.1',
    'ap_cancel_inv_sel.sql',
    'Invoices on which cancelation was attempted but did not successfully complete.',
    'Apply the GDF patch following the instructions provided in [1060611.1]',
    'Y',
    'Y',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT /*+ leading(invs) use_nl(ai) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.quick_credit
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_amount = 0
     AND   ai.cancelled_date is null
     AND   ai.temp_cancelled_amount is not null
     AND   NOT EXISTS (
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.hold_lookup_code IN (
                     ''CANT FUNDS CHECK'', ''INSUFFICIENT FUNDS'',
                     ''AWT ERROR'', ''DIST ACCT INVALID'',
                     ''Encumbrance Acctg Fail'')
             AND   aha.release_lookup_code is null)
     AND   NOT EXISTS (
             SELECT ail.invoice_id
             FROM ap_invoice_lines_all ail,
                  ap_invoice_distributions_all aid
             WHERE ail.invoice_id = ai.invoice_id
             AND   ail.line_type_lookup_code = ''AWT''
             AND   nvl(ail.discarded_flag,''N'') = ''N''
             AND   nvl(ail.cancelled_flag,''N'') = ''N''
             AND   ail.line_type_lookup_code = ''AWT''
             AND   aid.invoice_id = ail.invoice_id
             AND   aid.invoice_line_number = ail.line_number
             AND   aid.line_type_lookup_code = ''AWT''
             AND   nvl(aid.reversal_flag,''N'') = ''N'')'
  );


  add_signature(g_signatures,
    6,
    'INVOICE',
    '',
    '9231093',
    '1063272.1',
    'ap_extra_nr_tax_dist_sel.sql',
    'Invoices with tax rate variances (TRV) where there is tax on the invoice but not on the PO. <br> When these lines are discarded and rematched an extra negative non recoverable tax distribution is created and the invoice will not validate due to distribution variance',
    'Apply the GDF patch following the instructions provided in [1063272.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Holds'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code
     FROM ap_invoice_distributions_all aid,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.line_type_lookup_code = ''NONREC_TAX''
     AND   aid.detail_tax_dist_id is not null
     AND   aid.summary_tax_line_id is not null
     AND   aid.parent_reversal_id is null
     AND   nvl(aid.historical_flag,''N'') = ''N''
     AND   aid.posted_flag = ''N''
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aidv
             WHERE aidv.invoice_id = aid.invoice_id
             AND   aidv.charge_applicable_to_dist_id = aid.charge_applicable_to_dist_id
             AND   aidv.detail_tax_dist_id = aid.detail_tax_dist_id
             AND   aidv.summary_tax_line_id = aid.summary_tax_line_id
             AND   aidv.line_type_lookup_code IN (''TRV'',''TERV'',''TIPV'')
             AND   aidv.parent_reversal_id is not null)
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    7,
    'INVOICE',
    '',
    '9296562',
    '1060687.1',
    'ap_upd_ccid_nr_tax_dist_sel.sql',
    'Tax only invoices cannot be validated due to non-recoverable tax distributions with CODE_COMBINATION_ID = -99',
    'Apply the GDF patch following the instructions provided in [1060687.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Holds'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id
     FROM ap_invoice_distributions_all aid,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.line_type_lookup_code = ''NONREC_TAX''
     AND   aid.dist_code_combination_id= -99
     AND   aid.detail_tax_dist_id is not null
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    8,
    'INVOICE',
    '',
    '12429119',
    '967213.1',
    'upd_xdl_tax_details_sel.sql Invoice Distributions',
    'Upgraded invoice distributions with missing tax details in XLA_DISTRIBUTION_LINKS',
    'Apply the GDF patch following the instructions provided in [967213.1]',
    'Y',
    'N',
    impact_area_tbl('EBTax'),
    'SELECT /*+ ordered use_nl(ai, aid, zrd, xah, xdl) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            zrd.tax_line_id,
            zrd.rec_nrec_tax_dist_id,
            zrd.summary_tax_line_id,
            xah.ae_header_id,
            aid.accounting_event_id,
            aid.invoice_distribution_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          zx.zx_rec_nrec_dist zrd,
          xla_ae_headers xah,
          xla_distribution_links xdl
     WHERE ai.invoice_id = aid.invoice_id
     AND   upper(zrd.record_type_code) = ''MIGRATED''
     AND   zrd.application_id = 200
     AND   zrd.rec_nrec_tax_dist_id = aid.detail_tax_dist_id
     AND   aid.accounting_event_id = xah.event_id
     AND   xah.application_id = 200
     AND   aid.posted_flag = ''Y''
     AND   aid.historical_flag = ''Y''
     AND   xdl.tax_rec_nrec_dist_ref_id = zrd.rec_nrec_tax_dist_id
     AND   xdl.tax_summary_line_ref_id = zrd.summary_tax_line_id
     AND   xdl.source_distribution_id_num_1 = aid.invoice_distribution_id
     AND   xdl.application_id = 200
     AND   xdl.ae_header_id = xah.ae_header_id
     AND   xdl.tax_line_ref_id is null
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    9,
    'INVOICE',
    '',
    '12429119',
    '967213.1',
    'upd_xdl_tax_details_sel.sql Payments',
    'Upgraded payment transactions with missing tax details in XLA_DISTRIBUTION_LINKS',
    'Apply the GDF patch following the instructions provided in [967213.1]',
    'Y',
    'N',
    impact_area_tbl('EBTax'),
    'SELECT /*+ ordered use_nl(aid, zrd, aip, aph, aphd, xah, xdl) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aip.check_id,
            aid.detail_tax_dist_id,
            aid.summary_tax_line_id,
            zrd.tax_line_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid,
          zx_rec_nrec_dist zrd,
          ap_invoice_payments_all aip,
          ap_payment_history_all aph,
          ap_payment_hist_dists aphd,
          xla_ae_headers xah,
          xla_distribution_links xdl
     WHERE aip.invoice_id = aid.invoice_id
     AND   zrd.rec_nrec_tax_dist_id = aid.detail_tax_dist_id
     AND   aid.detail_tax_dist_id is not null
     AND   aid.historical_flag = ''Y''
     AND   upper(zrd.record_type_code) = ''MIGRATED''
     AND   zrd.application_id = 200
     AND   zrd.entity_code = ''AP_INVOICES''
     AND   aphd.invoice_distribution_id = aid.invoice_distribution_id
     AND   aph.check_id = aip.check_id
     AND   aph.historical_flag = ''Y''
     AND   aph.payment_history_id = aphd.payment_history_id
     AND   aphd.historical_flag = ''Y''
     AND   aph.posted_flag = ''Y''
     AND   xah.event_id = aphd.accounting_event_id
     AND   xah.application_id = 200
     AND   xah.ae_header_id = xdl.ae_header_id
     AND   xdl.source_distribution_id_num_1 = aphd.payment_hist_dist_id
     AND   xdl.application_id = 200
     AND   xdl.tax_line_ref_id is null
     AND   xdl.tax_summary_line_ref_id is null
     AND   xdl.tax_rec_nrec_dist_ref_id is null
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    10,
    'INVOICE',
    '',
    '17433450',
    '972143.1',
    'update_inv_total_tax_amt_sel.sql',
    'Invoices with tax lines having null total tax amount on the invoice header.',
    'Apply the GDF patch following the instructions provided in [972143.1]',
    'Y',
    'N',
    impact_area_tbl('EBTax'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.tax_amount
     FROM ap_invoices_all ai,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.historical_flag = ''Y''
     AND   ai.total_tax_amount is null
     AND   EXISTS (
             SELECT ''tax exists''
             FROM ap_invoice_lines_all ail
             WHERE ai.invoice_id = ail.invoice_id
             AND   ail.line_type_lookup_code = ''TAX'')
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    11,
    'INVOICE',
    '',
    '20044261',
    '974149.1',
    'upd_wrng_pay_awt_rev_sel.sql',
    'Reversed Payment Time AWT distributions placed under different invoice lines during upgrade',
    'Apply the GDF patch following the instructions provided in [974149.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Holds'),
    'SELECT /*+ ordered no_push_pred(@iview) use_nl(aid) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid
     WHERE aid.historical_flag = ''Y''
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_invoice_payment_id  is not null
     AND   aid.parent_reversal_id is not null
     AND   aid.reversal_flag = ''N''
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    12,
    'INVOICE',
    '',
    '9227325',
    '1063226.1',
    'upd_rev_flg_11i_corup_sel.sql',
    'Upgraded invoices have reversal distributions with amounts different from the parent causing accounted invoices to require re-validation',
    'Apply the GDF patch following the instructions provided in [1063226.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Holds'),
    'SELECT  /*+ no_push_pred(@iview) ordered use_nl(ail) */
             ail.invoice_id,
             ail.org_id,
             ail.line_number,
             ail.historical_flag,
             ail.line_type_lookup_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_lines_all ail
     WHERE ail.historical_flag = ''Y''
     AND   ail.discarded_flag = ''Y''
     AND   ail.line_type_lookup_code <> ''AWT''
     AND   ail.amount = 0
     AND   ail.amount <>   (
             SELECT sum(amount)
             FROM ap_invoice_distributions_all aid
             WHERE ail.invoice_id = aid.invoice_id
             AND   ail.line_number = aid.invoice_line_number
             AND   aid.historical_flag = ''Y''  )
     AND   NOT EXISTS  (
             SELECT 1 /*+ no_unnest */ FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = ail.invoice_id
             AND   aid1.invoice_line_number = ail.line_number
             AND (nvl(aid1.historical_flag,''N'') = ''N'' OR
                  nvl(aid1.reversal_flag,''N'')  <> ''Y''))
     AND   ail.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    13,
    'INVOICE',
    '',
    '17478950',
    '1072747.1',
    'ap_msng_inv_hdr_ccid_sel.sql',
    'Invoices which cannot be accounted due to missing liability account on the invoice header',
    'Apply the GDF patch following the instructions provided in [1072747.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.vendor_id,
            ai.vendor_site_id,
            ai.accts_pay_code_combination_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE nvl(ai.accts_pay_code_combination_id,-1) = -1
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    14,
    'INVOICE',
    '',
    '21616697',
    '1072774.1',
    'ap_inv_val_prb_sel.sql',
    'Invoices with validation_request_id populated after invoice validation has completed with error',
    'Apply the GDF patch following the instructions provided in [1072774.1]',
    'Y',
    'N',
    impact_area_tbl('Validation Selection'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.validation_request_id
     FROM ap_invoices_all ai,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.validation_request_id is not null
     AND   ai.validation_request_id > 0
     AND   (EXISTS (
              SELECT 1  FROM fnd_concurrent_requests fcr
              WHERE fcr.request_id = ai.validation_request_id
              AND   fcr.phase_code = ''C'' ) OR
            NOT EXISTS (
              SELECT 1 FROM fnd_concurrent_requests fcr
              WHERE fcr.request_id = ai.validation_request_id ))
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    15,
    'INVOICE',
    '',
    '17441499',
    '1072783.1',
    'ap_upd_dup_parent_rev_sel.sql',
    'Duplicate parent reversal ids on upgraded invoices resulting in ORA-01422 error when clicking on distributions',
    'Apply the GDF patch following the instructions provided in [1072783.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''ITEM'' line_type,
            aid2.invoice_id,
            aid2.org_id,
            aid2.invoice_line_number,
            aid2.distribution_line_number,
            aid2.invoice_distribution_id
     FROM invs,
          ap_invoice_distributions_all aid2,
          ap_invoice_distributions_all aid
     WHERE aid.parent_reversal_id IN (
             SELECT aid1.parent_reversal_id
             FROM ap_invoice_distributions_all aid1
             WHERE aid1.historical_flag = ''Y''
             AND   aid1.invoice_id = aid.invoice_id
             AND   aid1.parent_reversal_id is not null
             GROUP BY aid1.parent_reversal_id
             HAVING   count(*) > 1)
     AND   aid.historical_flag = ''Y''
     AND   aid.line_type_lookup_code IN (''IPV'',''ERV'')
     AND   aid.parent_reversal_id = aid2.parent_reversal_id
     AND   aid2.historical_flag = ''Y''
     AND   aid2.invoice_id = aid.invoice_id
     AND   aid2.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ''TAX'',
            aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE aid.parent_reversal_id IN (
             SELECT aid1.parent_reversal_id
             FROM ap_invoice_distributions_all aid1
             WHERE aid1.historical_flag = ''Y''
             AND   aid1.invoice_id = aid.invoice_id
             AND   aid1.parent_reversal_id is not null
             AND   aid1.line_type_lookup_code IN (''TIPV'',''TERV'',
                     ''REC_TAX'',''NONREC_TAX'',''MISCELLANEOUS'',
                     ''FREIGHT'' )
             GROUP BY aid1.parent_reversal_id  HAVING COUNT(*) > 1 )
     AND   aid.historical_flag = ''Y''
     AND   aid.line_type_lookup_code IN (''TIPV'',''TERV'',
             ''REC_TAX'',''NONREC_TAX'',''MISCELLANEOUS'',''FREIGHT'' )
     AND   aid.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ''INCORRECT PARENT REV ID'',
            aid1.invoice_id,
            aid1.org_id,
            aid1.invoice_line_number,
            aid1.distribution_line_number,
            aid1.invoice_distribution_id
     FROM invs,
          ap_invoice_distributions_all aid1,
          ap_invoice_distributions_all aid2
     WHERE aid1.invoice_id = aid2.invoice_id
     AND   aid1.parent_reversal_id IS NOT NULL
     AND   aid1.historical_flag = ''Y''
     AND   aid1.line_type_lookup_code IN (''REC_TAX'',''NONREC_TAX'',
             ''FREIGHT'',''MISCELLANEOUS'')
     AND   aid1.parent_reversal_id = aid2.old_distribution_id
     AND   aid1.line_type_lookup_code = aid2.line_type_lookup_code
     AND   aid2.old_distribution_id <> aid2.invoice_distribution_id
     AND   NOT EXISTS (
             SELECT ''no distribution''
             FROM ap_invoice_distributions_all aid3
             WHERE aid3.invoice_id = aid1.invoice_id
             AND   aid3.invoice_distribution_id = aid1.parent_reversal_id
             AND   aid1.line_type_lookup_code = aid3.line_type_lookup_code)
     AND   NOT EXISTS (
             SELECT ''no dists with same parent rev''
             FROM ap_invoice_distributions_all aid4
             WHERE aid4.invoice_id = aid1.invoice_id
             AND   aid4.parent_reversal_id = aid1.parent_reversal_id
             AND   aid4.invoice_distribution_id <> aid1.invoice_distribution_id)
     AND   aid1.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    16,
    'INVOICE',
    '',
    '9231247',
    '1094274.1',
    'ap_sync_po_release_id_sel.sql',
    'Invoice lines matched to blanket or planned PO with missing PO_RELEASE_ID causing APP-PO-14144 when trying to cancel or validate the invoice',
    'Apply the GDF patch following the instructions provided in [1094274.1]',
    'Y',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ail.line_number,
            ail.po_header_id,
            ail.po_line_location_id,
            ail.po_release_id  old_po_release_id,
            pll.po_release_id  new_po_release_id
     FROM ap_invoices_all ai,
          ap_invoice_lines_all  ail,
          po_line_locations_all pll,
          po_headers_all ph,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ail.invoice_id = ai.invoice_id
     AND   ail.po_header_id = ph.po_header_id
     AND  ((PH.type_lookup_code = ''BLANKET'' AND
            nvl( PH.global_agreement_flag, ''N'' ) = ''N'') OR
           PH.type_lookup_code = ''PLANNED'')
     AND   pll.line_location_id = ail.po_line_location_id
     AND   pll.po_release_id is not null
     AND   ail.po_release_id is null
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    17,
    'INVOICE',
    '',
    '9341543',
    '1094283.1',
    'ap_duplicate_reversals_sel.sql',
    'Invoices on DIST VARIANCE hold due to duplicate reversal distributions created during invoice cancelation',
    'Apply the GDF patch following the instructions provided in [1094283.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Holds'),
    'SELECT /*+ leading(invs) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.temp_cancelled_amount,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.parent_reversal_id,
            aid.amount,
            aid.line_type_lookup_code,
            aid.detail_tax_dist_id,
            aid.summary_tax_line_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = aid.invoice_id
     AND   nvl(ai.historical_flag, ''N'') <> ''Y''
     AND   ai.TEMP_CANCELLED_AMOUNT is not null
     AND   ai.cancelled_date is null
     AND   aid.reversal_flag = ''Y''
     AND   aid.parent_reversal_id is not null
     AND   EXISTS (
             SELECT 1 FROM ap_holds_all h
             WHERE h.invoice_id = ai.invoice_id
             AND   h.hold_lookup_code = ''DIST VARIANCE''
             AND   nvl(h.status_flag,''S'') <> ''R'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = ai.invoice_id
             AND   aid1.parent_reversal_id = aid.parent_reversal_id
             AND   aid1.invoice_distribution_id <> aid.invoice_distribution_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    18,
    'INVOICE',
    '',
    '9375004',
    '1094293.1',
    'ap_var_awt_group_id_sel.sql',
    'Upgraded invoices on which awt_group_id is not populated',
    'Apply the GDF patch following the instructions provided in [1094293.1]',
    'Y',
    'N',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT /*+ leading(invs) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.awt_group_id,
            aid1.line_type_lookup_code dist_line_type_lookup_code,
            aid1.invoice_distribution_id dist_invoice_distribution_id,
            aid1.awt_group_id dist_awt_group_id,
            aid1.old_distribution_id dist_old_distribution_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_dists_arch aid,
          ap_invoice_distributions_all aid1
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid1.invoice_id = aid.invoice_id
     AND   aid.invoice_distribution_id = aid1.old_distribution_id
     AND   aid.awt_group_id is not null
     AND   aid1.line_type_lookup_code NOT IN
                  (''ITEM'',''REC_TAX'',''NONREC_TAX'',''AWT'')
     AND   aid1.awt_group_id is null
     AND   nvl(aid1.historical_flag,''N'')=''Y'''
  );


  add_signature(g_signatures,
    19,
    'INVOICE',
    '',
    '9342198',
    '1152559.1',
    'ap_awt_dist_wo_dff_sel.sql',
    'Reversed AWT distributions which do not have descriptive flexfield information copied from the original',
    'Apply the GDF patch following the instructions provided in [1152559.1]',
    'Y',
    'N',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id
     FROM ap_invoice_distributions_all aid,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.parent_reversal_id is not null
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.global_attribute_category is null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_distribution_id = aid.parent_reversal_id
             AND   aid1.invoice_id = aid.invoice_id
             AND   aid1.global_attribute_category is not null)
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    21,
    'INVOICE',
    '',
    '9834746',
    '1152683.1',
    'ap_self_corrct_inv_sel.sql',
    'Self-corrected invoices which cannot be canceled or reversed',
    'Apply the GDF patch following the instructions provided in [1152683.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ail.line_number
     FROM  ap_invoice_lines_all ail,
           ap_invoices_all ai,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ail.invoice_id = ail.corrected_inv_id
     AND   ai.invoice_id = ail.corrected_inv_id
     AND   nvl(match_type,''NOT_MATCHED'') IN
             (''PRICE_CORRECTION'', ''AMOUNT_CORRECTION'', ''NOT_MATCHED'' )
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    23,
    'INVOICE',
    '',
    '17311645',
    '1188825.1',
    'AP_DUP_PMT_AWT_DISTS_SEL.sql Duplicate Dists',
    'Invoices with duplicate AWT distributions created during payment with Payment Process Request (PPR)',
    'Apply the GDF patch following the instructions provided in [1188825.1]',
    'Y',
    'Y',
    impact_area_tbl('Automatic Witholding Tax', 'Period Close'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''1-A'' category,
            aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.amount,
            aid.invoice_distribution_id,
            aid.accounting_event_id,
            aid.posted_flag,
            aid.parent_reversal_id
     FROM invs,
          ap_invoice_distributions_all aid,
          ap_invoice_lines_all ail,
          ap_system_parameters_all asp
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_flag = ''A''
     AND   aid.historical_flag is null
     AND   aid.org_id = asp.org_id
     AND   ail.invoice_id = aid.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     AND   asp.create_awt_dists_type = ''PAYMENT''
     AND   aid.awt_invoice_payment_id is null
     AND   NOT EXISTS (
             SELECT ''Invoice already withheld by AutoApproval''
             FROM ap_invoices_all ai
             WHERE ai.invoice_id = aid.invoice_id
             AND   nvl(ai.awt_flag, ''N'') = ''Y'')
     AND   EXISTS (
             SELECT 1 FROM fnd_product_installations pi
             WHERE  pi.application_id = 200
             AND substr(pi.patch_level, 8, 1) = ''A'')
     UNION ALL
     SELECT ''1-B'' category,
            aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.amount,
            aid.invoice_distribution_id,
            aid.accounting_event_id,
            aid.posted_flag,
            aid.parent_reversal_id
     FROM invs,
          ap_invoice_distributions_all aid,
          ap_invoice_lines_all ail,
          ap_system_parameters_all asp
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_flag = ''A''
     AND   aid.historical_flag is null
     AND   aid.org_id = asp.org_id
     AND   ail.invoice_id = aid.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     AND   asp.create_awt_dists_type = ''PAYMENT''
     AND   ail.awt_group_id is not null
     AND   ail.pay_awt_group_id is null
     AND   NOT EXISTS (
             SELECT ''Invoice already withheld by AutoApproval''
             FROM ap_invoices_all ai
             WHERE ai.invoice_id = aid.invoice_id
             AND   nvl(ai.awt_flag, ''N'') = ''Y'')
     AND   EXISTS (
             SELECT 1 FROM fnd_product_installations pi
             WHERE  pi.application_id = 200
             AND   substr(pi.patch_level, 8, 1) <> ''A'')
     UNION ALL
     SELECT ''2-B'',
            aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.amount,
            aid.invoice_distribution_id,
            aid.accounting_event_id,
            aid.posted_flag,
            aid.parent_reversal_id
     FROM invs,
          ap_invoice_distributions_all aid,
          ap_system_parameters_all asp,
          ap_invoice_lines_all ail
     WHERE aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_flag = ''A''
     AND   aid.awt_invoice_payment_id is null
     AND   aid.historical_flag is null
     AND   aid.org_id = asp.org_id
     AND   aid.invoice_id = ail.invoice_id
     AND   aid.invoice_line_number = ail.line_number
     AND   asp.create_awt_dists_type = ''PAYMENT''
     AND   ail.awt_group_id is null
     AND   ail.pay_awt_group_id is not null
     AND   NOT EXISTS (
             SELECT ''Invoice already withheld by AutoApproval''
             FROM ap_invoices_all ai
             WHERE ai.invoice_id = aid.invoice_id
             AND   nvl(ai.awt_flag, ''N'') = ''Y'')
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    24,
    'INVOICE',
    '',
    '18681921',
    '1272497.1',
    'ap_func_curr_inv_with_base_amt_sel.sql',
    'Functional currency invoices created through import/quick invoicing which have BASE_AMOUNT populated causing incorrect accounting entries to be created.',
    'Apply the GDF patch following the instructions provided in [1272497.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_type_lookup_code invoice_type,
            ai.source,
            asp.base_currency_code base_currency,
            ai.invoice_currency_code invoice_currency,
            ai.exchange_rate,
            ai.exchange_rate_type,
            ai.exchange_date,
            ai.invoice_amount,
            ai.base_amount invoice_base_amt,
            aid.invoice_line_number,
            aid.line_type_lookup_code,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.posted_flag,
            aid.accounting_event_id event_id,
            aid.bc_event_id bc_event_id,
            aid.amount distribution_amt,
            aid.base_amount dist_base_amt,
            decode(aid.posted_flag,
              ''Y'',''Accounted'',
              ''Not Accounted'') accounting_status,
            decode(ai.attribute15,
              ''DUMMY_9884253'', ai.attribute15,
              '''') error_message,
            decode((SELECT tax.invoice_distribution_id
                    FROM ap_invoice_distributions_all tax
                    WHERE tax.line_type_lookup_code in (''NONREC_TAX'',''REC_TAX'',
                            ''TRV'',''TIPV'',''TERV'')
                    AND   ai.invoice_id = tax.invoice_id(+)
                    AND   rownum < 2),
              null, ''N'',
              ''Y'') tax_dists_exists,
            decode((SELECT tax.invoice_distribution_id
                    FROM ap_self_assessed_tax_dist_all tax
                    WHERE ai.invoice_id = tax.invoice_id(+)
                    AND   rownum < 2),
              null, ''N'',
              ''Y'') self_assess_tax_exists,
            decode((SELECT ipv.invoice_distribution_id
                    FROM ap_invoice_distributions_all ipv
                    WHERE ipv.line_type_lookup_code in (''IPV'')
                    AND   ipv.corrected_invoice_dist_id IS NULL
                    AND   ai.invoice_id = ipv.invoice_id(+)
                    AND   rownum < 2),
              null, ''N'',
              ''Y'') ipv_dists_exists,
            decode((SELECT ''variance calculated''
                    FROM ap_invoice_distributions_all aidvar
                    WHERE ai.invoice_id = aidvar.invoice_id
                    AND   (aidvar.quantity_variance is not null OR
                           aidvar.amount_variance is not null OR
                           aidvar.base_quantity_variance is not null OR
                           aidvar.base_amount_variance is not null)
                    AND   rownum < 2),
               null, ''N'',
               ''Y'') var_dists_exists
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_system_parameters_all asp
     WHERE ai.invoice_id = aid.invoice_id
     AND   ai.invoice_type_lookup_code <> ''EXPENSE REPORT''
     AND   ai.source <> ''ERS''
     AND   asp.org_id = ai.org_id
     AND   ai.invoice_currency_code = asp.base_currency_code
     AND   (aid.line_type_lookup_code NOT IN (''NONREC_TAX'',''REC_TAX'',
             ''TRV'',''TIPV'',''TERV'', ''IPV'', ''ERV'', ''AWT'') OR
            (aid.line_type_lookup_code = ''IPV'' AND
             aid.corrected_invoice_dist_id IS NOT NULL))
     AND   ((aid.base_amount  is not null AND
             aid.amount <> aid.base_amount) OR (
            EXISTS (
              SELECT 1 FROM ap_invoice_distributions_all aid1
              WHERE aid.invoice_id = aid1.invoice_id
              AND   aid1.line_type_lookup_code = ''ERV'')))
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    25,
    'INVOICE',
    '',
    '17399548',
    '1272433.1',
    'ap_canc_tax_lines_sel.sql',
    'Tax lines without distributions caused by inconsistent cancelation information in ZX_LINES and ZX_LINES_SUMMARY. These invoices are repeatedly picked up for validation even though they are already validated.',
    'Apply the GDF patch following the instructions provided in [1272433.1]',
    'Y',
    'N',
    impact_area_tbl('Validation Selection'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ail.invoice_id,
            ail.org_id,
            ail.line_number,
            ail.line_type_lookup_code,
            ail.summary_tax_line_id,
            ail.amount,
            ail.cancelled_flag,
            ail.discarded_flag
     FROM invs,
          ap_invoice_lines_all ail
     WHERE ail.line_type_lookup_code = ''TAX''
     AND   ail.summary_tax_line_id is not null
     AND   nvl(ail.cancelled_flag,''N'') = ''N''
     AND   nvl(ail.discarded_flag,''N'') = ''N''
     AND   ail.generate_dists = ''Y''
     AND   EXISTS (
             SELECT 1 FROM zx_lines zl1
             WHERE zl1.trx_id = ail.invoice_id
             AND   zl1.application_id = 200
             AND   zl1.entity_code = ''AP_INVOICES''
             AND   zl1.event_class_code IN (''STANDARD INVOICES'' ,
                     ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
             AND   zl1.summary_tax_line_id = ail.summary_tax_line_id)
     AND   NOT EXISTS (
             SELECT 1 FROM zx_lines zl
             WHERE zl.trx_id = ail.invoice_id
             AND   zl.application_id = 200
             AND   zl.entity_code = ''AP_INVOICES''
             AND   zl.event_class_code IN (''STANDARD INVOICES'' ,
                     ''PREPAYMENT INVOICES'',''EXPENSE REPORTS'')
             AND zl.summary_tax_line_id = ail.summary_tax_line_id
             AND nvl(cancel_flag,''N'') = ''N'')
     AND   NOT EXISTS (
             SELECT 1 FROM zx_lines_summary zls
             WHERE zls.trx_id = ail.invoice_id
             AND   zls.application_id = 200
             AND   zls.entity_code = ''AP_INVOICES''
             AND   zls.event_class_code IN (''STANDARD INVOICES'' ,
                     ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
             AND zls.summary_tax_line_id = ail.summary_tax_line_id
             AND nvl(zls.cancel_flag,''N'') = ''Y'')
     AND   ail.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ail.invoice_id,
            ail.org_id,
            ail.line_number,
            ail.line_type_lookup_code,
            ail.summary_tax_line_id,
            ail.amount,
            ail.cancelled_flag,
            ail.discarded_flag
     FROM invs,
          ap_invoice_lines_all ail
     WHERE ail.line_type_lookup_code = ''TAX''
     AND   ail.summary_tax_line_id is not null
     AND   nvl(ail.cancelled_flag,''N'') = ''N''
     AND   nvl(ail.discarded_flag,''N'') = ''N''
     AND   ail.generate_dists = ''Y''
     AND   EXISTS (
             SELECT 1
             FROM zx_lines zl2,
                  ap_invoice_lines_all ail2
             WHERE zl2.trx_line_id = ail2.line_number
             AND zl2.summary_tax_line_id = ail.summary_tax_line_id
             AND zl2.trx_id = ail2.invoice_id
             AND ail2.invoice_id = ail.invoice_id
             AND zl2.application_id = 200
             AND zl2.entity_code = ''AP_INVOICES''
             AND zl2.event_class_code IN (''STANDARD INVOICES'',
                   ''PREPAYMENT INVOICES''  , ''EXPENSE REPORTS'')
             AND nvl(ail2.discarded_flag,''N'') = ''Y'')
     AND   EXISTS (
             SELECT 1 FROM zx_lines zl1
             WHERE zl1.trx_id = ail.invoice_id
             AND   zl1.application_id = 200
             AND   zl1.entity_code = ''AP_INVOICES''
             AND   zl1.event_class_code IN (''STANDARD INVOICES'',
                     ''PREPAYMENT INVOICES''  , ''EXPENSE REPORTS'')
             AND zl1.summary_tax_line_id = ail.summary_tax_line_id)
     AND   NOT EXISTS (
             SELECT 1 FROM zx_lines zl
             WHERE zl.trx_id = ail.invoice_id
             AND   zl.application_id = 200
             AND   zl.entity_code = ''AP_INVOICES''
             AND   zl.event_class_code IN (''STANDARD INVOICES'',
                     ''PREPAYMENT INVOICES''  , ''EXPENSE REPORTS'')
             AND   zl.summary_tax_line_id = ail.summary_tax_line_id
             AND   NVL(cancel_flag,''N'') = ''Y'')
     AND   NOT EXISTS (
             SELECT 1 FROM zx_lines_summary zls
             WHERE zls.trx_id = ail.invoice_id
             AND   zls.application_id = 200
             AND   zls.entity_code = ''AP_INVOICES''
             AND   zls.event_class_code IN (''STANDARD INVOICES'',
                     ''PREPAYMENT INVOICES''  , ''EXPENSE REPORTS'')
             AND   zls.summary_tax_line_id = ail.summary_tax_line_id
             AND   NVL(zls.cancel_flag,''N'') = ''Y'' )
     AND   ail.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    26,
    'INVOICE',
    '',
    '21087115',
    '1272440.1',
    'ap_wrong_bal_segment_sel.sql',
    'Invoices which are not part of the legal entity or ledger context of the balancing segment values of its account code combinations result in error# 95311 during accounting',
    'Apply the GDF patch following the instructions provided in [1272440.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT a.invoice_id,
            a.invoice_num,
            a.org_id,
            a.invoice_line_number,
            a.invoice_distribution_id,
            a.line_type_lookup_code,
            a.posted_flag,
            a.accounting_date,
            a.period_name,
            a.chart_of_accounts_id,
            a.set_of_books_id,
            a.dist_match_type,
            a.po_distribution_id,
            a.rcv_transaction_id,
            a.detail_tax_dist_id,
            a.detail_posting_allowed_flag,
            a.enabled_flag,
            a.account_type,
            a.summary_flag,
            a.old_code_combid,
            a.new_code_combid,
            a.old_balancing_seg_value,
            a.new_balancing_seg_value,
            a.old_concat_account,
            a.new_concat_account,
            a.error_message,
            a.bal_seg_valid
     FROM (
            SELECT /*+ leading(invs) */
                   ai.invoice_date,
                   ai.org_id,
                   ai.invoice_num,
                   ai.invoice_id,
                   aid.invoice_line_number,
                   aid.invoice_distribution_id,
                   aid.line_type_lookup_code,
                   aid.posted_flag,
                   aid.accounting_date,
                   aid.period_name,
                   gsb.chart_of_accounts_id,
                   aid.set_of_books_id,
                   aid.dist_match_type,
                   aid.po_distribution_id,
                   aid.rcv_transaction_id,
                   aid.detail_tax_dist_id,
                   gcc.detail_posting_allowed_flag,
                   gcc.enabled_flag,
                   gcc.account_type,
                   gcc.summary_flag,
                   nvl((SELECT ''1'' /*+cardinality(glsv 1)*/
                        FROM gl_ledger_segment_values glsv
                        WHERE glsv.segment_value =
                                ap_invoice_distributions_pkg.get_balancing_segment_value(
                                  aid.dist_code_combination_id,
                                  aid.set_of_books_id)
                        AND glsv.segment_type_code = ''B''
                        AND glsv.ledger_id = aid.set_of_books_id
                        AND aid.accounting_date BETWEEN
                              nvl(glsv.start_date, aid.accounting_date) AND
                              nvl(glsv.end_date, aid.accounting_date)
                        AND rownum = 1), 0) "BAL_SEG_VALID",
                   ap_invoice_distributions_pkg.get_balancing_segment_value(
                     aid.dist_code_combination_id,
                     aid.set_of_books_id) "OLD_BALANCING_SEG_VALUE",
                   decode(gcc.segment1,
                     ''DUMMY'',gcc.segment1,
                     '''') "NEW_BALANCING_SEG_VALUE",
                   aid.dist_code_combination_id "OLD_CODE_COMBID",
                   decode(gcc.code_combination_id,
                     000000,gcc.code_combination_id,
                     null) "NEW_CODE_COMBID",
                   fnd_flex_ext.get_segs(''SQLGL'', ''GL#'', gsb.chart_of_accounts_id,
                     aid.dist_code_combination_id) "OLD_CONCAT_ACCOUNT",
                     decode(aid.global_attribute_category,
                       ''DUMMY'',aid.global_attribute_category,
                       '''') "NEW_CONCAT_ACCOUNT",
                   decode(aid.global_attribute1,
                     ''DUMMY'',aid.global_attribute1,
                     '''') "ERROR_MESSAGE"
            FROM (
                   ##$$IVIEW$$##
                 ) invs,
                 ap_invoices_all              ai,
                 ap_invoice_distributions_all aid,
                 ap_system_parameters_all     asp,
                 gl_code_combinations         gcc,
                 gl_ledgers                   gl,
                 gl_sets_of_books             gsb
            WHERE ai.invoice_id = invs.invoice_id
            AND   aid.invoice_id = ai.invoice_id
            AND   aid.dist_code_combination_id = gcc.code_combination_id
            AND   aid.set_of_books_id = gl.ledger_id
            AND   aid.historical_flag is null
            AND   aid.posted_flag <> ''Y''
            AND   nvl(gl.bal_seg_value_option_code, ''A'') <> ''A''
            AND   ai.org_id = asp.org_id
            AND   asp.set_of_books_id = gsb.set_of_books_id
            UNION ALL
            SELECT /*+ leading(invs) */
                   ai.invoice_date,
                   ai.org_id,
                   ai.invoice_num,
                   ai.invoice_id,
                   aid.invoice_line_number,
                   aid.invoice_distribution_id,
                   aid.line_type_lookup_code,
                   aid.posted_flag,
                   aid.accounting_date,
                   aid.period_name,
                   gsb.chart_of_accounts_id,
                   aid.set_of_books_id,
                   aid.dist_match_type,
                   aid.po_distribution_id,
                   aid.rcv_transaction_id,
                   aid.detail_tax_dist_id,
                   gcc.detail_posting_allowed_flag,
                   gcc.enabled_flag,
                   gcc.account_type,
                   gcc.summary_flag,
                   nvl((
                     SELECT ''1'' /*+cardinality(glsv 1)*/
                     FROM gl_ledger_segment_values glsv
                     WHERE glsv.segment_value =
                             ap_invoice_distributions_pkg.get_balancing_segment_value(
                               aid.dist_code_combination_id,
                               aid.set_of_books_id)
                     AND   glsv.segment_type_code = ''B''
                     AND   glsv.ledger_id = aid.set_of_books_id
                     AND   aid.accounting_date BETWEEN
                             nvl(glsv.start_date, aid.accounting_date) AND
                             nvl(glsv.end_date, aid.accounting_date)
                     AND   rownum = 1), 0) "BAL_SEG_VALID",
                   ap_invoice_distributions_pkg.get_balancing_segment_value(
                     aid.dist_code_combination_id,
                     aid.set_of_books_id) "OLD_BALANCING_SEG_VALUE",
                   decode(gcc.segment1,
                     ''DUMMY'',gcc.segment1,'''') "NEW_BALANCING_SEG_VALUE",
                   aid.dist_code_combination_id "OLD_CODE_COMBID",
                   decode(gcc.code_combination_id,
                     000000,gcc.code_combination_id,null) "NEW_CODE_COMBID",
                   fnd_flex_ext.get_segs(''SQLGL'',
                     ''GL#'',
                     gsb.chart_of_accounts_id,
                     aid.dist_code_combination_id) "OLD_CONCAT_ACCOUNT",
                     decode(aid.global_attribute_category,
                       ''DUMMY'',aid.global_attribute_category,'''') "NEW_CONCAT_ACCOUNT",
                   decode(aid.global_attribute1,
                       ''DUMMY'',aid.global_attribute1,'''') "ERROR_MESSAGE"
            FROM (
                   ##$$IVIEW$$##
                 ) invs,
                 ap_invoices_all ai,
                 ap_self_assessed_tax_dist_all aid,
                 gl_ledgers gl,
                 gl_code_combinations gcc,
                 ap_system_parameters_all asp,
                 gl_sets_of_books gsb
            WHERE ai.invoice_id = invs.invoice_id
            AND   ai.historical_flag is null
            AND   aid.invoice_id = ai.invoice_id
            AND   aid.posted_flag <> ''Y''
            AND   aid.dist_code_combination_id = gcc.code_combination_id
            AND   aid.set_of_books_id = gl.ledger_id
            AND   nvl(gl.bal_seg_value_option_code, ''A'') <> ''A''
            AND   ai.org_id = asp.org_id
            AND   asp.set_of_books_id = gsb.set_of_books_id
          ) a
     WHERE a.bal_seg_valid = 0'
  );


  add_signature(g_signatures,
    27,
    'INVOICE',
    '',
    '19637587',
    '1266869.1',
    'AP_MISC_INVOICE_DIAG.sql',
    'Multiple common invoice related issues. See note 1266869.1 for a full listing of the detailed issues captured by this query',
    'Apply the GDF patch following the instructions provided in [1266869.1]',
    'Y',
    'Y',
    impact_area_tbl('Invoice Cancellation', 'Validation Selection'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai, aid) */
            1 corruption_type,
            aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id child_id,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.posted_flag
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          financials_system_params_all fsp
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.posted_flag = ''Y''
     AND   ai.org_id = fsp.org_id
     AND   ((nvl(fsp.purch_encumbrance_flag,''N'') = ''N'' AND
             aid.match_status_flag NOT IN (''T'', ''A'')) OR
            (nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y'' AND
             aid.match_status_flag <> ''A''))
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM xla_events x
             WHERE x.application_id = 200
             AND   x.event_id = aid.accounting_event_id
             AND   x.event_status_code IN (''N'', ''P'')
             AND   x.process_status_code = ''P'')
     UNION ALL
     SELECT /*+ordered use_nl(asa) */
            1.1 corruption_type,
            asa.invoice_id,
            asa.org_id,
            asa.invoice_distribution_id,
            asa.accounting_event_id,
            asa.bc_event_id,
            asa.posted_flag
     FROM invs,
          ap_self_assessed_tax_dist_all asa
     WHERE asa.invoice_id = invs.invoice_id
     AND   asa.posted_flag = ''Y''
     AND   nvl(asa.match_status_flag,''N'') <> ''A''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM xla_Events x
             WHERE x.application_id = 200
             AND   x.event_id = asa.accounting_event_id
             AND   x.event_status_code IN (''N'', ''P'')
             AND   x.process_status_code = ''P'')
     UNION ALL
     SELECT /*+ ordered use_nl(aid) */
            2,
            aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.posted_flag
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE line_type_lookup_code IN (''REC_TAX'',''NONREC_TAX'',
             ''TRV'',''TERV'',''TIPV'')
     AND   detail_tax_dist_id is null
     AND   summary_tax_line_id is null
     AND   nvl(aid.historical_flag, ''N'') = ''N''
     AND   aid.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(asad) */
            3,
            asad.invoice_id,
            asad.org_id,
            asad.invoice_distribution_id,
            asad.accounting_event_id,
            asad.bc_event_id,
            asad.posted_flag
     FROM invs,
          ap_self_assessed_tax_dist_all asad
     WHERE EXISTS (
             SELECT /*+ no_unnest */ 1 FROM zx_rec_nrec_dist zd
             WHERE zd.trx_id = asad.invoice_id
             AND   zd.rec_nrec_tax_dist_id = asad.detail_tax_dist_id
             AND   zd.entity_code = ''AP_INVOICES''
             AND   zd.event_class_code IN (''STANDARD INVOICES'',
                     ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
             AND   zd.application_id = 200
             AND   zd.self_assessed_flag = ''N'')
     AND   asad.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(aid) */
            4,
            aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.posted_flag
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE aid.detail_tax_dist_id is not null
     AND   nvl(aid.historical_flag, ''N'') = ''N''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM zx_rec_nrec_dist zd
             WHERE zd.trx_id = aid.invoice_id
             AND   zd.rec_nrec_tax_dist_id = aid.detail_tax_dist_id
             AND   zd.entity_code = ''AP_INVOICES''
             AND   zd.event_class_code IN (''STANDARD INVOICES'',
                     ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
             AND   zd.application_id = 200
             AND   zd.self_assessed_flag = ''Y'')
     AND   aid.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, asad) */
            5,
            ai.invoice_id,
            ai.org_id,
            asad.invoice_distribution_id,
            null,
            null,
            null
     FROM invs,
          ap_invoices_all ai,
          ap_self_assessed_tax_dist_all asad
     WHERE ai.invoice_id = asad.invoice_id
     AND   asad.accounting_event_id is null
     AND   asad.bc_event_id is null
     AND   ai.cancelled_date is null
     AND   nvl(ai.force_revalidation_flag,''N'') <> ''Y''
     AND   ap_invoices_pkg.get_approval_status(
             ai.invoice_id,
             ai.invoice_amount,
             ai.payment_status_flag,
             ai.invoice_type_lookup_code) IN (
               ''APPROVED'',''AVAILABLE'',''UNPAID'',''FULL'')
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(aha) */
            6,
            aha.invoice_id,
            aha.org_id,
            aha.hold_id,
            null,
            null,
            null
     FROM invs,
          ap_holds_all aha
     WHERE hold_lookup_code = ''CANNOT EXECUTE ALLOCATION''
     AND   release_lookup_code is null
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = aha.invoice_id
             AND   line_type_lookup_code IN(''FREIGHT'',''MISCELLANEOUS'')
             AND   nvl(discarded_flag,''N'') = ''N''
             AND   nvl(generate_dists,''N'') = ''Y'')
     AND   aha.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai) */
            7,
            ai.invoice_id,
            ai.org_id,
            null,
            null,
            null,
            null
     FROM invs,
          ap_invoices_all ai
     WHERE nvl(ai.historical_flag, ''N'') = ''N''
     AND   ai.cancelled_date is not null
     AND   nvl(ai.amount_paid,0) <> 0
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai) */
            8,
            ai.invoice_id,
            ai.org_id,
            null,
            null,
            null,
            null
     FROM invs,
          ap_invoices_all ai
     WHERE ai.cancelled_date is not null
     AND   ai.invoice_amount = 0
     AND   nvl(ai.historical_flag, ''N'') = ''N''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_payment_schedules_all aps
             WHERE aps.invoice_id = ai.invoice_id
             AND   aps.hold_flag = ''Y'')
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aidrev) */
            9,
            ai.invoice_id,
            ai.org_id,
            aidrev.invoice_distribution_id,
            aidrev.accounting_event_id,
            aidrev.bc_event_id,
            aidrev.posted_flag
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aidrev
     WHERE ai.invoice_id = aidrev.invoice_id
     AND   nvl(ai.historical_flag,''N'') = ''N''
     AND   aidrev.parent_reversal_id  is not null
     AND   aidrev.reversal_flag = ''Y''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aidori
             WHERE aidori.invoice_id = aidrev.invoice_id
             AND   aidori.invoice_line_number = aidrev.invoice_line_number
             AND   aidori.invoice_distribution_id = aidrev.parent_reversal_id
             AND   abs(nvl(aidori.amount,0)) <> abs(nvl(aidrev.amount,0)))
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT  /*+ ordered use_nl(aid) */
             10,
            aid.invoice_id ,
            aid.org_id,
            aid.invoice_distribution_id ,
            aid.accounting_event_id ,
            aid.bc_event_id ,
            aid.posted_flag
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE match_status_flag = ''S''
     AND   nvl(aid.historical_flag,''N'') = ''N''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoices_all ai
             WHERE ai.invoice_id = aid.invoice_id
             AND   ai.validation_request_id is null)
     AND   aid.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid) */
            11,
            ai.invoice_id,
            ai.org_id,
            aid.invoice_distribution_id,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.posted_flag
     FROM invs,
          ap_invoices_all  ai,
          ap_invoice_distributions_all aid,
          financials_system_params_all fsp
     WHERE ai.org_id = fsp.org_id
     AND   ai.invoice_id = aid.invoice_id
     AND   ai.cancelled_date is not null
     AND   aid.accounting_event_id is not null
     AND   ai.invoice_amount = 0
     AND   nvl(ai.historical_flag, ''N'') = ''N''
     AND   ai.validation_request_id is null
     AND   0 = (
             SELECT /*+ no_unnest */ sum(aid1.amount )
             FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = ai.invoice_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid2
             WHERE aid2.invoice_id = ai.invoice_id
             AND   aid2.parent_reversal_id is null
             AND   aid2.reversal_flag = ''Y''
             AND   1 <> (
                     SELECT /*+ no_unnest */ count(1)
                     FROM ap_invoice_distributions_all aid3
                     WHERE aid3.parent_reversal_id = aid2.invoice_distribution_id))
     AND   ((nvl(aid.match_status_flag, ''N'') <> ''A'' AND
             fsp.purch_encumbrance_flag = ''Y'') OR
            (nvl(aid.match_status_flag, ''N'') NOT IN (''A'',''T'') AND
             fsp.purch_encumbrance_flag = ''N''))
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, ail, aid) */
            12,
            ai.invoice_id,
            ai.org_id,
            aid.invoice_distribution_id,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.posted_flag
     FROM invs,
          ap_invoices_all ai,
          financials_system_params_all fsp,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   ail.invoice_id = ai.invoice_id
     AND   aid.invoice_id = ail.invoice_id
     AND   ai.org_id = fsp.org_id
     AND   (nvl(ail.cancelled_flag,''N'') = ''Y'' OR
            nvl(ail.discarded_flag,''N'') = ''Y'')
     AND   ai.cancelled_date is not null
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.parent_reversal_id is not null
     AND   aid.awt_invoice_payment_id is null
     AND   aid.reversal_flag = ''Y''
     AND   aid.accounting_event_id is null
     AND   nvl(aid.match_status_flag, ''N'') = ''N''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM xla_transaction_entities_upg xte,
                  xla_events xe
             WHERE xte.entity_id = xe.entity_id
             AND   xte.ledger_id = aid.set_of_books_id
             AND   nvl(xte.source_id_int_1,-99) = aid.invoice_id
             AND   xte.entity_code = ''AP_INVOICES''
             AND   xte.application_id = 200
             AND   xe.event_type_code LIKE ''%CANCELLED''
             AND   xe.budgetary_control_flag = ''N'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.release_lookup_code is null)
     AND   fsp.purch_encumbrance_flag = ''N'''
  );


  add_signature(g_signatures,
    28,
    'INVOICE',
    '',
    '20407191',
    '1322304.1',
    'ap_prepay_dist_id_pop_sel.sql',
    'Tax distributions created during prepay application/unapplication with missing PREPAY_DISTRIBUTION_ID values',
    'Apply the GDF patch following the instructions provided in [1322304.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT 1 corruption_type,
            aid_tax.invoice_id,
            aid_tax.invoice_distribution_id,
            aid_tax.parent_reversal_id,
            null corr_prepay_dist_id,
            null prepaytax_acctg_event_id,
            null prepaytax_bc_event_id,
            null prepay_acctg_event_id,
            null prepay_bc_event_id
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid_tax,
          ap_invoice_distributions_all aid_prepay
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid_tax.charge_applicable_to_dist_id = aid_prepay.invoice_distribution_id
     AND   aid_tax.invoice_id = aid_prepay.invoice_id
     AND   ai.invoice_id = aid_tax.invoice_id
     AND   ai.historical_flag = ''Y''
     AND   aid_tax.prepay_distribution_id is null
     AND   aid_prepay.line_type_lookup_code = ''PREPAY''
     AND   aid_tax.line_type_lookup_code IN (''REC_TAX'', ''NONREC_TAX'')
     AND   aid_tax.prepay_tax_parent_id is not null
     AND   aid_tax.historical_flag = ''Y''
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid_sub
             WHERE aid_sub.invoice_id = ai.invoice_id
             AND   nvl(aid_sub.historical_flag,''N'') = ''N''
             UNION ALL
             SELECT 1
             FROM ap_invoice_distributions_all aid_sub,
                  xla_events xe_sub,
                  ap_accounting_events_all aae_sub
             WHERE aid_sub.accounting_event_id = xe_sub.event_id
             AND   xe_sub.event_id = aae_sub.accounting_event_id
             AND   xe_sub.upg_batch_id = -9999
             AND   aid_sub.invoice_id = ai.invoice_id
             UNION ALL
             SELECT 1 FROM ap_invoice_payments_all aip_sub,
                    ap_payment_history_all aph_sub,
                    xla_events xe_sub,
                    ap_accounting_events_all aae_sub
            WHERE aip_sub.invoice_id = ai.invoice_id
            AND   aip_sub.check_id = aph_sub.check_id
            AND   aph_sub.accounting_event_id = xe_sub.event_id
            AND   xe_sub.application_id = 200
            AND   xe_sub.event_id = aae_sub.accounting_event_id
            AND   xe_sub.upg_batch_id = -9999
            UNION ALL
            SELECT 1
            FROM ap_invoice_distributions_all aid_sub,
                 xla_events xe_sub,
                 xla_ae_headers xah_sub
            WHERE aid_sub.invoice_id = ai.invoice_id
            AND   aid_sub.accounting_event_id = xe_sub.event_id
            AND   xe_sub.application_id = 200
            AND   xe_sub.event_id = xah_sub.event_id
            AND   xah_sub.application_id = 200
            AND   xah_sub.upg_batch_id  is null
            UNION ALL
            SELECT 1
            FROM ap_invoice_payments_all aip_sub,
                 ap_payment_history_all aph_sub,
                 xla_events xe_sub,
                 xla_ae_headers xah_sub
            WHERE aip_sub.invoice_id = ai.invoice_id
            AND   aip_sub.check_id = aph_sub.check_id
            AND   aph_sub.accounting_event_id = xe_sub.event_id
            AND   xe_sub.application_id = 200
            AND   xe_sub.event_id = xah_sub.event_id
            AND   xah_sub.application_id = 200
            AND   xah_sub.upg_batch_id is null)
     UNION ALL
     SELECT 2,
            aid_taxrev.invoice_id,
            aid_taxrev.invoice_distribution_id,
            aid_taxrev.parent_reversal_id,
            aid_tax.prepay_distribution_id corr_prepay_dist_id,
            aid_taxrev.accounting_event_id prepaytax_acctg_event_id,
            aid_taxrev.bc_event_id prepaytax_bc_event_id,
            aid_prepay.accounting_event_id prepay_acctg_event_id,
            aid_prepay.bc_event_id prepay_bc_event_id
     FROM invs,
          ap_invoice_distributions_all aid_taxrev,
          ap_invoice_distributions_all aid_tax,
          ap_invoice_distributions_all aid_prepay
     WHERE aid_tax.invoice_id = invs.invoice_id
     AND   aid_tax.invoice_id = aid_taxrev.invoice_id
     AND   aid_tax.invoice_distribution_id = aid_taxrev.parent_reversal_id
     AND   aid_prepay.invoice_id = aid_taxrev.invoice_id
     AND   aid_prepay.invoice_distribution_id = aid_taxrev.charge_applicable_to_dist_id
     AND   aid_taxrev.detail_tax_dist_id is not null
     AND   nvl(aid_taxrev.historical_flag, ''N'') = ''N''
     AND   nvl(aid_tax.historical_flag, ''N'') = ''Y''
     AND   aid_prepay.line_type_lookup_code = ''PREPAY''
     AND   aid_taxrev.line_type_lookup_code IN (''REC_TAX'', ''NONREC_TAX'')
     AND   aid_taxrev.prepay_distribution_id is null'
  );


  add_signature(g_signatures,
    29,
    'INVOICE',
    '',
    '16981628',
    '1322630.1',
    'ap_ebtax_sync_sel.sql',
    'Amounts or base amounts are out of synch between Payables and EBtax',
    'Apply the GDF patch following the instructions provided in [1322630.1]',
    'Y',
    'Y',
    impact_area_tbl('EBTax'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai, aid, zd) */
            ''Type 1'' category,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            zd.rec_nrec_tax_amt,
            aid.base_amount,
            zd.rec_nrec_tax_amt_funcl_curr,
            aid.posted_flag,
            aid.historical_flag
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          zx_rec_nrec_dist zd
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.invoice_id = zd.trx_id
     AND   aid.detail_tax_dist_id = zd.rec_nrec_tax_dist_id
     AND   zd.application_id = 200
     AND   zd.entity_code = ''AP_INVOICES''
     AND   nvl(aid.historical_flag, ''N'') = ''N''
     AND   zd.event_class_code IN (''STANDARD INVOICES'',
             ''EXPENSE REPORTS'', ''PREPAYMENT INVOICES'')
     AND   aid.line_type_lookup_code IN (''REC_TAX'', ''NONREC_TAX'')
     AND   (nvl(aid.amount,-999999999) <> zd.rec_nrec_tax_amt OR
            nvl(aid.base_amount,-999999999) <> zd.rec_nrec_tax_amt_funcl_curr)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aidv
             WHERE aid.detail_tax_dist_id = aidv.detail_tax_dist_id
             AND aid.line_type_lookup_code = ''NONREC_TAX''
             AND aidv.line_type_lookup_code IN (''TERV'', ''TIPV'', ''TRV''))
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid, zd) */
            ''Type 2'',
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            zd.rec_nrec_tax_amt,
            aid.base_amount,
            zd.rec_nrec_tax_amt_funcl_curr,
            aid.posted_flag,
            aid.historical_flag
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          zx_rec_nrec_dist zd
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.invoice_id = zd.trx_id
     AND   aid.detail_tax_dist_id = zd.rec_nrec_tax_dist_id
     AND   zd.application_id = 200
     AND   zd.entity_code = ''AP_INVOICES''
     AND   zd.event_class_code IN (''STANDARD INVOICES'',
             ''EXPENSE REPORTS'', ''PREPAYMENT INVOICES'')
     AND   ai.exchange_rate is null
     AND   aid.amount <> 0
     AND   aid.base_amount = 0
     AND   nvl(ai.historical_flag, ''N'') = ''Y'''
  );


  add_signature(g_signatures,
    30,
    'INVOICE',
    '',
    '17495389',
    '1359299.1',
    'ap_misc_del_sel.sql',
    'Canceled invoices having extra miscellaneous lines and distributions',
    'generic datafix patch (GDF)',
    'Y',
    'Y',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ail.line_type_lookup_code,
            ail.line_number,
            ail.amount
     FROM ap_invoice_lines_all ail,
          ap_invoices_all ai,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.cancelled_date is not null
     AND   ail.invoice_id = ai.invoice_id
     AND   nvl(ail.historical_flag, ''N'') = ''N''
     AND   ail.line_type_lookup_code = ''MISCELLANEOUS''
     AND   (ail.amount <> 0 OR
            (SELECT sum(amount) FROM ap_invoice_distributions_all
             WHERE invoice_id = ail.invoice_id
             AND   invoice_line_number = ail.line_number) <> 0)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    31,
    'INVOICE',
    '',
    '18018607',
    '1329681.1',
    'AP_DISCARD_LINE_SEL.sql',
    'Matched distributions are reversed when line is discarded but the line is not discarded',
    'Apply the GDF patch following the instructions provided in [1329681.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Discard'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ail.line_number,
            aid.parent_reversal_id inv_dist_id,
            ail.line_type_lookup_code line_type,
            ail.discarded_flag,
            1 corruption_type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = ail.invoice_id
     AND   ail.invoice_id = aid.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     AND   ai.cancelled_date is null
     AND   nvl(ail.historical_flag,''N'') = ''N''
     AND   nvl(ail.discarded_flag,''N'') = ''Y''
     AND   nvl(aid.posted_flag,''N'') <> ''Y''
     AND   nvl(aid.reversal_flag,''N'') = ''Y''
     AND   aid.parent_reversal_id is not null
     AND   (aid.amount)*-1 <> (
             SELECT amount FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = aid.invoice_id
             AND   aid1.invoice_distribution_id = aid.parent_reversal_id)
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ail.invoice_id,
             null,
             ail.org_id,
             ail.line_number,
             null,
             ail.line_type_lookup_code,
             ail.discarded_flag,
             2
     FROM invs,
          ap_invoice_lines_all ail
     WHERE nvl(ail.discarded_flag,''N'') = ''Y''
     AND   ail.amount <> 0
     AND   nvl(ail.historical_flag,''N'') <> ''Y''
     AND   (NOT EXISTS (
              SELECT 1 FROM ap_invoice_distributions_all aid
              WHERE aid.invoice_id = ail.invoice_id
              AND   aid.invoice_line_number = ail.line_number) OR
           (SELECT sum(aid.amount) FROM ap_invoice_distributions_all aid
            WHERE aid.invoice_id = ail.invoice_id
            AND   aid.invoice_line_number = ail.line_number) = 0)
     AND   ail.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ail.line_number,
            null,
            ail.line_type_lookup_code,
            ail.discarded_flag,
            3
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = ail.invoice_id
     AND   nvl(ail.discarded_flag,''N'') <> ''Y''
     AND   nvl(ail.cancelled_flag, ''N'') <> ''Y''
     AND   ail.po_line_location_id is not null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all dist
             WHERE dist.invoice_id = ail.invoice_id
             AND   dist.invoice_line_number = ail.line_number
             AND   dist.po_distribution_id is not null
             AND   dist.reversal_flag = ''Y''  )
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    32,
    'INVOICE',
    '',
    '17480384',
    '1276536.1',
    'ap_duplicate_batch_names_sel.sql',
    'Invoice batches with duplicate batch names',
    'Apply the GDF patch following the instructions provided in [1276536.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Data'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''Duplicate Batch Name'' Issue_type,
            ab.batch_id,
            ab.org_id,
            ab.batch_name,
            ab.batch_name||''-''||to_char(org_id) NEW_BATCH_NAME,
            ''N/A'' old_inv_type,
            ''N/A'' new_inv_type
     FROM ap_batches_all ab
     WHERE EXISTS (
             SELECT 1 FROM ap_batches_all ab1
             WHERE ab1.batch_name = ab.batch_name
             AND   ab1.batch_id    <> ab.batch_id )
     AND   ab.batch_id IN (
             SELECT a.batch_id
             FROM ap_invoices_all a,
                  invs
             WHERE a.invoice_id = invs.invoice_id)
     UNION ALL
     SELECT ''Incorrect Invoice Type'',
            ab.batch_id,
            ab.org_id,
            ab.batch_name,
            ''N/A'',
            ab.invoice_type_lookup_code,
            ''STANDARD''
     FROM ap_batches_all ab
     WHERE ab.invoice_type_lookup_code IN (''QUICKMATCH'', ''QUICKDEFAULT'')
     AND   ab.batch_id IN (
             SELECT a.batch_id
             FROM ap_invoices_all a,
                  invs
             WHERE a.invoice_id = invs.invoice_id)'
  );


  add_signature(g_signatures,
    33,
    'INVOICE',
    '',
    '17428747',
    '1543361.1',
    'ap_po_line_sync_sel.sql',
    'Purchase order shipments which have quantity or amount data which does not match the values on the distributions',
    'Apply the GDF patch following the instructions provided in [1543361.1]',
    'Y',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT /*+ ordered use_nl(pll, pod) */
            pll.po_header_id,
            pll.org_id,
            pll.line_location_id,
            nvl(pll.quantity_billed,0) qty_billed,
            sum(nvl(pod.quantity_billed,0)) dist_qty_billed,
            nvl(pll.amount_billed,0) amt_billed,
            sum(nvl(pod.amount_billed,0)) dist_amt_billed,
            nvl(pll.quantity_financed,0) qty_financed,
            sum(nvl(pod.quantity_financed,0)) dist_qty_financed,
            nvl(pll.amount_financed,0) amt_financed,
            sum(nvl(pod.amount_financed,0)) dist_amt_financed,
            nvl(pll.quantity_recouped,0) qty_recouped,
            sum(nvl(pod.quantity_recouped,0)) dist_qty_recouped,
            nvl(pll.amount_recouped,0) amt_recouped,
            sum(nvl(pod.amount_recouped,0)) dist_amt_recouped
     FROM (
             SELECT /*+ no_merge ordered use_nl(ail) */ DISTINCT
                    ail.po_header_id
             FROM (
                    ##$$IVIEW$$##
                  ) invs,
                  ap_invoice_lines_all ail
             WHERE ail.invoice_id = invs.invoice_id
           ) pos,
          po_line_locations_all pll,
          po_distributions_all pod
     WHERE pll.line_location_id = pod.line_location_id
     AND   pll.po_header_id = pos.po_header_id
     GROUP BY pll.po_header_id, pll.org_id, pll.line_location_id,
              pll.quantity_billed,pll.amount_billed, pll.quantity_financed,
              pll.amount_financed, pll.quantity_recouped, pll.amount_recouped
     HAVING  (nvl(pll.quantity_billed,0) <> sum(nvl(pod.quantity_billed,0)) OR
              nvl(pll.amount_billed,0) <> sum(nvl(pod.amount_billed,0)) OR
              nvl(pll.quantity_financed,0) <> sum(nvl(pod.quantity_financed,0)) OR
              nvl(pll.amount_financed,0) <> sum(nvl(pod.amount_financed,0)) OR
              nvl(pll.quantity_recouped,0) <> sum(nvl(pod.quantity_recouped,0)) OR
              nvl(pll.amount_recouped,0) <> sum(nvl(pod.amount_recouped,0)))'
  );


  add_signature(g_signatures,
    34,
    'INVOICE',
    '',
    '13538637',
    '1276069.1',
    'zx_orphn_tax_lines_sel.sql',
    'Tax lines with no corresponding taxable line in AP_INVOICE_LINES_ALL.  These lines cause issues in validation and invoice cancelation',
    'Apply the GDF patch following the instructions provided in [1276069.1]',
    'Y',
    'N',
    impact_area_tbl('Validation Selection'),
    'SELECT /*+ ordered use_nl(ai, zl) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            zl.trx_id,
            zl.trx_line_id,
            zl.trx_line_number,
            zl.tax_line_id,
            zl.entity_code,
            zl.event_class_code,
            zl.tax_only_line_flag,
            zl.tax_rate_id,
            zl.tax_rate
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          zx_lines zl
     WHERE zl.application_id = 200
     AND   zl.entity_code = ''AP_INVOICES''
     AND   zl.event_class_code IN (''STANDARD INVOICES'', ''PREPAYMENT INVOICES'',
             ''EXPENSE REPORTS'')
     AND   nvl(zl.tax_only_line_flag,''N'') = ''N''
     AND   zl.trx_id = ai.invoice_id
     AND   ai.cancelled_date is null
     AND   ai.temp_cancelled_amount is null
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = zl.trx_id
             AND   ail.line_type_lookup_code NOT IN (''TAX'',''AWT'')
             AND   ail.line_number = zl.trx_line_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    37,
    'INVOICE',
    '',
    '22297430',
    '1276043.1',
    'ap_wrong_base_amt_sel.sql',
    'Identifies a series of invoice related issues with amounts and base amounts.  See note 1276043.1 for the complete list of issues addressed in this query',
    'Apply the GDF patch following the instructions provided in [1276043.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.cancelled_date,
            ''header base amount issue'' reason
     FROM invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp
     WHERE ai.exchange_rate is not null
     AND   ai.org_id = asp.org_id
     AND   ap_utilities_pkg.ap_round_currency(
              invoice_amount * exchange_rate, base_currency_code)
              <> nvl(ai.base_amount,0)
     AND   ai.invoice_currency_code <> asp.base_currency_code
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered us_nl(ai) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.cancelled_date,
            ''lines base amount issue''
     FROM  invs,
           ap_invoices_all ai,
           ap_system_parameters_all asp
     WHERE ai.exchange_rate is not null
     AND   ai.org_id = asp.org_id
     AND   ai.invoice_currency_code <> asp.base_currency_code
     AND   ap_invoices_utility_pkg.get_approval_status(
             ai.invoice_id,ai.invoice_amount, ai.payment_status_flag,
             ai.invoice_type_lookup_code) <> ''NEVER APPROVED''
     AND   ai.invoice_type_lookup_code <> ''PO PRICE ADJUST''
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ ''Adjustment corrections exists''
             FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.dist_match_type=''ADJUSTMENT_CORRECTION'')
     AND   ai.invoice_amount = (
             SELECT sum(ail.amount) +
                      decode(nvl(ai.net_of_retainage_flag,''N''),
                        ''Y'',sum(nvl(retained_amount,0)),0)
             FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = ai.invoice_id
             AND   ail.line_type_lookup_code <> ''AWT''
             AND   ((ail.prepay_invoice_id is not null AND
                     nvl(ail.invoice_includes_prepay_flag, ''N'') = ''Y'') OR
                    ail.prepay_invoice_id is null))
     AND   nvl(ai.base_amount,0) <> (
             SELECT sum(nvl(base_amount,0))  +
                      decode(nvl(ai.net_of_retainage_flag,''N''),
                        ''Y'',ap_utilities_pkg.ap_round_currency(
                        sum(nvl(retained_amount,0))*ai.exchange_rate,
                        asp.base_currency_code), 0)
             FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = ai.invoice_id
             AND   ail.line_type_lookup_code <> ''AWT''
             AND   ((ail.prepay_invoice_id is not null AND
                     nvl(ail.invoice_includes_prepay_flag, ''N'') = ''Y'') OR
                    ail.prepay_invoice_id is null))
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, ail) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.cancelled_date,
            ''dists base amount issue''
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_system_parameters_all asp
     WHERE ai.exchange_rate is not null
     AND   ai.invoice_id = ail.invoice_id
     AND   ai.org_id = asp.org_id
     AND   ai.invoice_currency_code <> asp.base_currency_code
     AND   ail.base_amount is not null
     AND   ai.invoice_type_lookup_code <> ''PO PRICE ADJUST''
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ ''unvalidated dists exists''
             FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = ai.invoice_id
             AND   (aid1.dist_match_type=''ADJUSTMENT_CORRECTION'' OR
                    nvl(aid1.match_status_flag,''N'') = ''N''))
     AND   ail.amount = (
             SELECT /*+ no_unnest */ sum(aid2.amount)
             FROM ap_invoice_distributions_all aid2
             WHERE aid2.invoice_id = ail.invoice_id
             AND   aid2.invoice_line_number = ail.line_number)
     AND   (ail.line_type_lookup_code in (''ITEM'',''FREIGHT'',''MISCELLANEOUS'') OR
            ai.cancelled_date is not null)
     AND   ail.base_amount <> (
             SELECT /*+ no_unnest */ sum(nvl(aid.base_amount,0))
             FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ail.invoice_id
             AND   aid.invoice_line_number = ail.line_number)
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.cancelled_date,
            ''opposite signs''
     FROM invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp
     WHERE ai.exchange_rate is not null
     AND   ai.org_id = asp.org_id
     AND   ai.invoice_currency_code <> asp.base_currency_code
     AND   ai.invoice_type_lookup_code <> ''PO PRICE ADJUST''
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ ''Adjustment corrections exists''
             FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = ai.invoice_id
             AND   aid1.dist_match_type=''ADJUSTMENT_CORRECTION'')
     AND   EXISTS(
             SELECT /*+ no_unnest */ ''opposite signs''
             FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.base_amount is not null
             AND   ((aid.amount > 0 AND aid.base_amount <0) OR
                    (aid.amount < 0 AND aid.base_amount >0))
             AND   aid.line_type_lookup_code NOT IN (''REC_TAX'',
                     ''NONREC_TAX'',''TRV'',''TIPV'',''TERV''))
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.cancelled_date,
            ''wrong variance''
     FROM invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp
     WHERE nvl(ai.historical_flag,''N'') <> ''Y''
     AND   ai.exchange_rate is not null
     AND   ai.cancelled_date is null
     AND   ai.org_id = asp.org_id
     AND   ai.invoice_currency_code <> asp.base_currency_code
     AND   ai.invoice_type_lookup_code <> ''PO PRICE ADJUST''
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ ''Adjustment corrections exists''
             FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = ai.invoice_id
             AND   aid1.dist_match_type=''ADJUSTMENT_CORRECTION'')
     AND   EXISTS (
             SELECT /*+ no_unnest */ ''wrong variance''
             FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   (aid.po_distribution_id is not null OR
                    aid.rcv_transaction_id is not null)
             AND   nvl(aid.dist_match_type,''NOT_MATCHED'') IN
                     (''ITEM_TO_PO'',''ITEM_TO_RECEIPT'',
                      ''ITEM_TO_SERVICE_PO'',''ITEM_TO_SERVICE_RECEIPT'',
                      ''QTY_CORRECTION'',''AMOUNT_CORRECTION'')
             AND   nvl(aid.reversal_flag,''N'') <> ''Y''
             AND   aid.line_type_lookup_code in (''ITEM'',''ACCRUAL'')
             AND   abs(aid.base_amount -
                     (SELECT /*+ no_unnest */ ap_utilities_pkg.ap_round_currency(
                               aid1.amount * nvl(rt.currency_conversion_rate,pod.rate),
                               asp.base_currency_code)
                      FROM ap_invoice_distributions_all aid1,
                           po_distributions_all pod,
                           rcv_transactions rt,
                           ap_system_parameters_all asp
                      WHERE aid1.invoice_distribution_id = aid.invoice_distribution_id
                      AND aid1.po_distribution_id = pod.po_distribution_id
                      AND aid1.rcv_transaction_id = rt.transaction_id (+)
                      AND aid1.org_id = asp.org_id))
                     > .99 )
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.cancelled_date,
            ''dists base amount issue''
     FROM invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.exchange_rate is not null
     AND   ai.org_id = asp.org_id
     AND   ai.invoice_currency_code <> asp.base_currency_code
     AND   ai.invoice_id = aid.invoice_id
     AND   ai.org_id = asp.org_id
     AND   ai.invoice_currency_code <> asp.base_currency_code
     AND   ai.invoice_type_lookup_code <> ''PO PRICE ADJUST''
     AND   NOT EXISTS (
             SELECT ''unvalidated dists exists''
             FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = ai.invoice_id
             AND  (aid1.dist_match_type=''ADJUSTMENT_CORRECTION'' OR
                   nvl(aid1.match_status_flag,''N'') = ''N'' ))
     AND   aid.line_type_lookup_code IN (''ITEM'',''FREIGHT'',
             ''MISCELLANEOUS'')
     AND   aid.po_distribution_id is null
     AND   (aid.base_amount is null  OR
            ((aid.base_amount - aid.rounding_amt) <> (
                SELECT ap_utilities_pkg.ap_round_currency(
                         aid.amount * ai.exchange_rate,
                         asp.base_currency_code)
                      FROM dual)))'
  );


  add_signature(g_signatures,
    38,
    'INVOICE',
    '',
    '23338547',
    '1174813.1',
    'ap_inc_payment_schedules_sel.sql',
    'Invoices with incorrect data in payment schedules or payment fields.  See Note 1174813.1 for complete details of all conditions captured',
    'Apply the GDF patch following the instructions provided in [1174813.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ap.invoice_id,
            ap.invoice_num,
            ap.invoice_date,
            ap.org_id,
            ap.reason
     FROM (
            SELECT ''Incorrect Amt Paid'' Reason,
                   ai.invoice_id,
                   ai.invoice_num,
                   ai.invoice_date,
                   ai.org_id,
                   ai.invoice_amount,
                   ai.amount_paid,
                   (SELECT ap_utilities_pkg.ap_round_currency(sum(aid.amount) *
                            nvl(ai.payment_cross_rate,1),ai.payment_currency_code)
                    FROM ap_invoice_distributions_all aid,
                         ap_invoice_lines_all ail
                    WHERE ail.invoice_id = ai.invoice_id
                    AND aid.invoice_id = ai.invoice_id
                    AND ail.line_number = aid.invoice_line_number
                    AND aid.prepay_distribution_id is not null
                    AND nvl(ail.invoice_includes_prepay_flag,''N'')<>''Y'') prepay_amt,
                   (SELECT sum(aip.amount) FROM ap_invoice_payments_all aip
                    WHERE aip.invoice_id = ai.invoice_id) pay_amt
            FROM invs,
                 ap_invoices_all ai
            WHERE ai.validation_request_id is null
            AND   ai.cancelled_date is null
            AND   ai.invoice_id = invs.invoice_id
          ) ap
     WHERE (nvl(ap.pay_amt,0)-nvl(ap.prepay_amt,0)) <> nvl(ap.amount_paid,0)
     UNION ALL
     SELECT ap.invoice_id,
            ap.invoice_num,
            ap.invoice_date,
            ap.org_id,
            ap.reason
     FROM (
            SELECT /*+ ordered use_nl(ai) */
                   ''Incorrect Amt Remaining'' Reason,
                   ai.invoice_id,
                   ai.invoice_num,
                   ai.invoice_date,
                   ai.org_id,
                   ai.invoice_amount,
                   ai.amount_paid,
                   nvl(ai.discount_amount_taken,0) disc_amt,
                   nvl(ai.payment_cross_rate,1) payment_cross_rate,
                   (SELECT ap_utilities_pkg.ap_round_currency(sum(ail.amount) *
                             nvl(ai.payment_cross_rate,1),ai.payment_currency_code)
                    FROM ap_invoice_lines_all ail
                    WHERE ail.invoice_id = ai.invoice_id
                    AND ail.line_type_lookup_code = ''AWT'') awt_amt,
                   (SELECT ap_utilities_pkg.ap_round_currency(sum(ail.retained_amount) *
                             nvl(ai.payment_cross_rate,1),ai.payment_currency_code)
                    FROM ap_invoice_lines_all ail
                    WHERE ail.invoice_id = ai.invoice_id
                    AND nvl(ai.net_of_retainage_flag,''N'')<>''Y'') retained_amt,
                   (SELECT ap_utilities_pkg.ap_round_currency(sum(aid.amount) *
                             nvl(ai.payment_cross_rate,1),ai.payment_currency_code)
                    FROM ap_invoice_distributions_all aid,
                         ap_invoice_lines_all ail
                    WHERE ail.invoice_id = ai.invoice_id
                    AND   aid.invoice_id = ai.invoice_id
                    AND   ail.line_number = aid.invoice_line_number
                    AND   aid.prepay_distribution_id is not null
                    AND   nvl(ail.invoice_includes_prepay_flag,''N'')<>''Y'') prepay_amt,
                   (SELECT sum(aip.amount) FROM ap_invoice_payments_all aip
                    WHERE aip.invoice_id = ai.invoice_id) pay_amt,
                   (SELECT /*+ no_unnest */ sum(amount_remaining)
                    FROM ap_payment_schedules_all aps
                    WHERE aps.invoice_id = ai.invoice_id) amount_remain
            FROM invs,
                 ap_invoices_all ai
            WHERE ai.validation_request_id is null
            AND   ai.cancelled_date is null
            AND   ai.invoice_id = invs.invoice_id
          ) ap
     WHERE (((ap.invoice_amount * ap.payment_cross_rate) - disc_amt +
              nvl(ap.awt_amt,0) + nvl(ap.retained_amt,0)) -
             (nvl(ap.pay_amt,0) - nvl(ap.prepay_amt,0))) <>
              nvl(ap.amount_remain,0)
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ''Null Amt Remaining''
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all ap
     WHERE ap.amount_remaining is null
     AND   ap.invoice_id = ai.invoice_id
     AND   ap.checkrun_id is null
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ no_query_transformation */
            ap.invoice_id,
            ap.invoice_num,
            ap.invoice_date,
            ap.org_id,
            ap.reason
     FROM (
            SELECT /*+ ordered use_nl(ai, aps1) */
                   ''Fully paid but Payment_status_flag not Y'' reason,
                   ai.invoice_id,
                   ai.invoice_num,
                   ai.invoice_date,
                   ai.org_id,
                   ai.invoice_amount,
                   ai.amount_paid,
                   (SELECT ap_utilities_pkg.ap_round_currency(sum(aid.amount) *
                             nvl(ai.payment_cross_rate,1),ai.payment_currency_code)
                    FROM ap_invoice_distributions_all aid,
                         ap_invoice_lines_all ail
                    WHERE ail.invoice_id = ai.invoice_id
                    AND aid.invoice_id = ai.invoice_id
                    AND ail.line_number = aid.invoice_line_number
                    AND aid.prepay_distribution_id is not null
                    AND nvl(ail.invoice_includes_prepay_flag,''N'')<>''Y'') prepay_amt,
                   (SELECT sum(aip.amount) FROM ap_invoice_payments_all aip
                    WHERE aip.invoice_id = ai.invoice_id) pay_amt,
                   (SELECT sum(aps.amount_remaining)
                    FROM ap_payment_schedules_all aps
                    WHERE aps.invoice_id = ai.invoice_id) amount_remain
            FROM invs,
                 ap_invoices_all ai,
                 ap_payment_schedules_all aps1
            WHERE ai.invoice_id = invs.invoice_id
            AND   aps1.invoice_id = ai.invoice_id
            AND   (ai.payment_status_flag <> ''Y'' OR aps1.payment_status_flag<>''Y'')
            AND   ai.cancelled_date is null
            AND   ai.validation_request_id is null
            AND   aps1.checkrun_id is null
          ) ap
     WHERE nvl(ap.pay_amt,0) - nvl(ap.prepay_amt,0) = nvl(ap.amount_paid,0)
     AND   ap.amount_paid <> 0
     AND   ap.amount_remain = 0
     UNION ALL
     SELECT ap.invoice_id,
            ap.invoice_num,
            ap.invoice_date,
            ap.org_id,
            ap.reason
     FROM (
            SELECT ''Inv unpaid but Payment_status_flag not N'' Reason,
                   ai.invoice_id,
                   ai.invoice_num,
                   ai.invoice_date,
                   ai.org_id,
                   ai.invoice_amount,
                   ai.amount_paid
            FROM invs,
                 ap_invoices_all ai,
                 ap_payment_schedules_all aps
            WHERE ai.invoice_id = aps.invoice_id
            AND   (nvl(ai.payment_status_flag,''N'') <> ''N'' OR
                   nvl(aps.payment_status_flag,''N'') <> ''N'')
            AND   ai.cancelled_date is null
            AND   aps.amount_remaining <> 0
            AND   ai.validation_request_id is null
            AND   aps.checkrun_id is null
            AND   ai.invoice_id = invs.invoice_id
          ) ap
     WHERE nvl(ap.amount_paid,0)=0
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ap.org_id,
            ''Null Payment status flag'' Reason
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all ap
     WHERE (ap.payment_status_flag is null OR
            ai.payment_status_flag is null)
     AND   ai.validation_request_id is null
     AND   ap.invoice_id = ai.invoice_id
     AND   ap.checkrun_id is null
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ap.invoice_id,
            ap.invoice_num,
            ap.invoice_date,
            ap.org_id,
            ap.reason
     FROM (
            SELECT ''Wrong pay status flag for partial paid invoices'' reason,
                   ai.invoice_id,
                   ai.invoice_num,
                   ai.invoice_date,
                   ai.org_id,
                   ai.invoice_amount,
                   ai.amount_paid,
                   nvl(ai.discount_amount_taken,0) disc_amt,
                   (SELECT ap_utilities_pkg.ap_round_currency(sum(aid.amount) *
                             nvl(ai.payment_cross_rate,1),ai.payment_currency_code)
                    FROM ap_invoice_distributions_all aid,
                         ap_invoice_lines_all ail
                    WHERE ail.invoice_id = ai.invoice_id
                    AND   aid.invoice_id = ai.invoice_id
                    AND   ail.line_number = aid.invoice_line_number
                    AND   aid.prepay_distribution_id is not null
                    AND   nvl(ail.invoice_includes_prepay_flag,''N'')<>''Y'') prepay_amt,
                   (SELECT sum(aip.amount) FROM ap_invoice_payments_all aip
                    WHERE aip.invoice_id = ai.invoice_id) pay_amt,
                   (SELECT sum(aps.amount_remaining) FROM ap_payment_schedules_all aps
                    WHERE aps.invoice_id = ai.invoice_id) amount_remain
            FROM invs,
                 ap_invoices_all ai
            WHERE ai.payment_status_flag in (''N'',''Y'')
            AND   ai.cancelled_date is null
            AND   ai.validation_request_id is null
            AND   ai.invoice_id = invs.invoice_id
          ) ap
     WHERE nvl(ap.amount_remain,0) <> 0
     AND   nvl(ap.amount_paid,0) <> 0
     AND   (nvl(ap.prepay_amt,0) <> 0 OR
            nvl(ap.pay_amt,0) <> 0)
     UNION ALL
     SELECT ap.invoice_id,
            ap.invoice_num,
            ap.invoice_date,
            ap.org_id,
            ap.Reason
     FROM (
            SELECT ''Incorrect pay status flag for partial paid invoices'' Reason,
                   ai.invoice_id,
                   ai.invoice_num,
                   ai.invoice_date,
                   aps.org_id,
                   aps.payment_num,
                   aps.amount_remaining,
                   aps.gross_amount,
                   aps.payment_status_flag,
                   (SELECT AP_UTILITIES_PKG.ap_round_currency(sum(aid.amount) *
                             nvl(ai.payment_cross_rate,1),ai.payment_currency_code)
                    FROM ap_invoice_distributions_all aid
                    WHERE aid.invoice_id = ai.invoice_id
                    AND   aid.line_type_lookup_code = ''AWT''
                    AND   aid.awt_invoice_payment_id is null) inv_awt_amt,
                   (SELECT sum(aps.gross_amount) FROM ap_payment_schedules_all aps
                    WHERE aps.invoice_id = ai.invoice_id) tot_gross_amt
            FROM invs,
                 ap_invoices_all ai,
                 ap_payment_schedules_all aps
            WHERE ai.invoice_id = aps.invoice_id
            AND   aps.amount_remaining <> 0
            AND   ai.cancelled_date is null
            AND   ai.validation_request_id is null
            AND   aps.checkrun_id is null
            AND   nvl(ai.historical_flag,''N'')<>''Y''
            AND   ai.invoice_id = invs.invoice_id
          ) ap
     WHERE ap.gross_amount<>0
     AND   ap.tot_gross_amt<>0
     AND   ap.payment_status_flag <>
             decode(nvl(ap.amount_remaining,0),
               0, ''Y'',
               (ap.gross_amount + (nvl(ap.inv_awt_amt,0) *
                 nvl(ap.gross_amount,0) / nvl(ap.tot_gross_amt,1))), ''N'',
               ''P'')
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ''Inc Amt Remn, paid for cancelled invs'' Reason
     FROM invs,
          ap_invoices_all ai
     WHERE ai.cancelled_date is not null
     AND   (nvl(ai.amount_paid,0) <> 0 OR
           EXISTS (
             SELECT 1 FROM ap_payment_schedules_all aps
             WHERE aps.invoice_id = ai.invoice_id
             AND amount_remaining <> 0))
     AND   ai.validation_request_id is null
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT  ai.invoice_id,
             ai.invoice_num,
             ai.invoice_date,
             ai.org_id,
             ''Incorrect Gross Amount on Schedule''
     FROM invs,
          ap_invoices ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   ((ai.pay_curr_invoice_amount <>
               ap_utilities_pkg.ap_round_currency((ai.invoice_amount - (
                 CASE
                   WHEN nvl(ai.net_of_retainage_flag, ''N'') = ''N'' THEN
                     nvl(abs(ap_invoices_utility_pkg.get_retained_total(
                               ai.invoice_id,
                               ai.org_id)),0)
                   ELSE 0
                 END)) * ai.payment_cross_rate,
                 ai.payment_currency_code)
             ) OR
             (ai.pay_curr_invoice_amount <> (
                SELECT sum(aps.gross_amount)
                FROM ap_payment_schedules_all aps
                WHERE aps.invoice_id = ai.invoice_id)))
     AND   ai.historical_flag is null
     AND   EXISTS (
             SELECT 1 FROM ap_payment_schedules_all aps
             WHERE aps.invoice_id = ai.invoice_id
             HAVING count(aps.invoice_id) = 1)
     AND   ai.cancelled_date is null
     AND   ai.validation_request_id is null'
  );


  add_signature(g_signatures,
    39,
    'INVOICE',
    '',
    '17558081',
    '1543361.1',
    'ap_sync_po_qty_amt_sel.sql PO Data',
    'PO distributions out of synch with AP distributions for quantity or amount billed, financed or recouped',
    'Apply the GDF patch following the instructions provided in [1543361.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Discard'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai2, aid2, pod2) */
            ai2.invoice_id,
            ai2.invoice_num,
            pod2.po_header_id,
            pod2.po_distribution_id,
            aid2.invoice_line_number,
            aid2.invoice_distribution_id,
            aid2.corrected_quantity,
            aid2.quantity_invoiced,
            aid2.matched_uom_lookup_code,
            aid2.amount aid_amt,
            fsp2.purch_encumbrance_flag,
            1 match_type
     FROM   invs,
            ap_invoices_all ai2,
            ap_invoice_distributions_all aid2,
            po_distributions_all pod2,
            financials_system_params_all fsp2
     WHERE ai2.invoice_id = invs.invoice_id
     AND   aid2.invoice_id = ai2.invoice_id
     AND   aid2.invoice_id = ai2.invoice_id
     AND   ai2.org_id = fsp2.org_id
     AND   aid2.line_type_lookup_code IN (''ITEM'', ''ACCRUAL'',
             ''IPV'',''RETROACCRUAL'',''RETROEXPENSE'')
     AND   ai2.invoice_type_lookup_code = ''PREPAYMENT''
     AND   pod2.po_distribution_id = aid2.po_distribution_id
     AND   EXISTS (
             SELECT 1 match_type
             FROM (
                    SELECT pod.po_header_id,
                           pod.po_line_id,
                           pod.line_location_id,
                           pod.po_release_id,
                           pod.po_distribution_id,
                           decode(aid.dist_match_type,
                             ''PRICE_CORRECTION'', 0,
                             ''AMOUNT_CORRECTION'', 0,
                             ''ITEM_TO_SERVICE_PO'', 0,
                             ''ITEM_TO_SERVICE_RECEIPT'', 0,
                             nvl(aid.corrected_quantity,0) +
                             nvl(aid.quantity_invoiced,0)) *
                             decode(nvl(aid.matched_uom_lookup_code,
                               pll.unit_meas_lookup_code),
                               pll.unit_meas_lookup_code, 1 ,
                               nvl(ap_gdf_fcns.uom_convert(
                                 nvl(aid.matched_uom_lookup_code,
                                   pll.unit_meas_lookup_code),
                                 pll.unit_meas_lookup_code,rsl.item_id),0)) aid_quan,
                           aid.amount aid_amt,
                           pod.quantity_financed po_quantity,
                           pod.amount_financed po_amount,
                           decode(nvl(ap_gdf_fcns.uom_convert(
                                        nvl(aid.matched_uom_lookup_code,
                                            pll.unit_meas_lookup_code),
                                        pll.unit_meas_lookup_code,
                                        rsl.item_id),-999),
                             -999, aid.matched_uom_lookup_code||'' and ''||
                               pll.unit_meas_lookup_code,
                             ''None'') uom_codes,
                           decode(nvl(ap_gdf_fcns.uom_convert(
                                        nvl(aid.matched_uom_lookup_code,
                                            pll.unit_meas_lookup_code),
                                        pll.unit_meas_lookup_code, rsl.item_id),-999),
                             -999,''E'',
                             ''N'') process_flag
                    FROM po_distributions_all pod,
                         ap_invoice_distributions_all aid,
                         po_lines_all pol,
                         po_line_locations_all pll,
                         ap_invoices_all ai,
                         financials_system_params_all fsp,
                         rcv_transactions rtxn,
                         rcv_shipment_lines rsl
                    WHERE pod.po_distribution_id = aid.po_distribution_id
                    AND   pod.line_location_id = pll.line_location_id
                    AND   pll.po_line_id = pol.po_line_id
                    AND   aid.invoice_id = ai.invoice_id
                    AND   ai.org_id = fsp.org_id
                    AND   (nvl(fsp.purch_encumbrance_flag,''N'') = ''N'' OR
                           (nvl(pll.approved_flag,''N'') = ''Y'' AND
                            nvl(pll.cancel_flag,''N'') = ''N''  AND
                            nvl(pll.closed_code,'' '') <> ''FINALLY CLOSED''))
                    AND   aid.line_type_lookup_code IN (''ITEM'', ''ACCRUAL'',
                            ''IPV'',''RETROACCRUAL'',''RETROEXPENSE'')
                    AND   ai.invoice_type_lookup_code = ''PREPAYMENT''
                    AND   aid.rcv_transaction_id = RTXN.transaction_id (+)
                    AND   rtxn.shipment_line_id = rsl.shipment_line_id (+)
                  ) apd
             WHERE apd.po_distribution_id = aid2.po_distribution_id
             GROUP BY apd.po_header_id, apd.po_line_id, apd.line_location_id,
                      apd.po_release_id, apd.po_distribution_id,
                      apd.po_quantity, apd.po_amount, apd.uom_codes,
                      apd.process_flag
             HAVING ((round(nvl(apd.po_quantity,0),15) <>
                      round(sum(nvl(apd.aid_quan,0)),15) OR
                      round(nvl(apd.po_amount,0),15) <>
                      round(sum(nvl(apd.aid_amt,0)),15)) AND
                     ((round(sum(nvl(apd.aid_quan,0)),15) >= 0 AND
                       round(sum(nvl(apd.aid_amt,0)),15) >= 0) OR
                      apd.process_flag <> ''N'')))
     UNION ALL
     SELECT /*+ ordered use_nl(ai2, aid2, pod2) */
            ai2.invoice_id,
            ai2.invoice_num,
            pod2.po_header_id,
            pod2.po_distribution_id,
            aid2.invoice_line_number,
            aid2.invoice_distribution_id,
            aid2.corrected_quantity,
            aid2.quantity_invoiced,
            aid2.matched_uom_lookup_code,
            aid2.amount aid_amt,
            fsp2.purch_encumbrance_flag,
            2 match_type
     FROM   invs,
            ap_invoices_all ai2,
            ap_invoice_distributions_all aid2,
            po_distributions_all pod2,
            financials_system_params_all fsp2
     WHERE ai2.invoice_id = invs.invoice_id
     AND   aid2.invoice_id = ai2.invoice_id
     AND   ai2.org_id = fsp2.org_id
     AND   aid2.line_type_lookup_code = ''PREPAY''
     AND   ai2.invoice_type_lookup_code <> ''PREPAYMENT''
     AND   pod2.po_distribution_id = aid2.po_distribution_id
     AND   EXISTS (
             SELECT 2 match_type
             FROM (
                    SELECT pod.po_header_id,
                           pod.po_line_id,
                           pod.line_location_id,
                           pod.po_release_id,
                           pod.po_distribution_id,
                           decode(aid.dist_match_type,
                             ''PRICE_CORRECTION'', 0,
                             ''AMOUNT_CORRECTION'', 0,
                             ''ITEM_TO_SERVICE_PO'', 0,
                             ''ITEM_TO_SERVICE_RECEIPT'', 0,
                             nvl(aid.corrected_quantity,0 ) +
                             nvl(aid.quantity_invoiced,0)) * -1 *
                             decode(nvl(aid.matched_uom_lookup_code,
                                    pll.unit_meas_lookup_code),
                                    pll.unit_meas_lookup_code, 1 ,
                                    nvl(ap_gdf_fcns.uom_convert(
                                      nvl(aid.matched_uom_lookup_code,
                                          pll.unit_meas_lookup_code),
                                   pll.unit_meas_lookup_code,
                                   rsl.item_id),0)) aid_quan,
                           aid.amount * -1 aid_amt,
                           pod.quantity_recouped  po_quantity,
                           pod.amount_recouped   po_amount,
                           decode(nvl(ap_gdf_fcns.uom_convert(
                                        nvl(aid.matched_uom_lookup_code,
                                            pll.unit_meas_lookup_code),
                                        pll.unit_meas_lookup_code,
                                        rsl.item_id), -999),
                             -999, aid.matched_uom_lookup_code||'' and ''||
                                     pll.unit_meas_lookup_code,
                             ''None'') uom_codes,
                           decode(nvl(ap_gdf_fcns.uom_convert(
                                       nvl(aid.matched_uom_lookup_code,
                                           pll.unit_meas_lookup_code),
                                       pll.unit_meas_lookup_code,
                                       rsl.item_id),-999),
                             -999,''E'',
                             ''N'') process_flag
                    FROM po_distributions_all pod,
                         ap_invoice_distributions_all aid,
                         po_lines_all pol,
                         po_line_locations_all pll,
                         ap_invoices_all ai,
                         financials_system_params_all fsp,
                         rcv_transactions rtxn,
                         rcv_shipment_lines rsl
                    WHERE pod.po_distribution_id = aid.po_distribution_id
                    AND   pod.line_location_id = pll.line_location_id
                    AND   pll.po_line_id = pol.po_line_id
                    AND   aid.invoice_id = ai.invoice_id
                    AND   ai.org_id = fsp.org_id
                    AND   (nvl(fsp.purch_encumbrance_flag,''N'') = ''N'' OR
                           (nvl(pll.approved_flag,''N'') = ''Y'' AND
                            nvl(pll.cancel_flag,''N'') = ''N''  AND
                            nvl(pll.closed_code,'' '') <> ''FINALLY CLOSED''))
                    AND   aid.line_type_lookup_code = ''PREPAY''
                    AND   ai.invoice_type_lookup_code <> ''PREPAYMENT''
                    AND   aid.rcv_transaction_id = rtxn.transaction_id (+)
                    AND   rtxn.shipment_line_id = rsl.shipment_line_id (+)
                  ) apd
             WHERE apd.po_distribution_id = aid2.po_distribution_id
             GROUP BY apd.po_header_id, apd.po_line_id, apd.line_location_id,
                      apd.po_release_id, apd.po_distribution_id, apd.po_quantity,
                      apd.po_amount, apd.uom_codes, apd.process_flag
             HAVING ((round(nvl(apd.po_quantity,0),15) <> -1 *
                        round(sum(nvl(apd.aid_quan,0)),15) OR
                      round(nvl(apd.po_amount,0),15) <> -1 *
                        round(sum(nvl(apd.aid_amt,0)),15))
              AND    (round(nvl(apd.po_quantity,0),15) <>
                        round(sum(nvl(apd.aid_quan,0)),15) OR
                      round(nvl(apd.po_amount,0),15) <>
                        round(sum(nvl(apd.aid_amt,0)),15))
              AND   ((round(sum(nvl(apd.aid_quan,0)),15) >= 0 AND
                       round(sum(nvl(apd.aid_amt,0)),15) >= 0) OR
                      apd.process_flag <> ''N'')))
     UNION ALL
     SELECT /*+ ordered use_nl(ai2, aid2, pod2) */
            ai2.invoice_id,
            ai2.invoice_num,
            pod2.po_header_id,
            pod2.po_distribution_id,
            aid2.invoice_line_number,
            aid2.invoice_distribution_id,
            aid2.corrected_quantity,
            aid2.quantity_invoiced,
            aid2.matched_uom_lookup_code,
            aid2.amount aid_amt,
            fsp2.purch_encumbrance_flag,
            3 match_type
     FROM   invs,
            ap_invoices_all ai2,
            ap_invoice_distributions_all aid2,
            po_distributions_all pod2,
            financials_system_params_all fsp2
     WHERE ai2.invoice_id = invs.invoice_id
     AND   aid2.invoice_id = ai2.invoice_id
     AND   ai2.org_id = fsp2.org_id
     AND   aid2.line_type_lookup_code IN (''ITEM'', ''ACCRUAL'',
             ''IPV'',''RETROACCRUAL'',''RETROEXPENSE'')
     AND   ai2.invoice_type_lookup_code <> ''PREPAYMENT''
     AND   pod2.po_distribution_id = aid2.po_distribution_id
     AND   EXISTS (
             SELECT 3 match_type
             FROM (
                    SELECT pod.po_header_id,
                           pod.po_line_id,
                           pod.line_location_id,
                           pod.po_release_id,
                           pod.po_distribution_id,
                           decode(aid.dist_match_type,
                             ''PRICE_CORRECTION'', 0,
                             ''AMOUNT_CORRECTION'', 0,
                             ''ITEM_TO_SERVICE_PO'', 0,
                             ''ITEM_TO_SERVICE_RECEIPT'', 0,
                             nvl(aid.corrected_quantity,0) +
                             nvl(aid.quantity_invoiced,0)) *
                             decode(nvl(aid.matched_uom_lookup_code,
                                        pll.unit_meas_lookup_code),
                               pll.unit_meas_lookup_code, 1,
                               nvl(ap_gdf_fcns.uom_convert(
                                     nvl(aid.matched_uom_lookup_code,
                                         pll.unit_meas_lookup_code),
                                     pll.unit_meas_lookup_code,
                                     rsl.item_id),0)) aid_quan,
                           aid.amount aid_amt,
                           pod.quantity_billed     po_quantity,
                           pod.amount_billed       po_amount,
                           decode(nvl(ap_gdf_fcns.uom_convert(
                                        nvl(aid.matched_uom_lookup_code,
                                            pll.unit_meas_lookup_code),
                                        pll.unit_meas_lookup_code,
                                        rsl.item_id),-999),
                             -999, aid.matched_uom_lookup_code||'' and ''||
                                     pll.unit_meas_lookup_code,
                             ''None'') uom_codes,
                           decode(nvl(ap_gdf_fcns.uom_convert(
                                        nvl(aid.matched_uom_lookup_code,
                                            pll.unit_meas_lookup_code),
                                        pll.unit_meas_lookup_code,
                                        rsl.item_id),-999),
                             -999,''E'',
                             ''N'') process_flag
                    FROM po_distributions_all pod,
                         ap_invoice_distributions_all aid,
                         po_lines_all pol,
                         po_line_locations_all pll,
                         ap_invoices_all ai,
                         financials_system_params_all fsp,
                         rcv_transactions rtxn,
                         rcv_shipment_lines rsl
                    WHERE pod.po_distribution_id = aid.po_distribution_id
                    AND   pod.line_location_id = pll.line_location_id
                    AND   pll.po_line_id = pol.po_line_id
                    AND   aid.invoice_id = ai.invoice_id
                    AND   ai.org_id = fsp.org_id
                    AND   (nvl(fsp.purch_encumbrance_flag,''N'') = ''N'' OR
                           (nvl(pll.approved_flag,''N'') = ''Y'' AND
                            nvl(pll.cancel_flag,''N'') = ''N''  AND
                            nvl(pll.closed_code,'' '') <> ''FINALLY CLOSED''))
                    AND   aid.line_type_lookup_code IN (''ITEM'', ''ACCRUAL'',
                            ''IPV'',''RETROACCRUAL'',''RETROEXPENSE'')
                    AND   ai.invoice_type_lookup_code <> ''PREPAYMENT''
                    AND   aid.rcv_transaction_id = RTXN.transaction_id (+)
                    AND   RTXN.shipment_line_id = rsl.shipment_line_id (+)
                  ) apd
             WHERE apd.po_distribution_id = aid2.po_distribution_id
             GROUP BY apd.po_header_id, apd.po_line_id, apd.line_location_id,
                      apd.po_release_id, apd.po_distribution_id, apd.po_quantity,
                      apd.po_amount, apd.uom_codes,
                      apd.process_flag
             HAVING ((round(nvl(apd.po_quantity,0),15) <>
                        round(sum(nvl(apd.aid_quan,0)),15) OR
                      round(nvl(apd.po_amount,0),15) <>
                        round(sum(nvl(apd.aid_amt,0)),15)) AND
                      ((round(sum(nvl(apd.aid_quan,0)),15) >= 0 AND
                        round(sum(nvl(apd.aid_amt,0)),15) >= 0) OR
                       apd.process_flag <> ''N'')))'
  );


  add_signature(g_signatures,
    40,
    'INVOICE',
    '',
    '17558081',
    '1543361.1',
    'ap_sync_po_qty_amt_sel.sql RCV Data',
    'Receiving distributions out of synch with AP distributions for quantity or amount billed',
    'Apply the GDF patch following the instructions provided in [1543361.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Discard'),
    'SELECT /*+  ordered use_nl(aid, rcv) */
            aid.invoice_id,
            aid.rcv_transaction_id,
            rcv.po_header_id,
            nvl(rcv.amount_billed,0) rcv_amount,
            nvl(rcv.quantity_billed,0) rcv_quantity
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid,
          rcv_transactions rcv
     WHERE aid.invoice_id = invs.invoice_id
     AND   rcv.transaction_id = aid.rcv_transaction_id
     AND   aid.rcv_transaction_id is not null
     AND   aid.line_type_lookup_code IN (''ITEM'',''ACCRUAL'',''IPV'',''PREPAY'')
     AND   EXISTS (
             SELECT /*+ no_unnest ordered use_nl(aid2, rcv2) */ 1
             FROM ap_invoice_distributions_all aid2,
                  rcv_transactions rcv2
             WHERE aid2.rcv_transaction_id = aid.rcv_transaction_id
             AND   rcv2.transaction_id = aid2.rcv_transaction_id
             AND   aid2.rcv_transaction_id is not null
             AND   aid2.line_type_lookup_code IN (''ITEM'',''ACCRUAL'',''IPV'',''PREPAY'')
             GROUP BY nvl(rcv2.quantity_billed,0), nvl(rcv2.amount_billed,0),
                      aid2.rcv_transaction_id
             HAVING ((sum(nvl(aid2.quantity_invoiced,0)) <> nvl(rcv2.quantity_billed,0) OR
                      sum(nvl(aid2.amount,0)) <> nvl(rcv2.amount_billed,0))
             AND     sum(nvl(aid2.quantity_invoiced,0)) >= 0
             AND     sum(nvl(aid2.amount,0)) >=0 ))'
  );


  add_signature(g_signatures,
    41,
    'INVOICE',
    '',
    '21533330',
    '874862.1',
    'ap_Rel_Inv_frm_TermPPR_sel.sql',
    'PPRs which are in Terminated, Confirmed, or Review status, but whose associated invoices are in selected state',
    'Apply the GDF patch following the instructions provided in [874862.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     /* CASE 1 */
     SELECT /*+ ordered use_nl(ai, aps, aisc, asi) */
            ai.invoice_id held_invoice_id,
            ai.invoice_num held_invoice_num,
            ai.org_id,
            ai.invoice_date held_invoice_date,
            aps.payment_num held_schedule_num,
            aisc.checkrun_id,
            aisc.check_date,
            aisc.checkrun_name,
            aisc.status || '' (Case 1)'' status,
            aisc.request_id
    FROM invs,
         ap_invoices_all ai,
         ap_payment_schedules_all aps,
         ap_inv_selection_criteria_all aisc,
         ap_selected_invoices_all asi
    WHERE ai.invoice_id = invs.invoice_id
    AND   aps.invoice_id = ai.invoice_id
    AND   aisc.checkrun_id = aps.checkrun_id
    AND   asi.checkrun_id = aisc.checkrun_id
    AND   NOT EXISTS (
            SELECT /*+ no_unnest */ ''Corresponding PSR''
            FROM iby_pay_service_requests ipsr
            WHERE ipsr.calling_app_id = 200
            AND   ipsr.call_app_pay_service_req_code = aisc.checkrun_name)
    AND   aisc.status in (''CANCELING'',''CANCELED'',''SELECTING'',
            ''CALCULATING'', ''REVIEW'', ''SELECTED'')
    UNION /* CASE 1.1 - No data in asi/aps - specially for UNSTARTED case*/
    SELECT /*+ ordered use_nl(ai, aps, aisc) */
           ai.invoice_id held_invoice_id,
           ai.invoice_num held_invoice_num,
           ai.org_id,
           ai.invoice_date held_invoice_date,
           aps.payment_num held_schedule_num,
           aisc.checkrun_id,
           aisc.check_date,
           aisc.checkrun_name,
           aisc.status || '' (Case 1.1)'',
           aisc.request_id
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps,
          ap_inv_selection_criteria_all aisc
     WHERE ai.invoice_id = invs.invoice_id
     AND   aps.invoice_id = ai.invoice_id
     AND   aisc.checkrun_id = aps.checkrun_id
     AND   (NOT EXISTS (
              SELECT /*+ no_unnest */ ''Corresponding PSR''
              FROM iby_pay_service_requests ipsr
              WHERE ipsr.calling_app_id = 200
              AND   ipsr.call_app_pay_service_req_code = aisc.checkrun_name) OR
            EXISTS (
              SELECT ''Corresponding PSR''
              FROM iby_pay_service_requests ipsr
              WHERE ipsr.calling_app_id = 200
              AND   ipsr.call_app_pay_service_req_code = aisc.checkrun_name
              AND   ap_payment_util_pkg.get_psr_status(
                      ipsr.payment_service_request_id,
                      ipsr.payment_service_request_status)=''TERMINATED''))
     AND   aisc.status IN (''CANCELING'',''SELECTING'', ''CALCULATING'',
             ''UNSTARTED'', ''REVIEW'', ''SELECTED'')
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_selected_invoices_all asi
             WHERE  asi.checkrun_id = aisc.checkrun_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_payment_schedules_all aps
             WHERE  aps.checkrun_id = aisc.checkrun_id)
     UNION /* CASE 2 */
     SELECT /*+ ordered use_nl(ai, aps, aisc, ipsr) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            aps.payment_num,
            aisc.checkrun_id,
            aisc.check_date,
            ipsr.call_app_pay_service_req_code,
            ap_payment_util_pkg.get_psr_status(
              ipsr.payment_service_request_id,
              ipsr.payment_service_request_status) || '' (Case 2)'',
            aisc.request_id
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps,
          ap_inv_selection_criteria_all aisc,
          iby_pay_service_requests ipsr
     WHERE ai.invoice_id = aps.invoice_id
     AND   aisc.checkrun_name = ipsr.call_app_pay_service_req_code
     AND   aps.checkrun_id = aisc.checkrun_id
     AND   ipsr.calling_app_id = 200
     AND   ap_payment_util_pkg.get_psr_status(
            ipsr.payment_service_request_id,ipsr.payment_service_request_status) =
            ''TERMINATED''
     AND   ai.invoice_id = invs.invoice_id
     UNION /* CASE 3 */
     SELECT /*+ ordered use_nl(ai, aps, aisc, idp, ipsr) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            aps.payment_num,
            aisc.checkrun_id,
            aisc.check_date,
            ipsr.call_app_pay_service_req_code,
            ap_payment_util_pkg.get_psr_status(
              ipsr.payment_service_request_id,
              ipsr.payment_service_request_status) || '' (Case 3)'',
            aisc.request_id
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps,
          ap_inv_selection_criteria_all aisc,
          iby_docs_payable_all idp,
          iby_pay_service_requests ipsr
     WHERE ai.invoice_id = aps.invoice_id
     AND   aps.checkrun_id = aisc.checkrun_id
     AND   ipsr.call_app_pay_service_req_code = aisc.checkrun_name
     AND   ipsr.calling_app_id = 200
     AND   idp.calling_app_id = 200
     AND   idp.calling_app_doc_unique_ref1 = to_char(aps.checkrun_id)
     AND   idp.calling_app_doc_unique_ref2 = to_char(aps.invoice_id)
     AND   idp.calling_app_doc_unique_ref3 = to_char(aps.payment_num)
     AND   ipsr.payment_service_request_id = idp.payment_service_request_id
     AND   idp.document_status IN (
             ''REMOVED'',''REMOVED_INSTRUCTION_TERMINATED'',
             ''REMOVED_REQUEST_TERMINATED'',''REMOVED_PAYMENT_REMOVED'',
             ''REMOVED_PAYMENT_SPOILED'', ''FAILED_VALIDATION'',
             ''PAYMENT_FAILED_VALIDATION'', ''REJECTED'' ,
             ''FAILED_BY_REJECTION_LEVEL'' , ''FAILED_BY_CALLING_APP'',
             ''FAILED_BY_RELATED_DOCUMENT'',''REMOVED_PAYMENT_STOPPED'',
             ''REMOVED_PAYMENT_VOIDED'')
     AND   ai.invoice_id = invs.invoice_id
     UNION /* CASE 4 */
     SELECT /*+ ordered use_nl(ai, aps, aisc, ipsr) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            aps.payment_num,
            aisc.checkrun_id,
            aisc.check_date,
            ipsr.call_app_pay_service_req_code,
            ap_payment_util_pkg.get_psr_status(
              ipsr.payment_service_request_id,
              ipsr.payment_service_request_status) || '' (Case 4)'',
            aisc.request_id
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps,
          ap_inv_selection_criteria_all aisc,
          iby_pay_service_requests ipsr
     WHERE ai.invoice_id = aps.invoice_id
     AND   aps.checkrun_id = aisc.checkrun_id
     AND   ipsr.call_app_pay_service_req_code = aisc.checkrun_name
     AND   ipsr.calling_app_id = 200
     AND   ap_payment_util_pkg.get_psr_status(
             ipsr.payment_service_request_id,
             ipsr.payment_service_request_status) = ''CONFIRMED''
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ ''Corresponding Docs Payable''
             FROM iby_docs_payable_all idp
             WHERE idp.calling_app_doc_unique_ref1 = aps.checkrun_id
             AND   idp.calling_app_doc_unique_ref2 = aps.invoice_id
             AND   idp.calling_app_doc_unique_ref3 = aps.payment_num
             AND   idp.payment_service_request_id = ipsr.payment_service_request_id)
     AND   ai.invoice_id = invs.invoice_id
     UNION /* CASE 5 */
     SELECT /*+ ordered use_nl(ai, aps, aisc) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            aps.payment_num,
            aisc.checkrun_id,
            aisc.check_date,
            aisc.checkrun_name,
            aisc.status || '' (Case 5)'',
            aisc.request_id
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps,
          ap_inv_selection_criteria_all aisc
     WHERE ai.invoice_id = aps.invoice_id
     AND   aps.checkrun_id = aisc.checkrun_id
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ ''Data in AP_SELECTED_INVOICES_ALL''
             FROM ap_selected_invoices_all asi
             WHERE asi.checkrun_id = aisc.checkrun_id)
     AND   ai.invoice_id = invs.invoice_id
     UNION /* CASE 6 */
     SELECT /*+ ordered use_nl(ai, aps, aisc) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            aps.payment_num,
            aisc.checkrun_id,
            aisc.check_date,
            aisc.checkrun_name,
            aisc.status || '' (Case 6)'',
            aisc.request_id
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps,
          ap_inv_selection_criteria_all aisc
     WHERE ai.invoice_id = aps.invoice_id
     AND   aps.checkrun_id = aisc.checkrun_id
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_selected_invoices_all si2,
                  ap_payment_schedules_all ps
             WHERE si2.checkrun_id = aisc.checkrun_id
             AND   si2.invoice_id = ps.invoice_id
             AND   si2.payment_num = ps.payment_num
             AND   ((si2.org_id is null AND ps.org_id is not null) OR
                    si2.exclusive_payment_flag is null OR
                    ps.payment_method_code is null OR
                    si2.payment_amount is null OR
                    si2.payment_currency_code is null OR
                    aisc.check_date is null))
     AND   ai.invoice_id = invs.invoice_id
     UNION /* CASE 7 */
     SELECT /*+ ordered use_nl(ai, aps, aisc, ipsr) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            aps.payment_num,
            aisc.checkrun_id,
            aisc.check_date,
            ipsr.call_app_pay_service_req_code,
            ap_payment_util_pkg.get_psr_status(
              ipsr.payment_service_request_id,
              ipsr.payment_service_request_status) || '' (Case 7)'',
            aisc.request_id
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps,
          ap_inv_selection_criteria_all aisc,
          iby_pay_service_requests ipsr,
          iby_docs_payable_all idp
     WHERE ai.invoice_id = aps.invoice_id
     AND   aps.checkrun_id = aisc.checkrun_id
     AND   ipsr.call_app_pay_service_req_code = aisc.checkrun_name
     AND   ipsr.calling_app_id = 200
     AND   ap_payment_util_pkg.get_psr_status(
             ipsr.payment_service_request_id,
             ipsr.payment_service_request_status) = ''CONFIRMED''
     AND   idp.calling_app_doc_unique_ref1 = aps.checkrun_id
     AND   idp.calling_app_doc_unique_ref2 = aps.invoice_id
     AND   idp.calling_app_doc_unique_ref3 = aps.payment_num
     AND   idp.payment_service_request_id = ipsr.payment_service_request_id
     AND   idp.document_status IN (''PAYMENT_CREATED'')
     AND   EXISTS (
             SELECT /*+ ordered no_unnest */ ''AP Pmt Data Exists''
             FROM ap_invoice_payments_all aip,
                  ap_payment_history_all aph,
                  ap_checks_all ac,
                  iby_docs_payable_all idp
             WHERE idp.payment_id = ac.payment_id
             AND   ac.check_id = aip.check_id
             AND   aip.invoice_id = aps.invoice_id
             AND   aip.payment_num = aps.payment_num
             AND   aip.accounting_event_id = aph.accounting_event_id
             AND   ac.check_id = aph.check_id
             AND   nvl(aip.reversal_flag,''N'') <> ''Y'')
     AND   ai.invoice_id = invs.invoice_id
     UNION /* CASE 8 */
     SELECT /*+ ordered  use_nl(ai, aps, aisc) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            aps.payment_num,
            aisc.checkrun_id,
            aisc.check_date,
            aisc.checkrun_name,
            aisc.status || ''(Case 8)'',
            aisc.request_id
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps,
          ap_inv_selection_criteria_all aisc
     WHERE ai.invoice_id = aps.invoice_id
     AND   aps.checkrun_id = aisc.checkrun_id
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_selected_invoices_all si2,
                  ap_invoices_all ai
             WHERE si2.checkrun_id = aisc.checkrun_id
             AND   si2.invoice_id = ai.invoice_id
             AND   si2.vendor_name is null
             AND   ai.vendor_id is not null)
     AND   ai.invoice_id = invs.invoice_id
     UNION /* CASE 9 */
     SELECT /*+ ordered  use_nl(ai, aps, aisc) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            aps.payment_num,
            aisc.checkrun_id,
            aisc.check_date,
            aisc.checkrun_name,
            ap_payment_util_pkg.get_psr_status(
              ipsr.payment_service_request_id,
              ipsr.payment_service_request_status) || ''(Case 9)'',
            aisc.request_id
     FROM invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps,
          ap_inv_selection_criteria_all aisc,
          iby_pay_service_requests ipsr,
          iby_payments_all ipa,
          iby_pay_instructions_all ipia,
          ce_payment_documents cpd
     WHERE ai.invoice_id = invs.invoice_id
     AND   aps.invoice_id = ai.invoice_id
     AND   aisc.checkrun_id = aps.checkrun_id
     AND   aisc.checkrun_name = ipsr.call_app_pay_service_req_code
     AND   ipsr.calling_app_id  = 200
     AND   ap_payment_util_pkg.get_psr_status(
             ipsr.payment_service_request_id,
             ipsr.payment_service_request_status) IN (''CONFIRMED'',''TERMINATED'')
     AND   ipsr.payment_service_request_id = ipa.payment_service_request_id
     AND   ipa.payment_instruction_id = ipia.payment_instruction_id
     AND   cpd.payment_instruction_id = ipia.payment_instruction_id
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_selected_invoices_all asi
             WHERE  asi.checkrun_id = aisc.checkrun_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_payment_schedules_all aps
             WHERE  aps.checkrun_id = aisc.checkrun_id)'
  );


  add_signature(g_signatures,
    43,
    'INVOICE',
    '',
    '9126009',
    '874742.1',
    'ap_inv_null_amt_rem_sel.sql',
    'Unable to pay invoices which incorrectly have a null amount remaining in ap_payment_schedules',
    'Apply the GDF patch following the instructions provided in [874742.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT /*+ ordered use_nl(ai, aps) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_amount,
            ai.amount_paid,
            ai.payment_status_flag inv_pay_status_flag,
            aps.payment_num,
            aps.payment_status_flag aps_pay_status_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps
     WHERE aps.invoice_id = ai.invoice_id
     AND   aps.amount_remaining is null
     AND   ai.cancelled_date is null
     AND   nvl(ai.historical_flag,''N'') <> ''Y''
     AND   ai.invoice_currency_code = ai.payment_currency_code
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    44,
    'INVOICE',
    '',
    '17415455',
    '1072750.1',
    'ap_updt_le_rec_inv_sel.sql',
    'Upgraded recurring invoice templates in ap_recurring_payments_all which have a null legal entity id or payment method code or an incorrect external bank account id.',
    'Apply the GDF patch following the instructions provided in [1072750.1]',
    'Y',
    'N',
    impact_area_tbl('Validation Selection'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''Null Legal Entity ID'' issue_type,
            1 type_id,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            arp.recurring_pay_num recurring_payment_number,
            arp.recurring_payment_id,
            arp.legal_entity_id old_legal_entity_id,
            arp.legal_entity_id new_legal_entity_id,
            arp.payment_method_code old_payment_method,
            arp.payment_method_code new_payment_method,
            arp.external_bank_account_id old_bank_account_id,
            arp.external_bank_account_id new_bank_account_id
     FROM invs,
          ap_invoices_all ai,
          ap_recurring_payments_all arp
     WHERE arp.legal_entity_id is null
     AND   ai.recurring_payment_id = arp.recurring_payment_id
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ''Null Payment Method Code'',
            2 type_id,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            arp.recurring_pay_num,
            arp.recurring_payment_id,
            arp.legal_entity_id,
            arp.legal_entity_id,
            arp.payment_method_code,
            arp.payment_method_code,
            arp.external_bank_account_id,
            arp.external_bank_account_id
     FROM invs,
          ap_invoices_all ai,
          ap_recurring_payments_all arp
     WHERE arp.payment_method_code is null
     AND   ai.recurring_payment_id = arp.recurring_payment_id
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, arp) */
            ''Incorrect External Bank Account'',
            3 type_id,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            arp.recurring_pay_num,
            arp.recurring_payment_id,
            arp.legal_entity_id,
            arp.legal_entity_id,
            arp.payment_method_code,
            arp.payment_method_code,
            arp.external_bank_account_id,
            arp.external_bank_account_id
     FROM invs,
          ap_invoices_all ai,
          ap_recurring_payments_all arp
     WHERE arp.external_bank_account_id is not null
     AND   ai.recurring_payment_id = arp.recurring_payment_id
     AND   EXISTS (
             SELECT /*+ no_unnest */ ''11i bank''
             FROM iby_upg_instruments upg
             WHERE upg.bank_account_id = arp.external_bank_account_id
             AND   upg.supplier_site_id = arp.vendor_site_id
             AND   upg.org_id = arp.org_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ ''No R12 Bank''
             FROM iby_pmt_instr_uses_all piu,
                  iby_external_payees_all iepa
             WHERE iepa.ext_payee_id = piu.ext_pmt_party_id
             AND   iepa.supplier_site_id = arp.vendor_site_id
             AND   iepa.org_id = arp.org_id
             AND   piu.payment_function = ''PAYABLES_DISB''
             AND   piu.instrument_type = ''BANKACCOUNT''
             AND   piu.instrument_id = arp.external_bank_account_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    45,
    'INVOICE',
    '',
    '8525474',
    '874709.1',
    'ap_inv_null_pay_stat_sel.sql',
    'Non-canceled Invoices with a null payment_status_flag',
    'Apply the GDF patch following the instructions provided in [874709.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_amount,
            ai.amount_paid
     FROM ap_invoices_all ai,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.payment_status_flag is null
     AND   ai.cancelled_date is null
     AND   nvl(ai.historical_flag,''N'') <> ''Y''
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    160,
    'INVOICE',
    '',
    '19637629',
    '1940180.1',
    'ap_syncup_inv_num_sel.sql',
    'Invoices where the invoice_num value does not correspond to the value in Payments, EBTax, or Subledger Accounting tables.',
    'Follow the instructions provided in [1225683.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Discard'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(xte.source_id_int_1,-99) = ai.invoice_id
     AND   xte.ledger_id = ai.set_of_books_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.transaction_number <> ai.invoice_num
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id
     FROM invs,
          ap_invoices_all ai,
          iby_docs_payable_all idp
     WHERE ai.invoice_id = invs.invoice_id
     AND   idp.calling_app_doc_unique_ref2 = ai.invoice_id
     AND   idp.calling_app_id = 200
     AND   idp.pay_proc_trxn_type_code IN (''PAYABLES_DOC'',''EMPLOYEE_EXP'')
     AND   (idp.calling_app_doc_unique_ref1, idp.calling_app_doc_unique_ref2) IN (
             SELECT to_char(aps.checkrun_id),
                    to_char(aps.invoice_id)
             FROM ap_payment_schedules_all aps
             WHERE aps.invoice_id = ai.invoice_id
             UNION
             SELECT to_char(nvl(ac.checkrun_id, ac.check_id)),
                    to_char(aip.invoice_id)
             FROM ap_invoice_payments_all aip, ap_checks_all ac
             WHERE aip.invoice_id = ai.invoice_id
             AND   aip.check_id = ac.check_id)
     AND   idp.calling_app_doc_ref_number <> ai.invoice_num
     AND   idp.org_id = ai.org_id
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id
     FROM invs,
          ap_invoices_all ai,
          zx_lines zl
     WHERE ai.invoice_id = invs.invoice_id
     AND   zl.trx_id = ai.invoice_id
     AND   zl.application_id = 200
     AND   zl.entity_code = ''AP_INVOICES''
     AND   zl.TRX_NUMBER <> ai.invoice_num'
  );


  add_signature(g_signatures,
    170,
    'INVOICE',
    '',
    '20318525',
    '2025829.1',
    'ap_inv_incl_canc_sel.sql',
    'Canceled invoices where the total tax amount is not zero',
    'Follow the instructions provided in [2025829.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.cancelled_date,
            ai.total_tax_amount
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.cancelled_date is not null
     AND   ai.total_tax_amount <> 0
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    204,
    'INVOICE',
    '',
    '17445464',
    '1543361.1',
    'AP_NOT_NULL_QTY_INV_SEL.sql',
    'Canceled and discarded invoice lines where the quantity invoiced has not been set to 0',
    'Apply the GDF patch following the instructions provided in [1543361.1]',
    'Y',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT ail.invoice_id,
            ail.org_id,
            ail.line_number,
            ail.historical_flag,
            ail.line_type_lookup_code,
            ail.discarded_flag,
            ail.cancelled_flag,
            ail.quantity_invoiced,
            ail.po_line_location_id
     FROM ap_invoice_lines_all ail,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE (nvl(discarded_flag,''N'') = ''Y'' OR
            nvl(cancelled_flag,''N'') = ''Y'')
     AND   po_line_location_id is not null
     AND   nvl(quantity_invoiced,0) <> 0
     AND   ail.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    217,
    'INVOICE',
    '',
    '11838058',
    '1403715.1',
    'ap_pop_awt_invoice_id_sel.sql',
    'Invoices with AWT reversal distributions which do not have the awt_invoice_id populated',
    'Apply the GDF patch following the instructions provided in [1403715.1]',
    'Y',
    'N',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT ai.invoice_id awt_invoice_id,
            ai.invoice_amount,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            substr(ai.invoice_num,
              instr(ai.invoice_num, ''-'', 1, 1) + 2,
              ((instr(ai.invoice_num, ''-'', 1, 2) - 1) -
               (instr(ai.invoice_num, ''-'', 1, 1) + 2))) invoice_id,
            substr(ai.invoice_num,
              instr(ai.invoice_num, ''-'', 1, 2) + 2,
                decode(instr(ai.invoice_num, ''Cancelled'',1,1),
                  0, length(ai.invoice_num),
                     (instr(ai.invoice_num, ''-'', 1, 3) - 1) -
                     (instr(ai.invoice_num, ''-'', 1, 2) + 2))) invoice_line_number,
            decode(instr(ai.invoice_num, ''Cancelled'', 1, 1),
              0, '''',
              ''cancelled'') status,
            CASE
              WHEN (
                SELECT count(1) FROM ap_invoice_distributions_all aid1
                WHERE aid1.invoice_id = ai.invoice_id
                AND   rownum = 1) <> 0
              THEN ''Y''
              ELSE
                ''N''
              END awt_inv_dist_exists
     FROM ap_invoices_all ai,
          ap_system_parameters_all asp,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.org_id = asp.org_id
     AND   asp.create_awt_invoices_type = ''PAYMENT''
     AND   ai.invoice_type_lookup_code = ''AWT''
     AND   ai.source = substrb(ap_utilities_pkg.ap_get_displayed_field(''NLS TRANSLATION'',
             ''AWT''),1,25)
     AND   NOT EXISTS (
             SELECT ''no dists'' FROM ap_invoice_distributions_all aid
             WHERE aid.awt_invoice_id = ai.invoice_id
             AND   aid.line_type_lookup_code = ''AWT''
             AND   aid.org_id = ai.org_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    218,
    'INVOICE',
    '',
    '17380383',
    '1404763.1',
    'ap_prepay_amount_rem_sel.sql',
    'Prepayment invoice distributions with incorrect values in the PREPAY_AMOUNT_REMAINING column.',
    'Apply the GDF patch following the instructions provided in [1404763.1]',
    'Y',
    'N',
    impact_area_tbl('Prepay Application'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid_p.invoice_distribution_id,
            ''PAID'' invoice_state,
            aid_p.prepay_amount_remaining
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid_p
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_type_lookup_code = ''PREPAYMENT''
     AND   ai.payment_status_flag=''Y''
     AND   ai.invoice_id = aid_p.invoice_id
     AND   nvl(aid_p.prepay_amount_remaining, aid_p.total_dist_amount) <>
            (aid_p.total_dist_amount + (
             SELECT nvl(SUM(aid_s.amount), 0)
             FROM ap_invoice_distributions_all aid_s
             WHERE aid_s.prepay_distribution_id = aid_p.invoice_distribution_id))
     UNION ALL
     SELECT /*+ leading(invs) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid_p.invoice_distribution_id,
            ''CHECK VOIDED''    invoice_state,
            aid_p.prepay_amount_remaining
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid_p
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_type_lookup_code = ''PREPAYMENT''
     AND   ai.invoice_id = aid_p.invoice_id
     AND   nvl(aid_p.prepay_amount_remaining, aid_p.total_dist_amount) <>
           (aid_p.total_dist_amount + (
              SELECT nvl(sum(aid_s.amount), 0)
              FROM ap_invoice_distributions_all aid_s
              WHERE aid_s.prepay_distribution_id = aid_p.invoice_distribution_id))
     AND   ai.payment_status_flag=''N''
     AND   EXISTS (
             SELECT ''voided payment''
             FROM ap_invoice_payments_all aip,
                  ap_checks_all ac
             WHERE aip.invoice_id = ai.invoice_id
             AND   aip.check_id = ac.check_id
             and   ac.void_date is not null)'
  );


  add_signature(g_signatures,
    219,
    'INVOICE',
    '',
    '17445609',
    '1410403.1',
    'ap_amt_appl_to_disc_wrng_sel.sql',
    'The AMOUNT_APPLICABLE_TO_DISCOUNT column in AP_INVOICES_ALL was incorrectly updated (due to bug 9911823) causing incorrect discounts in AP_PAYMENT_SCHEDULES_ALL and over payment to suppliers',
    'Apply the GDF patch following the instructions provided in [1410403.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Data'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.source,
            ai.vendor_id,
            ai.vendor_site_id,
            ai.invoice_amount,
            nvl(ai.amount_applicable_to_discount, 0) amount_applicable_to_discount,
            nvl(ai.total_tax_amount, 0) total_tax_amount,
            nvl(ap_invoices_utility_pkg.get_freight_total(ai.invoice_id, ai.org_id),0)
              freight_total,
            nvl(abs(ap_invoices_utility_pkg.get_retained_total(ai.invoice_id, ai.org_id)),0)
              retained_amt,
            nvl(ai.exclude_freight_from_discount, ''N'') exclude_freight_from_discount,
            nvl(ai.disc_is_inv_less_tax_flag, ''N'') disc_is_inv_less_tax_flag,
            nvl(ai.net_of_retainage_flag, ''N'') net_of_retainage_flag,
            nvl((
              SELECT (0 - sum(nvl(amount,0)))
              FROM ap_invoice_distributions_all aid_awt
              WHERE aid_awt.invoice_id = ai.invoice_id
              AND   line_type_lookup_code = ''AWT'')
            , 0) total_awt,
            nvl((
              SELECT nvl(sum(aid_awt.amount),0)
              FROM ap_invoice_distributions_all aid_fre,
                   ap_invoice_distributions_all aid_awt
              WHERE aid_fre.invoice_id = ai.invoice_Id
              AND   aid_fre.invoice_id = aid_awt.invoice_id
              AND   aid_fre.line_type_lookup_code = ''FREIGHT''
              AND   aid_awt.line_type_lookup_code = ''AWT''
              AND   aid_fre.invoice_distribution_id = aid_awt.awt_related_id)
            , 0) awt_on_freight,
         ai.terms_id,
         decode(nvl(ai.payment_status_flag, ''N''),
                ''N'', ''UNPAID'',
                ''P'', ''PARTIALLY PAID'',
                ''Y'', ''PAID'') payment_status,
                atl.discount_percent,
                atl.discount_percent_2,
                atl.discount_percent_3
     FROM ap_invoices_all ai,
          ap_terms_lines atl,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE atl.term_id = ai.terms_id
     AND   ai.invoice_amount <> 0
     AND   ai.historical_flag is null
     AND   ai.cancelled_date is null
     AND   ai.invoice_type_lookup_code NOT IN (''INTEREST'')
     AND   nvl(ai.amount_applicable_to_discount, 0) <>
             (ai.invoice_amount -
               (CASE
                  WHEN nvl(ai.exclude_freight_from_discount, ''N'') = ''Y'' THEN
                    nvl(ap_invoices_utility_pkg.get_freight_total(
                          ai.invoice_id,
                          ai.org_id),0)
                  ELSE 0
                END) -
               (CASE
                  WHEN nvl(ai.net_of_retainage_flag, ''N'') = ''N'' THEN
                    nvl(abs(ap_invoices_utility_pkg.get_retained_total(
                              ai.invoice_id,
                              ai.org_id))
                      ,0)
                  ELSE 0
                END) -
               (CASE
                  WHEN nvl(ai.disc_is_inv_less_tax_flag, ''N'') = ''Y'' THEN
                    nvl(ai.total_tax_amount, 0)
                  ELSE 0
                END) -
  	     (nvl((
                  SELECT (0 - sum(nvl(amount,0)))
                  FROM ap_invoice_distributions_all aid_awt
                  WHERE aid_awt.invoice_id = ai.invoice_id
                  AND   line_type_lookup_code = ''AWT'')
                , 0)) -
               (CASE
                  WHEN nvl(ai.exclude_freight_from_discount, ''N'') = ''Y'' THEN
  	          nvl((
                      SELECT nvl(sum(aid_awt.Amount),0)
                      FROM ap_invoice_distributions_all aid_fre,
                           ap_invoice_distributions_all aid_awt
                      WHERE aid_fre.invoice_id = ai.invoice_id
                      AND   aid_fre.invoice_id = aid_awt.invoice_id
                      AND   aid_fre.line_type_lookup_code = ''FREIGHT''
                      AND   aid_awt.line_type_lookup_code = ''AWT''
                      AND   aid_fre.invoice_distribution_id = aid_awt.awt_related_id)
                    ,0)
                  ELSE 0
                END))
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    220,
    'INVOICE',
    '',
    '12339202',
    '1404696.1',
    'ap_ret_dist_id_on_rev_dist_sel.sql',
    'Invoices with cancelled or reversed retainage release distributions which have a null retainage_invoice_id causing errors when creating accounting.',
    'Apply the GDF patch following the instructions provided in [1404696.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+ ordered use_nl(ai, aid, aid2) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.parent_reversal_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_invoice_distributions_all aid2
     WHERE ai.invoice_type_lookup_code = ''RETAINAGE RELEASE''
     AND   nvl(ai.historical_flag,''N'') <> ''Y''
     AND   ai.invoice_id = aid.invoice_id
     AND   aid.line_type_lookup_code = ''RETAINAGE''
     AND   aid.parent_reversal_id is not null
     AND   aid.retained_invoice_dist_id is null
     AND   aid2.invoice_id = aid.invoice_id
     AND   aid.parent_reversal_id = aid2.invoice_distribution_id
     AND   aid2.retained_invoice_dist_id is not null
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    235,
    'INVOICE',
    '',
    '17500015',
    '1447997.1',
    'ap_consolidated_upgr_script_sel.sql Wrong Award_Id Lines',
    'Upgraded invoice lines which had incorrect award_id values populated from the 11i distributions.',
    'Apply the GDF patch following the instructions provided in [1447997.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Data'),
    'SELECT /*+ leading(invs) */
            ail.invoice_id,
            ail.org_id,
            ail.line_number,
            ail.award_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_lines_all ail
     WHERE ail.historical_flag = ''Y''
     AND   ail.award_id is not null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ail.invoice_id
  	   AND   aid.invoice_line_number = ail.line_number
  	   AND   aid.award_id = ail.award_id)
     AND   ail.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    236,
    'INVOICE',
    '',
    '17500015',
    '1447997.1',
    'ap_consolidated_upgr_script_sel.sql Null Delivery Channel Code',
    'Upgraded invoices which have null delivery channel code.',
    'Apply the GDF patch following the instructions provided in [1447997.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Data'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.vendor_id,
            ai.vendor_site_id,
            ai.invoice_num,
            ass.edi_remittance_method
     FROM ap_invoices_all ai,
          ap_supplier_sites_all ass,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.historical_flag = ''Y''
     AND   nvl(ai.payment_status_flag, ''N'') <> ''Y''
     AND   ai.payment_method_code = ''EFT''
     AND   ai.delivery_channel_code is null
     AND   ai.cancelled_date is null
     AND   ass.vendor_site_id = ai.vendor_site_id
     AND   ass.edi_remittance_method is not null
     AND   ass.inactive_date is null
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    243,
    'INVOICE',
    '',
    '21497508',
    '1489862.1',
    'ap_one_off_scripts_sel.sql Cancel',
    'Various invoice cancelation related issues are addressed. See problem description for each row, and see note 1489862.1 for a description of all issues covered.',
    'Apply the GDF patch following the instructions provided in [1489862.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered */
            ''CAN1''corruption_type,
            ai.invoice_id,
            ai.invoice_date,
            ai.org_id,
            ai.batch_id,
            ail.line_number,
            NULL invoice_distribution_id,
            ''Included tax amount is not null on cancelled invoice'' problem_description
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = ail.invoice_id
     AND   ai.cancelled_date IS NOT NULL
     AND   NVL(ail.included_tax_amount,0) <> 0
     AND   (SELECT /*+ index(ZL ZX_LINES_U1) */
                   NVL(SUM(NVL(zl.tax_amt, 0)),0)
            FROM zx_lines zl
            WHERE zl.application_id  =  200
            AND   zl.entity_code  =  ''AP_INVOICES''
            AND   zl.trx_id   = ail.invoice_id
            AND   zl.trx_line_id = ail.line_number
            AND   NVL(zl.self_assessed_flag,    ''N'')  = ''N''
            AND   NVL(zl.reporting_only_flag,   ''N'') = ''N''
            AND   NVL(zl.tax_amt_included_flag, ''N'') = ''Y'') = 0
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered */
            ''CAN2'',
            ai.invoice_id,
            ai.invoice_date,
            ai.org_id,
            ai.batch_id,
            NULL,
            NULL,
            ''Incorrect approval status on cancelled invoice''
     FROM invs,
          ap_invoices_all ai
     WHERE ai.cancelled_date is not null
     AND   ai.WFAPPROVAL_STATUS NOT IN (''NOT REQUIRED'',''APPROVED'',''MANUALLY APPROVED'')
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    244,
    'INVOICE',
    '',
    '21497508',
    '1489862.1',
    'ap_one_off_scripts_sel.sql Invoice',
    'Various invoice related issues are addressed. See problem description for each row, and see note 1489862.1 for a description of all issues covered.',
    'Apply the GDF patch following the instructions provided in [1489862.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Invoice Data', 'Trial Balance'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(aid) */
            ''INV1'' corruption_type,
            aid.invoice_id,
            aid.org_id,
            to_number(null) batch_id,
            aid.invoice_line_number,
            aid.parent_reversal_id,
            aid.accounting_event_id,
            ''Amounts are null for reversed distributions'' problem_description
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE aid.amount is null
     AND   aid.reversal_flag = ''Y''
     AND   nvl(aid.historical_flag,''N'') <> ''Y''
     AND   aid.parent_reversal_id is not null
     AND   aid.line_type_lookup_code NOT IN (''REC_TAX'',''NONREC_TAX'',
             ''TRV'',''TERV'',''TIPV'')
     AND   aid.posted_flag <> ''Y''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = aid.invoice_id
             AND   aid1.invoice_line_number = aid.invoice_line_number
             AND   aid1.line_type_lookup_code = aid.line_type_lookup_code
             AND   aid1.invoice_distribution_id = aid.parent_reversal_id
             AND   aid1.amount is null
             AND   NVL(aid.posted_flag,''N'') <> ''Y''
             AND   aid1.reversal_flag = ''Y'')
     AND   aid.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, ail, aid) */
            ''INV2'',
            ail.invoice_id,
            ail.org_id,
            null,
            ail.line_number,
            null,
            null,
           ''Junk characters in Line description causes accounting issues''
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = ail.invoice_id
     AND   ail.invoice_id = aid.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     AND   ((ail.description is not null
                AND   instr(ail.description,(chr(0)),1,1) > 0 )
                 OR (aid.description is not null
                AND   instr(aid.description,(chr(0)),1,1) > 0 )
                 OR (ai.description is not null
                AND   instr(ai.description,(chr(0)),1,1) > 0 ))
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered  use_nl(ail) */
            ''INV3'',
            ail.invoice_id,
            ail.org_id,
            null,
            ail.line_number,
            null,
            null,
            ''Default CCID on invoice line is -1''
     FROM invs,
          ap_invoice_lines_all ail
     WHERE ail.default_dist_ccid = -1
     AND   ail.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, ab) */
            ''INV4'',
            null,
            ab.org_id,
            ab.batch_id,
            null,
            null,
            null,
            ''Org_id on batches and invoices do not match''
     FROM invs,
          ap_invoices_all ai,
          ap_batches_all ab
     WHERE ab.org_id is not null
     AND   ai.invoice_id = invs.invoice_id
     AND   ai.batch_id = ab.batch_id
     AND   ai.org_id <> ab.org_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai) */
            ''INV5'',
            ai.invoice_id,
            ai.org_id,
            ai.batch_id,
            null,
            null,
            null,
            ''Invoice_type_lookup_code is null on upgraded invoices''
     FROM invs,
          ap_invoices_all ai
     WHERE ai.historical_flag = ''Y''
     AND   ai.invoice_type_lookup_code is null
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ leading(invs) use_nl(ai) */
            ''INV6'',
            ai.invoice_id,
            ai.org_id,
            ai.batch_id,
            null,
            null,
            null,
            ''Party_id and party_site_id are null on upgraded invoices''
     FROM invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   (EXISTS (
              SELECT /*+ no_unnest */''Party_id_mismatch''
              FROM ap_suppliers ven
              WHERE ai.vendor_id = ven.vendor_id
              AND   nvl(ai.party_id,-1) <> nvl(ven.party_id,-1)) OR
            EXISTS (
              SELECT /*+ no_unnest */ ''Party_site_id_mismatch''
              FROM ap_supplier_sites_all assa
              WHERE ai.vendor_site_id = assa.vendor_site_id
              AND   nvl(ai.party_site_id,-1) <> nvl(assa.party_site_id,-1)))
     UNION ALL
     SELECT /*+ ordered use_nl(ai, ail) */
            ''INV7'',
            ail.invoice_id,
            ail.org_id,
            ai.batch_id,
            ail.line_number,
            null,
            null,
            ''Generate_dists flag is incorrect on expense reports''
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = ail.invoice_id
     AND   ai.invoice_type_lookup_code = ''EXPENSE REPORT''
     AND   ail.generate_dists = ''Y''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id  = ail.invoice_id
             AND   aid.invoice_line_number = ail.line_number)
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(aid) */
            ''INV8'',
            aid.invoice_id,
            aid.org_id,
            null,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.accounting_event_id,
            ''Null accrual and cash posted_flag on unaccounted distributions''
     FROM invs,
          ap_invoice_distributions_all aid
     WHERE aid.invoice_id = invs.invoice_id
     AND   aid.accrual_posted_flag is null
     AND   aid.cash_posted_flag is null
     AND   aid.posted_flag = ''N''
     UNION ALL
     SELECT /*+ ordered  use_nl(ai, ail) */
            ''INV9'',
            ail.invoice_id,
            ail.org_id,
            ai.batch_id,
            ail.line_number,
            null,
            null,
            ''Discarded line has active distributions''
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = ail.invoice_id
     AND   NVL(ai.historical_flag,''N'') <> ''Y''
     AND   ail.discarded_flag = ''Y''
     AND   ail.amount <> 0
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ail.invoice_id
             AND   aid.invoice_line_number = ail.line_number
             AND   aid.parent_reversal_id is not null)
     AND ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    246,
    'INVOICE',
    '',
    '21497508',
    '1543361.1',
    'ap_one_off_scripts_sel.sql Matching',
    'Various invoice matching related issues are addressed. See problem description for each row, and see note 1489862.1 for a description of all issues covered.',
    'Apply the GDF patch following the instructions provided in [1543361.1]',
    'Y',
    'N',
    impact_area_tbl('PO Matching'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered */
            ''MAT2'' Category,
            aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            ail.po_line_location_id,
            aid.po_distribution_id,
            ''UOM codes in PO and AP do not match'' Issue
     FROM invs,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid,
          po_line_locations_all pll
     WHERE ail.invoice_id = aid.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     AND   ail.po_line_location_id is not null
     AND   ail.po_line_location_id = pll.line_location_id
     AND   aid.dist_match_type in (''ITEM_TO_PO'',''ITEM_TO_SERVICE_PO'')
     AND   ail.rcv_transaction_id is null
     AND   aid.rcv_transaction_id is null
     AND   aid.line_type_lookup_code IN (''ITEM'',''ACCRUAL'')
     AND   (nvl(ail.UNIT_MEAS_LOOKUP_CODE,-1) <> nvl(pll.UNIT_MEAS_LOOKUP_CODE,-1)
             OR nvl(aid.MATCHED_UOM_LOOKUP_CODE,-1) <> nvl(pll.UNIT_MEAS_LOOKUP_CODE,-1)
           OR nvl(ail.UNIT_MEAS_LOOKUP_CODE,-1) <> nvl(aid.MATCHED_UOM_LOOKUP_CODE,-1))
     AND   ail.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered */
            ''MAT3'',
            ail.invoice_id,
            ail.org_id,
            ail.line_number,
            null,
            ail.po_line_location_id,
            ail.po_distribution_id,
            ''Quantity_invoiced mismatch on AP line and distribution''
     FROM invs,
          ap_invoice_lines_all ail,
           ap_invoice_distributions_all aid
     WHERE ail.po_line_location_id is not null
     AND   nvl(ail.discarded_flag,''N'') <> ''Y''
     AND   nvl(ail.cancelled_flag,''N'') <> ''Y''
     AND   ail.line_type_lookup_code IN (''ITEM'',''ACCRUAL'')
     AND   ail.match_type NOT IN (''PRICE_CORRECTION'',''QTY_CORRECTION'')
     AND   aid.invoice_id = ail.invoice_id
     AND   aid.invoice_line_number = ail.line_number
     AND   ail.invoice_id = invs.invoice_id
     GROUP BY ail.invoice_id, ail.org_id, ail.line_number,
              ail.po_line_location_id, ail.po_distribution_id, ail.amount,
              ail.quantity_invoiced
     HAVING nvl(ail.quantity_invoiced,0) <> sum(nvl(aid.quantity_invoiced,0)) AND
            ail.amount = sum(aid.amount)
     UNION ALL
     SELECT /*+ ordered */
            ''MAT4'',
            ail.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            ail.rcv_transaction_id,
            aid.rcv_transaction_id,
            ''Rcv_transaction_id missing on distributions matched to receipts''
     FROM invs,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid
     WHERE ail.invoice_id = aid.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     AND   ail.po_line_location_id is not null
     AND   aid.po_distribution_id is not null
     AND   nvl(ail.historical_flag,''N'') <> ''Y''
     AND   nvl(aid.historical_flag,''N'') <> ''Y''
     AND   (ail.line_type_lookup_code IN (''ITEM'',''PREPAY'',
              ''RETAINAGE RELEASE'',''RETROITEM'') OR
            (ail.line_type_lookup_code IN (''FREIGHT'',''MISCELLANEOUS'') AND
             nvl(ail.match_type,''NOT_MATCHED'') = ''OTHER_TO_RECEIPT''))
     AND   (aid.rcv_transaction_id is null AND
            ail.rcv_transaction_id is not null OR
            ail.rcv_transaction_id is null AND
            aid.rcv_transaction_id is not null)
     AND   ail.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    247,
    'INVOICE',
    '',
    '21497508',
    '1489862.1',
    'ap_one_off_scripts_sel.sql Tax AWT',
    'Amount and base_amounts different for functional currency AWT',
    'Apply the GDF patch following the instructions provided in [1489862.1]',
    'Y',
    'N',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT /*+ ordered */
            ''TAX1'' corruption_type,
            ai.invoice_id,
            ai.invoice_date,
            ai.org_id,
            aid.invoice_line_number line_number,
            aid.invoice_distribution_id,
            null vendor_site_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_system_parameters_all asp
     WHERE ai.invoice_id = aid.invoice_id
     AND   ai.org_id = asp.org_id
     AND   ai.invoice_currency_code = asp.base_currency_code
     AND   aid.line_type_lookup_code = ''AWT''
     AND   NVL(aid.historical_flag,''N'') <> ''Y''
     AND   NVL(aid.posted_flag, ''N'') <> ''Y''
     AND   (aid.base_amount is NULL OR
            (aid.base_amount is NOT NULL AND
             aid.amount <> aid.base_amount))
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    249,
    'INVOICE',
    '',
    '21497508',
    '1489862.1',
    'ap_one_off_scripts_sel.sql Prepayment',
    'Various invoice prepay related issues are addressed. See problem description for each row, and see note 1489862.1 for a description of all issues covered.',
    'Apply the GDF patch following the instructions provided in [1489862.1]',
    'Y',
    'N',
    impact_area_tbl('Prepay Application'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai_std, ail_std, aid_std) */
            ''PRE1'' corruption_type,
            aid_std.invoice_id,
            aid_std.org_id,
            ail_std.line_number,
            aid_std.invoice_distribution_id,
            aid_std.accounting_event_id,
            ''Prepayment applied belongs to different org or currency code''
              problem_description
     FROM invs,
          ap_invoices_all ai_std,
          ap_invoice_lines_all ail_std,
          ap_invoice_distributions_all aid_std,
          ap_invoices_all ai_prepay
     WHERE ai_std.invoice_id = ail_std.invoice_id
     AND   ail_std.invoice_id = aid_std.invoice_id
     AND   ail_std.line_number = aid_std.invoice_line_number
     AND   ail_std.prepay_invoice_id is not null
     AND   ail_std.line_type_lookup_code = ''PREPAY''
     AND   ail_std.prepay_invoice_id = ai_prepay.invoice_id
     AND   aid_std.posted_flag = ''N''
     AND   (ai_prepay.invoice_currency_code <> ai_std.invoice_currency_code OR
            ai_prepay.org_id <> ai_std.org_id)
     AND   ai_std.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(aid_app, aid_unap) */
            ''PRE2'',
            aid_app.invoice_id,
            aid_app.org_id,
            aid_app.invoice_line_number,
            aid_unap.invoice_distribution_id,
            aid_app.accounting_event_id,
            ''Prepayment unapplication event is less than the application event''
     FROM invs,
          ap_invoice_distributions_all aid_app,
          ap_invoice_distributions_all aid_unap
     WHERE aid_app.invoice_id = aid_unap.invoice_id
     AND   nvl(aid_app.posted_flag,''N'')   <> ''Y''
     AND   nvl(aid_unap.posted_flag,''N'')  <>''Y''
     AND   aid_app.reversal_flag = ''Y''
     AND   aid_unap.reversal_flag = ''Y''
     AND   aid_app.prepay_distribution_id is not null
     AND   aid_unap.prepay_distribution_id is not null
     AND   aid_unap.parent_reversal_id is not null
     AND   aid_unap.parent_reversal_id = aid_app.invoice_distribution_id
     AND   aid_unap.accounting_event_id < aid_app.accounting_event_id
     AND   aid_app.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, ail) */
            ''PRE3'' corruption_type,
            ai.invoice_id,
            ai.org_id,
            ail.line_number,
            NULL,
            NULL,
            ''No data in ZX_DET_LINE_FACTORS for prepay invoice''
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = ail.invoice_id
     AND   ai.org_id = ail.org_id
     AND   ai.cancelled_date is null
     AND   ai.cancelled_by is null
     AND   ai.historical_flag is null
     AND   ai.invoice_type_lookup_code IN (''PREPAYMENT'')
     AND   ail.line_type_lookup_code NOT IN (''TAX'', ''AWT'')
     AND   ail.tax_already_calculated_flag is null
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM zx_lines_det_factors
             WHERE application_id = 200
             AND   entity_code = ''AP_INVOICES''
             AND   trx_id = ail.invoice_id
             AND   trx_line_id = line_number)
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid
             WHERE ail.invoice_id = aid.invoice_id
             AND   ail.line_number = aid.invoice_line_number
             AND   ail.org_id = aid.org_id
                AND   aid.MATCH_STATUS_FLAG = ''A'')'
  );


  add_signature(g_signatures,
    255,
    'INVOICE',
    '',
    '17454983',
    '1500241.1',
    'ap_upd_tax_asset_add_flg_sel.sql',
    'Performance degradation due to large numbers of non-asset tax distributions with asset_addition_flag set to ''U''',
    'Apply the GDF patch following the instructions provided in [1500241.1]',
    'Y',
    'N',
    impact_area_tbl('Mass Additions'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai, apid, item) */
            ''Type 1'' type,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            apid.invoice_distribution_id,
            apid.invoice_line_number,
            apid.distribution_line_number,
            apid.line_type_lookup_code
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all apid,
          ap_invoice_distributions_all item
     WHERE apid.invoice_id = ai.invoice_id
     AND   apid.assets_addition_flag = ''U''
     AND   apid.line_type_lookup_code NOT IN (''ITEM'',''ACCRUAL'')
     AND   item.assets_tracking_flag = ''N''
     AND   nvl(nvl(apid.charge_applicable_to_dist_id, apid.related_id),
             apid.corrected_invoice_dist_id) is not null
     AND   item.invoice_distribution_id =
             nvl(nvl(apid.charge_applicable_to_dist_id, apid.related_id),
             apid.corrected_invoice_dist_id)
     AND   apid.invoice_distribution_id <> item.invoice_distribution_id
     AND   apid.posted_flag = ''Y''
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, apid, item) */
            ''Type 1'' type,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            apid.invoice_distribution_id,
            apid.invoice_line_number,
            apid.distribution_line_number,
            apid.line_type_lookup_code
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all apid,
          ap_invoice_distributions_all item
     WHERE apid.invoice_id = ai.invoice_id
     AND   apid.assets_addition_flag = ''U''
     AND   apid.line_type_lookup_code NOT IN (''ITEM'',''ACCRUAL'')
     AND   item.assets_tracking_flag = ''Y''
     AND   item.assets_addition_flag = ''N''
     AND   nvl(nvl(apid.charge_applicable_to_dist_id, apid.related_id),
             apid.corrected_invoice_dist_id) is not null
     AND    item.invoice_distribution_id =
              nvl(nvl(apid.charge_applicable_to_dist_id, apid.related_id),
              apid.corrected_invoice_dist_id)
     AND   apid.invoice_distribution_id <> item.invoice_distribution_id
     AND   apid.posted_flag = ''Y''
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, apid) */
            ''Type 2'' type,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            apid.invoice_distribution_id,
            apid.invoice_line_number,
            apid.distribution_line_number,
            apid.line_type_lookup_code
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all apid
     WHERE apid.invoice_Id = ai.invoice_id
     AND   apid.assets_addition_flag = ''U''
     AND   apid.line_type_lookup_code NOT IN (''ITEM'',''ACCRUAL'')
     AND   nvl(nvl(apid.charge_applicable_to_dist_id, apid.related_id)
                 , apid.corrected_invoice_dist_id ) is null
     AND   apid.posted_flag = ''Y''
     AND   apid.assets_tracking_flag = ''N''
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    256,
    'INVOICE',
    '',
    '14067373',
    '1500291.1',
    'ap_corr_awt_inv_sel.sql',
    'AWT invoices on which proper distributions have not been created.',
    'Apply the GDF patch following the instructions provided in [1500291.1]',
    'Y',
    'Y',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT /*+ ordered use_nl(ai) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_type_lookup_code,
            ai.historical_flag,
            ai.invoice_amount
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_type_lookup_code = ''AWT''
     AND   nvl(ai.historical_flag,''N'') = ''N''
     AND   ai.invoice_amount <> (
             SELECT /*+ no_unnest */
                    nvl(sum(aid.amount),ai.invoice_amount+1)
             FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    258,
    'INVOICE',
    '',
    '14487885',
    '1496461.1',
    'ap_missing_attributes_sel.sql',
    'Initiated invoice approval notifications that have missing role attributes.',
    'Apply the GDF patch following the instructions provided in [1496461.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Approval'),
    'SELECT invs.invoice_id,
            wi.item_key,
            wi.root_activity,
            wi.root_activity_version,
            wi.owner_role,
            wi.parent_item_type,
            wi.parent_item_key,
            wi.parent_context,
            wi.begin_date,
            wi.end_date,
            wi.user_key,
            wi.ha_migration_flag,
            wi.security_group_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          wf_items wi,
          wf_item_attribute_values wiav
     WHERE wi.item_type = ''APINVAPR''
     AND   wi.end_date is null
     AND   wi.item_type = wiav.item_type
     AND   wi.item_key = wiav.item_key
     AND   wiav.name = ''INVOICE_ID''
     AND   wiav.number_value = invs.invoice_id
     AND   NOT EXISTS (
              SELECT 1 FROM wf_item_attribute_values  wiav2
              WHERE wiav2.item_type = ''APINVAPR''
              AND   wiav2.item_key  = wi.item_key
              AND   wiav2.name IN (''ROLE_ACTUAL'' ,''ESC_ROLE_ACTUAL''))'
  );


  add_signature(g_signatures,
    259,
    'INVOICE',
    '',
    '16216890',
    '1367272.1',
    'iby_splt_pmts_sel.sql',
    'Payments are stuck in SPOILED status leaving PPR in Formatting status.',
    'Apply the GDF patch following the instructions provided in [1367272.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT /*+ ordered use_nl(req, docs) */ DISTINCT
            pmt.payment_id,
            pmt.payment_method_code,
            pmt.payment_service_request_id,
            req.call_app_pay_service_req_code,
            pmt.Payment_status,
            pmt.payments_complete_flag,
            pmt.payment_instruction_id,
            pmt.paper_document_number,
            pmt.payee_party_id,
            pmt.payment_date,
            pmt.party_site_id
     FROM iby_payments_all pmt,
          iby_pay_service_requests req,
          iby_docs_payable_all  docs,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE pmt.payment_status = ''REMOVED_DOCUMENT_SPOILED''
     AND   pmt.payment_service_request_id = req.payment_service_request_id
     AND   docs.payment_id = pmt.payment_id
     AND   docs.document_status =''PAYMENT_CREATED''
     AND   docs.calling_app_doc_unique_ref2 = invs.invoice_id'
  );


  add_signature(g_signatures,
    267,
    'INVOICE',
    '',
    '17311645',
    '1188825.1',
    'AP_DUP_PMT_AWT_DISTS_SEL.sql Orphan Temp Dists',
    'Orphan AWT distributions in ap_awt_temp_distributions_all which cause creation of duplicate AWT distributions.',
    'Apply the GDF patch following the instructions provided in [1188825.1]',
    'Y',
    'Y',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT aatd.invoice_id,
            aatd.org_id,
            aatd.checkrun_id,
            aatd.payment_num,
            aatd.invoice_payment_id,
            aatd.group_id,
            aatd.tax_name,
            aatd.gross_amount,
            aatd.withholding_amount,
            aatd.base_withholding_amount,
            aatd.checkrun_name,
            aatd.period_name,
            aatd.awt_related_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_awt_temp_distributions_all aatd
     WHERE aatd.checkrun_id is not null
     AND   NOT EXISTS (
             SELECT ''NO ASI'' FROM ap_selected_invoices_all asi
             WHERE aatd.invoice_id = asi.invoice_id
             AND   aatd.checkrun_id = asi.checkrun_id
             AND   aatd.payment_num = asi.payment_num)
     AND   NOT EXISTS (
             SELECT ''NO APS'' FROM ap_payment_schedules_all aps
             WHERE aatd.invoice_id = aps.invoice_id
             AND   aatd.checkrun_id = aps.checkrun_id
             AND   aatd.payment_num = aps.payment_num)
     AND   aatd.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    271,
    'INVOICE',
    '',
    '17500004',
    '1536344.1',
    'ap_upg_incor_lstupddate_sel.sql',
    'Invoice line and accounting data from 11i have last updated dates marked with the upgrade date preventing the purge of information based on dates prior to the upgrade.',
    'Apply the GDF patch following the instructions provided in [1536344.1]',
    'Y',
    'N',
    impact_area_tbl('Archive/Purge'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ail, aid) */
            ''Invoice'' trx_type,
            ail.invoice_id trx_id,
            ail.line_number invoice_line_number,
            null entity_id,
            max(ail.last_update_date) last_update_date,
            max(nvl(aid.last_update_date,aid.creation_date)) correct_upd_date
     FROM invs,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid
     WHERE ail.invoice_id = invs.invoice_id
     AND   ail.historical_flag = ''Y''
     AND   aid.historical_flag = ''Y''
     AND   aid.invoice_id = ail.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     GROUP BY ail.invoice_id, ail.line_number
     HAVING   max(ail.last_update_date) <>
                max(nvl(aid.last_update_date,aid.creation_date))
     UNION
     SELECT /*+ ordered use_nl(aid, xe, aae) */
            ''Event'',
            xe.event_id,
            null,
            xe.entity_id,
            xe.last_update_date,
            aae.last_update_date
     FROM invs,
          ap_invoice_distributions_all aid,
          xla_events xe,
          ap_accounting_events_all aae
     WHERE aid.invoice_id = invs.invoice_id
     AND   xe.event_id = aid.accounting_event_id
     AND   xe.application_id = 200
     AND   nvl(xe.upg_batch_id,-9999) <> -9999
     AND   xe.event_id = aae.accounting_event_id
     AND   xe.last_update_date <> aae.last_update_date'
  );


  add_signature(g_signatures,
    276,
    'INVOICE',
    '',
    '18062771',
    '1540400.1',
    'ap_neg_amt_dist_ppay_11i_sel.sql',
    'Upgraded prepayment invoices that were fully applied on standard invoices, appear as available.',
    'Apply the GDF patch following the instructions provided in [1540400.1]',
    'Y',
    'N',
    impact_area_tbl('Prepay Application'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai, aid) */
            ai.invoice_num,
            ai.invoice_id,
            ai.invoice_amount,
            aid.invoice_distribution_id
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.historical_flag = ''Y''
     AND   aid.historical_flag = ''Y''
     AND   ai.invoice_type_lookup_code = ''PREPAYMENT''
     AND   ai.cancelled_Date is null
     AND   ai.payment_status_flag = ''Y''
     AND   ai.invoice_id = aid.invoice_id
     AND   (aid.prepay_amount_remaining is null OR
          abs(aid.prepay_amount_remaining) > 0)
     AND   ai.invoice_amount = 0
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid) */
            ai.invoice_num,
            ai.invoice_id,
            ai.invoice_amount,
            aid.invoice_distribution_id
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
    WHERE ai.invoice_id = invs.invoice_id
    AND   ai.historical_flag = ''Y''
    AND   aid.historical_flag = ''Y''
    AND   ai.invoice_type_lookup_code = ''PREPAYMENT''
    AND   ai.cancelled_Date is null
    AND   ai.payment_status_flag = ''Y''
    AND   aid.line_type_lookup_code <> ''AWT''
    AND   ai.invoice_id = aid.invoice_id
    AND   nvl(aid.reversal_flag,''N'') <> ''Y''
    AND   (aid.prepay_amount_remaining is null OR
           abs(aid.prepay_amount_remaining) > 0)
    AND   ai.invoice_amount > 0
    AND   EXISTS (
            SELECT /*+ no_unnest */ ''1'' prepay_applied_completely
            FROM ap_invoice_lines_all ail,
                 ap_invoices_all ai2
            WHERE ail.prepay_invoice_id = ai.invoice_id
            AND   ail.amount < 0
            AND   nvl(ail.discarded_flag, ''N'') = ''N''
            AND   ail.line_type_lookup_code = ''PREPAY''
            AND   ai2.invoice_id = ail.invoice_id
            AND   ai2.invoice_type_lookup_code NOT IN
                    (''PREPAYMENT'', ''CREDIT'', ''DEBIT'')
            HAVING nvl(sum((-1) * (ail.amount - nvl(ail.included_tax_amount, 0)) +
                     nvl(nullif((-1) * (nvl(ail.total_rec_tax_amount, 0) +
                       nvl(ail.total_nrec_tax_amount, 0)), 0), 0)), 0)
                      = ai.invoice_amount)'
  );


  add_signature(g_signatures,
    277,
    'INVOICE',
    '',
    '17400717',
    '1546680.1',
    'ap_pay_met_code_null_sel.sql',
    'The payment method code is null on the payment schedule record for an invoice.',
    'Apply the GDF patch following the instructions provided in [1546680.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT /*+ ordered use_nl(ai, aps) */
            aps.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aps.payment_method_code,
            aps.payment_num,
            decode(aps.payment_num,-1,0,null) pay_num
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_payment_schedules_all aps
     WHERE ai.invoice_id = invs.invoice_id
     AND   aps.payment_method_code is null
     AND   aps.invoice_id = ai.invoice_id
     AND   nvl(ai.historical_flag,''N'') = ''N'''
  );


  add_signature(g_signatures,
    278,
    'INVOICE',
    '',
    '17499987',
    '1546685.1',
    'ap_ppay_unap_cau_neg_pd_sel.sql',
    'The amount paid is negative after a prepay application and unapplication.',
    'Apply the GDF patch following the instructions provided in [1546685.1]',
    'Y',
    'N',
    impact_area_tbl('Prepay Application'),
    'SELECT /*+ leading(invs) use_nl(ai) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.amount_paid,
            ai.invoice_amount,
            ai.invoice_type_lookup_code,
            ai.vendor_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_type_lookup_code = ''STANDARD''
     AND   nvl(ai.historical_flag,''N'') = ''N''
     AND   sign(ai.amount_paid) = -1
     AND   nvl(ai.payment_status_flag,''N'') = ''N''
     AND   ai.invoice_currency_code = ai.payment_currency_code
     AND   EXISTS (
             SELECT 1 FROM ap_payment_schedules_all aps
             WHERE aps.invoice_id = ai.invoice_id
             AND   nvl(aps.payment_status_flag,''N'') = ''N''
             HAVING sum(aps.amount_remaining) = ai.invoice_amount)
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = ai.invoice_id
             AND   ail.line_type_lookup_code = ''PREPAY''
             HAVING sum(ail.amount) = 0)'
  );


  add_signature(g_signatures,
    302,
    'INVOICE',
    '',
    '21102963',
    '1906407.1',
    'ap_sync_match_type_sel.sql',
    'The values of match_type and dist_match_type are not in sync between invoice lines and distributions.  This results in issues with quantities and amounts billed which can cause issues when matching or cancelling the invoice.',
    'Follow the instructions provided in [1906407.1]',
    'Y',
    'N',
    impact_area_tbl('PO Matching'),
    'WITH invs AS (
            ##$$MIVIEW$$##
     )
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            pll.match_option,
            pll.matching_basis,
            ail.line_type_lookup_code,
            ail.po_line_location_id,
            ail.rcv_transaction_id,
            ail.match_type line_match_type,
            aid.dist_match_type,
            ail.line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            ''NON SYNC'' type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid,
          po_line_locations_all pll
     WHERE ai.invoice_id = invs.invoice_id
     AND   ail.invoice_id = ai.invoice_id
     AND   aid.invoice_id = ail.invoice_id
     AND   aid.invoice_line_number = ail.line_number
     AND   ail.corrected_inv_id is null
     AND   ail.corrected_line_number is null
     AND   ail.po_line_location_id is not null
     AND   ail.po_line_location_id = pll.line_location_id
     AND   (nvl(ail.match_type,''NOT_MATCHED'') <>
              nvl(aid.dist_match_type,''NOT_MATCHED'') OR
            nvl(ail.match_type,''NOT_MATCHED'') = ''NOT_MATCHED'')
     AND   ail.line_type_lookup_code IN (''ITEM'',
             ''FREIGHT'', ''MISCELLANEOUS'')
     AND   ((aid.line_type_lookup_code IN (''ITEM'',
              ''ACCRUAL'',''FREIGHT'',''MISCELLANEOUS'') AND
             nvl(ail.match_type,''NOT_MATCHED'') <>
              nvl(aid.dist_match_type,''NOT_MATCHED'')) OR
            nvl(ail.match_type,''XXX'') <> (
              CASE
                WHEN(ail.rcv_transaction_id is not null AND
                     pll.matching_basis =''QUANTITY'' AND
                     ail.line_type_lookup_code=''ITEM'') THEN
                  ''ITEM_TO_RECEIPT''
                WHEN(ail.rcv_transaction_id is not null AND
                     pll.matching_basis =''AMOUNT'' AND
                     ail.line_type_lookup_code=''ITEM'')   THEN
                  ''ITEM_TO_SERVICE_RECEIPT''
                WHEN(ail.rcv_transaction_id is not null AND
                     ail.line_type_lookup_code in (''FREIGHT'',''MISCELLANEOUS'')) THEN
                  ''OTHER_TO_RECEIPT''
                WHEN(ail.rcv_transaction_id is null AND
                     ail.po_line_location_id is not null AND
                     pll.matching_basis =''QUANTITY'' AND
                     ail.line_type_lookup_code=''ITEM'') THEN
                  ''ITEM_TO_PO''
                WHEN(ail.rcv_transaction_id is null AND
                     ail.po_line_location_id is not null AND
                     pll.matching_basis =''AMOUNT'' AND
                     ail.line_type_lookup_code=''ITEM'') THEN
                  ''ITEM_TO_SERVICE_PO''
                WHEN(ail.rcv_transaction_id is null AND
                     ail.po_line_location_id is null) THEN
                  ''NOT_MATCHED''
              END))
     UNION
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            null match_option,
            null matching_basis,
            ail.line_type_lookup_code,
            ail.po_line_location_id,
            ail.rcv_transaction_id,
            ail.match_type,
            aid.dist_match_type,
            ail.line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            ''NON MATCHED''
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = ail.invoice_id
     AND   ail.invoice_id = aid.invoice_id
     AND   aid.invoice_line_number = ail.line_number
     AND   ail.match_type IN (''ITEM_TO_PO'',''ITEM_TO_RECEIPT'')
     AND   nvl(ail.discarded_flag,''N'') <> ''Y''
     AND   nvl(ail.cancelled_flag,''N'') <> ''Y''
     AND   ail.po_header_id is null
     AND   ail.po_line_id is null
     AND   ail.po_line_location_id is null
     AND   ail.po_distribution_id is null
     AND   ail.rcv_transaction_id is null
     AND   ail.corrected_inv_id  is null
     AND   ail.corrected_line_number is null
     UNION
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            null,
            null,
            ail.line_type_lookup_code,
            ail.po_line_location_id,
            ail.rcv_transaction_id,
            ail.match_type,
            aid.dist_match_type,
            ail.line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            ''NULL VALUED''
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = ail.invoice_id
     AND   ail.invoice_id = aid.invoice_id
     AND   aid.invoice_line_number = ail.line_number
     AND   aid.line_type_lookup_code IN (''ITEM'', ''FREIGHT'',
             ''MISCELLANEOUS'')
     AND   aid.po_distribution_id is null
     AND   aid.rcv_transaction_id is null
     AND   aid.dist_match_type is null
     AND   ail.line_source IN (''MANUAL LINE ENTRY'', ''IMPORTED'')
     AND   ail.po_header_id is null
     AND   ail.po_line_id is null
     AND   ail.po_line_location_id is null'
  );


  add_signature(g_signatures,
    303,
    'INVOICE',
    '',
    '18847390',
    '1919121.1',
    'ap_trans_flg_ipv_rev_sel.sql',
    'The transfer invoice price variance program does not pick up reveral IPV distributions created during cancel or discard.',
    'Follow the instructions provided in [1919121.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT aid.invoice_id,
            ai.invoice_num,
            aid.org_id,
            ai.invoice_date,
            aid.invoice_distribution_id,
            aid.parent_reversal_id,
            aid.po_distribution_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.po_distribution_id is not null
     AND   aid.parent_reversal_id is not null
     AND   aid.line_type_lookup_code in (''ITEM'',''ACCRUAL'',''IPV'')
     AND   aid.inventory_transfer_status is NULL
     AND   NOT EXISTS (
             SELECT 1
             FROM cst_ap_variance_headers cavh,
                  cst_ap_variance_lines cavl
             WHERE cavh.variance_header_id = cavl.variance_header_id
             AND   cavh.po_distribution_id = cavl.po_distribution_id
             AND   cavh.organization_id = cavl.organization_id
             AND   cavl.invoice_id = aid.invoice_id
             AND   cavl.invoice_distribution_id = aid.invoice_distribution_id
             AND   cavl.po_distribution_id = aid.po_distribution_id)'
  );


  add_signature(g_signatures,
    347,
    'INVOICE',
    '',
    '22733893',
    '2157175.1',
    'ap_wrong_gen_dists_sel.sql',
    'Discarded or cancelled invoice lines have the generate_dists flag = Y causing errors when trying to view distributions.',
    'Apply the GDF patch following the instructions provided in [2157175.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Discard'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ail.line_number,
            ail.generate_dists,
            ail.discarded_flag,
            ail.cancelled_flag,
            ail.amount
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = invs.invoice_id
     AND   ail.invoice_id = ai.invoice_id
     AND   (ail.discarded_flag = ''Y'' OR
            ail.cancelled_flag = ''Y'')
     AND   ail.generate_dists = ''Y''
     AND   ail.amount = 0
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ail.invoice_id
             AND   aid.invoice_line_number = ail.line_number)
     AND   ail.amount = (
             SELECT sum(aid.amount) FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ail.invoice_id
             AND   aid.invoice_line_number = ail.line_number)'
  );


  add_signature(g_signatures,
    350,
    'INVOICE',
    '',
    '20312812',
    '2001007.1',
    'ap_pay_awt_nul_mthd_dist_sel.sql',
    'Payment Withholding Tax Group(pay_awt_group_id) is populated on the invoice header but not on matched distributions for the invoice causing AWT not to calculate properly.',
    'Follow the instructions provided in [2001007.1]',
    'Y',
    'N',
    impact_area_tbl('Automatic Witholding Tax'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.amount,
            ''Paid'' payment_status
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_system_parameters_all asp
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.historical_flag is null
     AND   ai.org_id = asp.org_id
     AND   asp.allow_awt_flag = ''Y''
     AND   asp.create_awt_dists_type = ''PAYMENT''
     AND   ai.invoice_id = aid.invoice_id
     AND   ai.pay_awt_group_id is not null
     AND   ai.awt_flag is null
     AND   aid.pay_awt_group_id is null
     AND   aid.po_distribution_id is not null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip
             WHERE aip.invoice_id = ai.invoice_id
             AND   aip.reversal_inv_pmt_id is null
             AND   nvl(aip.reversal_flag,''N'') = ''N'')
     AND   NOT EXISTS (
             SELECT ''manual AWT lines''
             FROM ap_invoice_distributions_all aid2
             WHERE aid2.invoice_id = ai.invoice_id
             AND   aid2.line_type_lookup_code = ''AWT''
             AND   aid2.awt_flag IN (''M'', ''O''))
     UNION ALL
     SELECT aid.invoice_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.amount,
            ''Voided'' payment_status
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_system_parameters_all asp
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.historical_flag is null
     AND   ai.org_id = asp.org_id
     AND   asp.allow_awt_flag = ''Y''
     AND   asp.create_awt_dists_type = ''PAYMENT''
     AND   ai.invoice_id = aid.invoice_id
     AND   ai.pay_awt_group_id is not null
     AND   ai.awt_flag is null
     AND   aid.pay_awt_group_id is null
     AND   aid.po_distribution_id is not null
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip
             WHERE aip.invoice_id = ai.invoice_id
             AND   aip.reversal_inv_pmt_id is null
             AND   nvl(aip.reversal_flag,''N'') = ''N'')
     AND   NOT EXISTS (
             SELECT ''manual awt lines exist'' FROM ap_invoice_distributions_all aid2
             WHERE aid2.invoice_id = ai.invoice_id
             AND   aid2.line_type_lookup_code = ''AWT''
             AND   aid2.awt_flag IN (''M'', ''O''))'
  );


  add_signature(g_signatures,
    359,
    'INVOICE',
    '',
    '17571683',
    '1377248.1',
    'ap_xla_supmg_sel.sql Invoice',
    'Accounting transactions which have not been merged to the destination supplier after Supplier/Site merge',
    'Apply the GDF patch following the instructions provided in [1377248.1]',
    'Y',
    'N',
    impact_area_tbl('Trial Balance'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     ),
     ap_ledger_options AS (
       SELECT ai.set_of_books_id,
              nvl(xlo.merge_acct_option_code,''NONE'') merge_acct_option_code,
              adv.org_id,
              adv.vendor_id to_vendor_id,
              adv.vendor_site_id to_vendor_site_id,
              adv.duplicate_vendor_id from_vendor_id,
              adv.duplicate_vendor_site_id from_vendor_site_id,
              adv.process,
              adv.paid_invoices_flag
       FROM invs,
            ap_duplicate_vendors_all adv,
            ap_invoices_all ai,
            xla_ledger_options xlo
       WHERE ai.invoice_id = invs.invoice_id
       AND   ai.set_of_books_id = xlo.ledger_id
       AND   xlo.application_id = 200
       AND   xlo.merge_acct_option_code IN (''CHANGE'',''TRANSFER'')
       AND   ai.vendor_id = adv.vendor_id
       AND   nvl(adv.vendor_site_id,ai.vendor_site_id) = ai.vendor_site_id
       AND   adv.process_flag = ''Y''
       AND   adv.process <> ''P'')
     SELECT alo.to_vendor_id,
            nvl(alo.to_vendor_site_id,ai.vendor_site_id) to_vendor_site_id,
            alo.org_id,
            ai.invoice_id source_id_int_1,
            alo.from_vendor_id,
            alo.from_vendor_site_id,
            ai.invoice_num source_number,
            ''AP_INVOICES'' entity_code,
            ai.set_of_books_id ledger_id
     FROM invs,
          ap_invoices_all ai,
          ap_ledger_options alo
      WHERE ai.invoice_id = invs.invoice_id
      AND   ai.set_of_books_id = alo.set_of_books_id
      AND   ai.vendor_id = alo.to_vendor_id
      AND   ai.vendor_site_id = nvl(alo.to_vendor_site_id,ai.vendor_site_id)
      AND   alo.merge_acct_option_code = ''TRANSFER''
      AND   NOT EXISTS (
              SELECT ''No Merge Entry in xla for this vendor site''
              FROM xla_transaction_entities_upg xte,
                   xla_events xe
              WHERE xte.application_id = 200
              AND   xte.ledger_id = alo.set_of_books_id
              AND   xte.entity_code = ''THIRD_PARTY_MERGE''
              AND   xe.entity_id = xte.entity_id
              AND   xe.application_id = 200
              AND   xe.event_type_code  IN (''FULL_MERGE'',''PARTIAL_MERGE'')
              AND   xe.reference_num_1 = alo.from_vendor_id
              AND   xe.reference_num_2 = alo.from_vendor_site_id
              AND   xe.reference_num_3 = alo.to_vendor_id
              AND   xe.reference_num_4 = nvl(alo.to_vendor_site_id,xe.reference_num_4))
     AND   EXISTS (
             SELECT ''Need to merger invoice''
             FROM xla_ae_lines xel,
                  xla_ae_headers xeh,
                  xla_transaction_entities_upg xte
             WHERE xte.application_id = 200
             AND   xel.application_id = xeh.application_id
             AND   xeh.accounting_entry_status_code = ''F''
             AND   xte.application_id = xeh.application_id
             AND   xel.ae_header_id = xeh.ae_header_id
             AND   xte.entity_code = ''AP_INVOICES''
             AND   xte.ledger_id = ai.set_of_books_id
             AND   nvl(xte.source_id_int_1,(-99)) = ai.invoice_id
             AND   xte.entity_id = xeh.entity_id
             AND   xel.party_id = alo.from_vendor_id
             AND   xel.party_site_id = alo.from_vendor_site_id)
     UNION ALL
     SELECT alo.to_vendor_id,
            nvl(alo.to_vendor_site_id,ai.vendor_site_id) to_vendor_site_id,
            alo.org_id,
            ai.invoice_id source_id_int_1,
            alo.from_vendor_id,
            alo.from_vendor_site_id,
            ai.invoice_num source_number,
            ''AP_INVOICES'' entity_code,
            ai.set_of_books_id ledger_id
     FROM invs,
          ap_invoices_all ai,
          ap_ledger_options alo
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.set_of_books_id = alo.set_of_books_id
     AND   ai.vendor_id = alo.to_vendor_id
     AND   ai.vendor_site_id = nvl(alo.to_vendor_site_id,ai.vendor_site_id)
     AND   alo.merge_acct_option_code = ''CHANGE''
     AND   EXISTS (
             SELECT ''Need to merger invoice''
             FROM xla_ae_lines xel,
                  xla_ae_headers xeh,
                  xla_transaction_entities_upg xte
             WHERE xte.application_id = 200
             AND   xel.application_id = xeh.application_id
             AND   xeh.accounting_entry_status_code = ''F''
             AND   xte.application_id = xeh.application_id
             AND   xel.ae_header_id = xeh.ae_header_id
             AND   xte.entity_code = ''AP_INVOICES''
             AND   xte.ledger_id = ai.set_of_books_id
             AND   nvl(xte.source_id_int_1,(-99)) = ai.invoice_id
             AND   xte.entity_id = xeh.entity_id
             AND   xel.party_id = alo.from_vendor_id
             AND   xel.party_site_id = alo.from_vendor_site_id)'
  );


  add_signature(g_signatures,
    372,
    'INVOICE',
    '',
    '19643319',
    '1968118.1',
    'ap_upd_rel_retainage_id_sel.sql',
    'Cancelled/discarded invoices do not have related_retainage_dist_id stamped on reversed distributions.',
    'Follow the instructions provided in [1968118.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'SELECT ai.invoice_num,
            aid1.invoice_id,
            aid1.invoice_line_number,
            aid1.line_type_lookup_code,
            aid1.related_retainage_dist_id,
            aid1.invoice_distribution_id,
            aid1.parent_reversal_id,
            aid2.related_retainage_dist_id rev_retainage_dist_id,
            aid2.invoice_distribution_id rev_invoice_dist_id,
            aid2.parent_reversal_id rev_parent_rev_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid1,
          ap_invoice_distributions_all aid2
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = ail.invoice_id
     AND   ail.invoice_id = aid1.invoice_id
     AND   ail.line_number= aid1.invoice_line_number
     AND   ai.invoice_type_lookup_code <> ''RETAINAGE RELEASE''
     AND   aid1.invoice_distribution_id = aid2.parent_reversal_id
     AND   aid1.invoice_id = aid2.invoice_id
     AND   aid1.invoice_line_number = aid2.invoice_line_number
     AND   aid1.parent_reversal_id is null
     AND   ai.historical_flag is null
     AND   (ail.discarded_flag=''Y'' OR ail.cancelled_flag=''Y'')
     AND   aid1.line_type_lookup_code = ''RETAINAGE''
     AND   aid1.related_retainage_dist_id is not null
     AND   aid2.related_retainage_dist_id is null'
  );


  add_signature(g_signatures,
    376,
    'INVOICE',
    '',
    '22070497',
    '1922786.1',
    'ap_set_assetstrack_flg_sel.sql',
    'Invoice distributions on which the asset_tracking_flag has been incorrectly unchecked when the GL Date is changed on the invoice header.  This results in the Mass Additions process not selecting these transactions.',
    'Follow the instructions provided in [1922786.1]',
    'Y',
    'N',
    impact_area_tbl('Mass Additions'),
    'SELECT /*+ leading(invs) */
            aid.invoice_id,
            aid.invoice_line_number inv_line_number,
            aid.distribution_line_number inv_dist_line_number,
            aid.line_type_lookup_code line_type,
            aid.amount,
            pd.accrue_on_receipt_flag,
            pd.code_combination_id po_code_combination_id,
            gcc_po.account_type po_acc_type,
            aid.dist_code_combination_id aid_code_combination_id,
            gcc_inv.account_type inv_acc_type,
            ail.assets_tracking_flag line_assets_track_flag,
            aid.assets_tracking_flag dist_assets_track_flag,
            aid.assets_addition_flag dist_assets_addition_flag,
            aid.invoice_distribution_id inv_dist_id,
            decode (pd.accrue_on_receipt_flag,
              ''Y'', (decode(gcc_po.account_type,
                      ''E'',nvl(ail.assets_tracking_flag,''N''),
                      ''A'',''Y'',
                      ''N'')),
              ''N'', (decode(gcc_inv.account_type,
                      ''E'',nvl(ail.assets_tracking_flag,''N''),
                      ''A'',''Y'',
                      ''N'')),
              ''N'') derived_assets_tracking_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid,
          ap_invoice_lines_all ail,
          po_distributions_all pd,
          gl_code_combinations gcc_po,
          gl_code_combinations gcc_inv
     WHERE aid.invoice_id = invs.invoice_id
     AND   pd.po_distribution_id = aid.po_distribution_id
     AND   ail.invoice_id  = aid.invoice_id
     AND   ail.line_number = aid.invoice_line_number
     AND   gcc_po.code_combination_id = pd.code_combination_id
     AND   gcc_inv.code_combination_id= aid.dist_code_combination_id
     AND   aid.assets_tracking_flag = ''N''
     AND   aid.line_type_lookup_code NOT IN (''NONREC_TAX'',
             ''REC_TAX'',''TRV'',''TIPV'',''TERV'')
     AND   ((pd.accrue_on_receipt_flag = ''Y'' AND
             gcc_po.account_type IN (''A'',''E'')) OR
            (pd.accrue_on_receipt_flag = ''N'' AND
             gcc_inv.account_type IN(''A'',''E'')))
     AND   ((nvl(aid.assets_tracking_flag,''X'') <>
               decode(pd.accrue_on_receipt_flag,
                 ''Y'', (decode(gcc_po.account_type,
                        ''E'',nvl(ail.assets_tracking_flag,''N''),
                        ''A'',''Y'',
                        ''N'')),
                 ''N'', (decode(gcc_inv.account_type,
                        ''E'',nvl(ail.assets_tracking_flag,''N''),
                        ''A'',''Y'',
                        ''N'')),
                 ''N'')) OR
            (aid.assets_tracking_flag = ''Y'' AND
             aid.assets_addition_flag <> ''U''))'
  );


  add_signature(g_signatures,
    381,
    'INVOICE',
    '',
    '18950901',
    '2000981.1',
    'ap_acc_dt_tmstmp_trnc_sel.sql',
    'Date columns in various invoice related tables contain timestamps which can cause inability to validate invoices or discard invoice lines as well as FRM-40654 errors when locking records in the forms.',
    'Follow the instructions provided in [2000981.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Approval', 'Invoice Discard'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.gl_date,
            ai.org_id,
            null line_number,
            null expenditure_item_date,
            null start_expense_date,
            null end_expense_date,
            null accounting_date,
            null program_update_date,
            1 type
     FROM invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   ((ai.gl_date <> trunc(ai.gl_date) AND
             ai.gl_date is not null) OR
            (ai.invoice_date <> trunc(ai.invoice_date) AND
             ai.invoice_date is not null))
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.gl_date,
            ai.org_id,
            ail.line_number,
            ail.expenditure_item_date,
            ail.start_expense_date,
            ail.end_expense_date,
            ail.accounting_date,
            ail.program_update_date,
            2 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = invs.invoice_id
     AND   ail.invoice_id = ai.invoice_id
     AND   ((ail.expenditure_item_date <> trunc(ail.expenditure_item_date) AND
             ail.expenditure_item_date is not null) OR
            (ail.start_expense_date <> trunc(ail.start_expense_date) AND
             ail.start_expense_date is not null) OR
            (ail.end_expense_date <> trunc(ail.end_expense_date) AND
             ail.end_expense_date is not null) OR
            (ail.accounting_date <> trunc(ail.accounting_date) AND
             ail.accounting_date is not null) OR
            (ail.program_update_date <> trunc(ail.program_update_date) AND
             ail.program_update_date  is not null))'
  );


  add_signature(g_signatures,
    394,
    'INVOICE',
    '',
    '19903129',
    '1937924.1',
    'ap_ppr_partial_commit_issue_sel.sql',
    'Data is partially committed due to an exception, but data in AP is rolled back causing an inconsistence that prevents the PPR from being processed',
    'Apply the GDF patch following the instructions provided in [1937924.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Data', 'Payment Selection'),
    'SELECT DISTINCT
            pi.payment_instruction_id,
            pi.process_type,
            pi.payment_instruction_status,
            pi.payments_complete_code,
            pi.payment_count,
            pi.transmit_instr_immed_flag,
            pi.pay_admin_assigned_ref_code,
            pi.transmission_date,
            pi.org_id,
            pi.payment_date,
            pi.payment_document_id,
            p.completed_pmts_group_id,
            p.payment_process_request_name
     FROM (
            ##$$IVIEW$$##
          ) invs,
          iby_pay_instructions_all pi,
          iby_payments_all p,
          iby_docs_payable_all docs,
          ap_selected_invoices_all asi,
          ap_payment_schedules_all aps
     WHERE p.process_type = ''STANDARD''
     AND   p.payment_function = ''PAYABLES_DISB''
     AND   p.payments_complete_flag = ''Y''
     AND   pi.payment_instruction_id = p.payment_instruction_id
     AND   p.payment_status not in (''VOID'')
     AND   p.completed_pmts_group_id is not null
     AND   p.payment_id= docs.payment_id
     AND   docs.calling_app_id = 200
     AND   asi.invoice_id = invs.invoice_id
     AND   asi.checkrun_id = docs.calling_app_doc_unique_ref1
     AND   docs.calling_app_doc_unique_ref2 = invs.invoice_id
     AND   aps.checkrun_id = docs.calling_app_doc_unique_ref1
     AND   docs.calling_app_doc_unique_ref3 = 1
     AND   aps.invoice_id= asi.invoice_id
     AND   aps.payment_status_flag <> ''Y''
     AND   docs.payment_date >= p.payment_date
     AND   docs.completed_pmts_group_id is not null
     AND   NOT EXISTS (
             SELECT 1
             FROM AP_Checks_All c,
                  IBY_Payments_All p2
             WHERE c.payment_id = p2.payment_id
             AND   p2.payment_instruction_id = pi.payment_instruction_id)'
  );


  add_signature(g_signatures,
    408,
    'INVOICE',
    '',
    '20344709',
    '1966076.1',
    'ap_upg_sel.sql Part 1',
    'Consolidated fixes for non-modified upgraded invoices. See note 1966076.1 for the full list.',
    'Apply the GDF patch following the instructions provided in [1966076.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Data'),
    'WITH invs AS (
      SELECT /*+ materialize */ invoice_id
      FROM (
             ##$$IVIEW$$##
           ) ai
     WHERE NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid_sub
             WHERE aid_sub.invoice_id = ai.invoice_id
             AND   nvl(aid_sub.historical_flag,''N'') = ''N''
             UNION ALL
             SELECT 1
             FROM ap_invoice_distributions_all aid_sub,
                  xla_events xe_sub,
                  ap_accounting_events_all aae_sub
             WHERE aid_sub.accounting_event_id = xe_sub.event_id
             AND   xe_sub.event_id = aae_sub.accounting_event_id
             AND   xe_sub.upg_batch_id = -9999
             AND   aid_sub.invoice_id = ai.invoice_id
             UNION ALL
             SELECT 1
             FROM ap_invoice_payments_all aip_sub,
                  ap_payment_history_all aph_sub,
                  xla_events xe_sub,
                  ap_accounting_events_all aae_sub
             WHERE aip_sub.invoice_id = ai.invoice_id
             AND   aip_sub.check_id = aph_sub.check_id
             AND   aph_sub.accounting_event_id = xe_sub.event_id
             AND   xe_sub.application_id = 200
             AND   xe_sub.event_id = aae_sub.accounting_event_id
             AND   xe_sub.upg_batch_id = -9999
             UNION ALL
             SELECT 1
             FROM ap_invoice_distributions_all aid_sub,
                  xla_events xe_sub,
                  xla_ae_headers xah_sub
             WHERE aid_sub.invoice_id = ai.invoice_id
             AND   aid_sub.accounting_event_id = xe_sub.event_id
             AND   xe_sub.application_id = 200
             AND   xe_sub.event_id = xah_sub.event_id
             AND   xah_sub.application_id = 200
             AND   xah_sub.upg_batch_id  is null
             UNION ALL
             SELECT 1
             FROM ap_invoice_payments_all aip_sub,
                  ap_payment_history_all aph_sub,
                  xla_events xe_sub,
                  xla_ae_headers xah_sub
             WHERE aip_sub.invoice_id = ai.invoice_id
             AND   aip_sub.check_id = aph_sub.check_id
             AND   aph_sub.accounting_event_id = xe_sub.event_id
             AND   xe_sub.application_id = 200
             AND   xe_sub.event_id = xah_sub.event_id
             AND   xah_sub.application_id = 200
             AND   xah_sub.upg_batch_id  is null)
     )
     SELECT /*+ ordered use_nl(ai, aid_org, aid_rev)  */
            aid_rev.invoice_id invoice_id,
            aid_rev.invoice_line_number,
            aid_org.invoice_distribution_id parent_dist_id,
            aid_org.line_type_lookup_code,
            aid_org.amount,
            aid_rev.invoice_distribution_id reversal_dist_id,
            1.1 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid_org,
          ap_invoice_dists_arch aid_rev
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid_org.invoice_id
     AND   aid_rev.invoice_id = aid_org.invoice_id
     AND   aid_rev.parent_reversal_id = aid_org.invoice_distribution_id
     AND   aid_rev.amount <> (-1)*aid_org.amount
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid_org, aid_rev) */
            aid_rev.invoice_id,
            aid_rev.invoice_line_number,
            aid_org.invoice_distribution_id,
             aid_org.line_type_lookup_code,
            aid_org.amount,
            aid_rev.invoice_distribution_id,
            1.2 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid_org,
          ap_invoice_dists_arch aid_rev
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid_org.invoice_id
     AND   aid_rev.invoice_id = aid_org.invoice_id
     AND   aid_rev.parent_reversal_id = aid_org.invoice_distribution_id
     AND   aid_rev.line_type_lookup_code <> aid_org.line_type_lookup_code
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid1) */
            aid1.invoice_id,
            aid1.invoice_line_number,
            aid1.parent_reversal_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            NULL reversal_dist_id,
            1.3 type
     FROM invs,
          ap_invoices_all  ai,
          ap_invoice_dists_arch aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid1.invoice_id = ai.invoice_id
     AND   aid1.parent_reversal_id is not null
     GROUP BY aid1.invoice_id, aid1.invoice_line_number, aid1.parent_reversal_id,
              aid1.line_type_lookup_code, aid1.amount
     HAVING   count(aid1.parent_reversal_id) > 1
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid_org, aid_rev)  */
            aid_rev.invoice_id,
            aid_rev.invoice_line_number,
            aid_rev.parent_reversal_id,
            aid_rev.line_type_lookup_code,
            aid_rev.amount,
            aid_rev.invoice_distribution_id,
            1.4 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid_org,
          ap_invoice_dists_arch aid_rev
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid_org.invoice_id
     AND   aid_rev.invoice_id = aid_org.invoice_id
     AND   aid_rev.parent_reversal_id = aid_org.invoice_distribution_id
     AND   aid_org.parent_reversal_id IS not null
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_dists_arch arcx
             WHERE arcx.invoice_id = aid_org.invoice_id
             AND   arcx.invoice_distribution_id = aid_org.parent_reversal_id
             AND   arcx.parent_reversal_id is null)
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid1) */
            aid1.invoice_id parent_invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            aid1.parent_reversal_id,
            1.5 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid1.invoice_id
     AND   aid1.parent_reversal_id is not null
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_dists_arch aid2
             WHERE aid2.invoice_id = aid1.invoice_id
             AND   aid2.invoice_distribution_id = aid1.parent_reversal_id)
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid1) */
            aid1.invoice_id parent_invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            aid1.parent_reversal_id,
            1.6 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid1.invoice_id
     AND   aid1.reversal_flag = ''Y''
     AND   aid1.parent_reversal_id is null
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_dists_arch aid2
             WHERE aid2.parent_reversal_id is not null
             AND     aid2.invoice_id = aid1.invoice_id
             AND   aid2.parent_reversal_id = aid1.invoice_distribution_id)
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid1) */
            aid1.invoice_id parent_invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            aid1.parent_reversal_id,
            1.7 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid1.invoice_id
     AND   aid1.parent_reversal_id is not null
     AND   nvl(aid1.reversal_flag,''N'') = ''N''
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid1, aid2) */
            aid1.invoice_id parent_invoice_id,
            aid1.invoice_line_number,
            aid2.invoice_distribution_id,
            aid2.line_type_lookup_code,
            aid2.amount,
            aid1.invoice_distribution_id,
            1.8 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1,
          ap_invoice_dists_arch aid2
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid1.invoice_id
     AND   aid1.parent_reversal_id is not null
     AND   aid1.invoice_id = aid2.invoice_id
     AND   aid1.line_type_lookup_code = aid2.line_type_lookup_code
     AND   aid1.parent_reversal_id = aid2.invoice_distribution_id
     AND   aid2.parent_reversal_id is null
     AND   nvl(aid2.reversal_flag,''N'') = ''N''
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid_org, aid_rev) */
            ai.invoice_id parent_invoice_id,
            aid_org.invoice_line_number,
            aid_org.parent_reversal_id,
            aid_org.line_type_lookup_code,
            aid_org.amount,
            aid_org.invoice_distribution_id,
            1.9 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid_org,
          ap_invoice_dists_arch aid_rev
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid_org.invoice_id
     AND   aid_rev.invoice_id = aid_org.invoice_id
     AND   aid_rev.parent_reversal_id = aid_org.invoice_distribution_id
     AND   aid_org.parent_reversal_id is not null
     AND   aid_rev.invoice_distribution_id = aid_org.parent_reversal_id
     AND   aid_rev.invoice_distribution_id < aid_org.invoice_distribution_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid1) */
            aid1.invoice_id parent_invoice_id,
            aid1.invoice_line_number,
            aid1.parent_reversal_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            aid1.invoice_distribution_id,
            1.10 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid1.invoice_id
     AND   reversal_flag IN (''U'', ''R'')'
  );


  add_signature(g_signatures,
    409,
    'INVOICE',
    '',
    '20344709',
    '1966076.1',
    'ap_upg_sel.sql Part 2',
    'Consolidated fixes for non-modified upgraded invoices. See note 1966076.1 for the full list.',
    'Apply the GDF patch following the instructions provided in [1966076.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Data'),
    'WITH invs AS (
       SELECT /*+ materialize */ invoice_id
       FROM (
              ##$$IVIEW$$##
            ) ai
       WHERE NOT EXISTS (
               SELECT 1 FROM ap_invoice_distributions_all aid_sub
               WHERE aid_sub.invoice_id = ai.invoice_id
               AND   nvl(aid_sub.historical_flag,''N'') = ''N''
               UNION ALL
               SELECT 1
               FROM ap_invoice_distributions_all aid_sub,
                    xla_events xe_sub,
                    ap_accounting_events_all aae_sub
               WHERE aid_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.event_id = aae_sub.accounting_event_id
               AND   xe_sub.upg_batch_id = -9999
               AND   aid_sub.invoice_id = ai.invoice_id
               UNION ALL
               SELECT 1
               FROM ap_invoice_payments_all aip_sub,
                    ap_payment_history_all aph_sub,
                    xla_events xe_sub,
                    ap_accounting_events_all aae_sub
               WHERE  aip_sub.invoice_id = ai.invoice_id
               AND   aip_sub.check_id = aph_sub.check_id
               AND   aph_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.application_id = 200
               AND   xe_sub.event_id = aae_sub.accounting_event_id
               AND   xe_sub.upg_batch_id = -9999
               UNION ALL
               SELECT 1
               FROM ap_invoice_distributions_all aid_sub,
                    xla_events xe_sub,
                    xla_ae_headers xah_sub
               WHERE aid_sub.invoice_id = ai.invoice_id
               AND   aid_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.application_id = 200
               AND   xe_sub.event_id = xah_sub.event_id
               AND   xah_sub.application_id = 200
               AND   xah_sub.upg_batch_id  is null
               UNION ALL
               SELECT 1
               FROM ap_invoice_payments_all aip_sub,
                    ap_payment_history_all aph_sub,
                    xla_events xe_sub,
                    xla_ae_headers xah_sub
               WHERE aip_sub.invoice_id = ai.invoice_id
               AND   aip_sub.check_id = aph_sub.check_id
               AND   aph_sub.accounting_event_id = xe_sub.event_id
               AND   xe_sub.application_id = 200
               AND   xe_sub.event_id = xah_sub.event_id
               AND   xah_sub.application_id = 200
               AND   xah_sub.upg_batch_id  is null)
     )
     SELECT /*+ ordered use_nl(ai, aid1, aid2, aca) */
            aid1.invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            2.1 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1,
          ap_invoice_dists_arch aid2,
          ap_chrg_allocations_all aca
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid1.invoice_id = aid2.invoice_id
     AND   aid1.invoice_distribution_id = aca.item_dist_id
     AND   aid2.invoice_distribution_id = aca.charge_dist_id
     AND   aid1.line_type_lookup_code = aid2.line_type_lookup_code
     AND   ai.invoice_id = aid1.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid1, aca) */
            aid1.invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            2.2 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid1,
          ap_chrg_allocations_all aca
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid1.invoice_distribution_id = aca.charge_dist_id
     AND   aid1.line_type_lookup_code = ''ITEM''
     AND   ai.invoice_id = aid1.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid1, aid2, aca) */
            aid1.invoice_id,
            aid1.invoice_line_number,
            aid1.invoice_distribution_id,
            aid1.line_type_lookup_code,
            aid1.amount,
            2.3 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid2,
          ap_invoice_dists_arch aid1,
          ap_chrg_allocations_all aca
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid1.invoice_id = aid2.invoice_id
     AND   aid1.invoice_distribution_id = aca.item_dist_id
     AND   aid2.invoice_distribution_id = aca.charge_dist_id
     AND   aid2.line_type_lookup_code  IN (''FREIGHT'',''MISCELLANEOUS'')
     AND   aid1.line_type_lookup_code = ''TAX''
     AND   ai.invoice_id = aid2.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid, acax) */
            aid.invoice_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            2.4 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid,
          ap_chrg_allocations_all acax
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.prepay_tax_parent_id is not null
     AND   aid.line_type_lookup_code = ''TAX''
     AND   aid.invoice_distribution_id = acax.charge_dist_id
     AND   aid.prepay_tax_parent_id <> acax.item_dist_id
     AND   ai.invoice_id = aid.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid, acax, aid_i) */
            aid.invoice_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            2.5 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid,
          ap_chrg_allocations_all acax,
          ap_invoice_dists_arch aid_i
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.prepay_tax_parent_id is null
     AND   aid.line_type_lookup_code = ''TAX''
     AND   aid.invoice_distribution_id = acax.charge_dist_id
     AND   acax.item_dist_id = aid_i.invoice_distribution_id
     AND   aid_i.line_type_lookup_code = ''PREPAY''
     AND   ai.invoice_id = aid.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid) */
            aid.invoice_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            2.6 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.line_type_lookup_code = ''TAX''
     AND   aid.amount <> (
             SELECT /*+ no_unnest */
                   sum(acax.allocated_amount) FROM ap_chrg_allocations_all acax
             WHERE acax.charge_dist_id = aid.invoice_distribution_id)
     AND   ai.invoice_id = aid.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, ada) */
            ada.invoice_id,
            ada.invoice_line_number,
            ada.invoice_distribution_id,
            ada.line_type_lookup_code,
            ada.amount,
            2.7 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch ada
     WHERE ai.invoice_id = invs.invoice_id
     AND   ada.line_type_lookup_code = ''TAX''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_dists_arch aidi
             WHERE aidi.invoice_id = ada.invoice_id
             AND   aidi.line_type_lookup_code NOT IN (''AWT'', ''TAX'')
             AND   ada.tax_code_id = aidi.tax_code_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_chrg_allocations_all aca
             WHERE aca.charge_dist_id = ada.invoice_distribution_id)
     AND   ai.invoice_id = ada.invoice_id
     UNION ALL
     SELECT /*+ ordered use_nl(ai, arc) */
            arc.invoice_id,
            arc.distribution_line_number,
            arc.invoice_distribution_id,
            arc.line_type_lookup_code,
            arc.amount,
            3 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_dists_arch arc
     WHERE ai.invoice_id = invs.invoice_id
     AND   arc.invoice_id = ai.invoice_id
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = arc.invoice_id
             AND   aid.old_distribution_id = arc.invoice_distribution_id)
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid_tax, aid_prepay) */
            aid_tax.invoice_id,
            aid_tax.invoice_line_number,
            aid_tax.invoice_distribution_id,
            aid_tax.line_type_lookup_code,
            aid_tax.amount,
            4 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid_tax,
          ap_invoice_distributions_all aid_prepay
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid_tax.charge_applicable_to_dist_id = aid_prepay.invoice_distribution_id
     AND   aid_tax.invoice_id = aid_prepay.invoice_id
     AND   ai.invoice_id = aid_tax.invoice_id
     AND   ai.historical_flag = ''Y''
     AND   aid_tax.prepay_distribution_id is null
     AND   aid_prepay.line_type_lookup_code = ''PREPAY''
     AND   aid_tax.line_type_lookup_code IN (''REC_TAX'', ''NONREC_TAX'')
     AND   aid_tax.prepay_tax_parent_id is not null
     AND   aid_tax.historical_flag = ''Y''
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid) */
            aid.invoice_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            5 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.historical_flag = ''Y''
     AND   ai.historical_flag = ''Y''
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_related_id is null
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aidx
             WHERE aidx.invoice_id = aid.invoice_id
             AND   aidx.line_type_lookup_code not IN (''AWT'',''ERV'',''TERV'')
             AND   aidx.prepay_distribution_id is null
             AND   abs(aidx.amount) >= abs(aid.amount))
     UNION ALL
     SELECT /*+ ordered use_nl(ai, ail) */
            ail.invoice_id,
            ail.line_number,
            null invoice_distribution_id,
            ail.line_type_lookup_code,
            ail.amount,
            6 type
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = ail.invoice_id
     AND   nvl(ail.historical_flag, ''N'') = ''Y''
     AND   ail.line_type_lookup_code not IN (''TAX'', ''AWT'', ''PREPAY'')
     AND   ail.corrected_inv_id is not null
     AND   ail.corrected_line_number is null
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_invoice_distributions_all aid,
                  ap_invoice_dists_arch arc
             WHERE aid.invoice_id = ail.invoice_id
             AND   aid.invoice_line_number = ail.line_number
             AND   aid.invoice_id = arc.invoice_id
             AND   arc.invoice_distribution_id = aid.old_distribution_id
             AND   arc.price_correct_inv_id is not null)'
  );


  add_signature(g_signatures,
    433,
    'INVOICE',
    '',
    '21832708',
    '2100488.1',
    'ap_uncancel_inv_sel.sql',
    'Cancelled R12 invoices with non-zero amount, missing reversal or parent distributions, or missing accounting event ID.',
    'Apply the GDF patch following the instructions provided in [2100488.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Cancellation'),
    'WITH invs as (
       ##$$MIVIEW$$##
     )
     SELECT ai.invoice_id,
            ai.invoice_amount,
            1 type
     FROM invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(historical_flag, ''N'') = ''N''
     AND   cancelled_date is not null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_lines_all ail
             WHERE ail.invoice_id = ai.invoice_id
             AND   ail.amount <> 0)
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_amount,
             2.1
     FROM invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(historical_flag, ''N'') = ''N''
     AND   cancelled_date is not null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.parent_reversal_id is null
             AND   NOT EXISTS (
                     SELECT 1 FROM ap_invoice_distributions_all aid_rev
                     WHERE aid_rev.invoice_id = ai.invoice_id
                     AND   aid_rev.parent_reversal_id = aid.invoice_dIStribution_id))
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_amount,
            2.2
     FROM invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(historical_flag, ''N'') = ''N''
     AND   cancelled_date IS NOT NULL
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.parent_reversal_id IS NOT NULL
             AND   NOT EXISTS (
                     SELECT 1 FROM ap_invoice_distributions_all aid_par
                     WHERE aid_par.invoice_id = ai.invoice_id
                     AND   aid_par.invoice_distribution_id = aid.parent_reversal_id))
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_amount,
            3
     FROM invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(historical_flag, ''N'') = ''N''
     AND   cancelled_date IS NOT NULL
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.accounting_event_id is null)'
  );


  add_signature(g_signatures,
    75,
    'INVOICE',
    'ACCOUNTING',
    '21916712',
    '972261.1',
    'ap_trx_missing_event_sel.sql',
    'Approved Invoice distributions missing Accounting_Event_ID',
    'Apply the GDF patch following the instructions provided in [972261.1]',
    'Y',
    'N',
    impact_area_tbl('Period Close'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            aid.invoice_distribution_id,
            aid.cancellation_flag,
            aid.prepay_distribution_id,
            aid.parent_reversal_id,
            ai.invoice_date,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.historical_flag,
            aid.posted_flag,
            aid.prepay_tax_parent_id,
            aid.line_type_lookup_code,
            ap_invoices_utility_pkg.get_approval_status(
              ai.invoice_id,
              ai.invoice_amount,
              ai.payment_status_flag,
              ai.invoice_type_lookup_code) invoice_status,
            ''Invoice Distribution'' distribution_type,
            aid.accounting_event_id
     FROM invs,
          ap_invoices_all ai,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          ap_invoice_distributions_all aid,
          financials_system_params_all fsp
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   fsp.org_id = aid.org_id
     AND   ((fsp.purch_encumbrance_flag = ''Y'' AND
             aid.match_status_flag = ''A'') OR
            (fsp.purch_encumbrance_flag = ''N'' AND
             aid.match_status_flag IN (''A'',   ''T'')))
     AND   nvl(aid.posted_flag,   ''N'') <> ''Y''
     AND   aid.accounting_event_id is null
     AND NOT EXISTS (SELECT 1
                     FROM ap_holds_all ah, ap_hold_codes ahc
                     WHERE ah.invoice_id = ai.invoice_id
                     AND   ah.hold_lookup_code = ahc.hold_lookup_code
                     AND   ah.release_lookup_code IS NULL
                     AND   nvl(ahc.postable_flag,''N'') = ''N'')
     AND   aid.awt_invoice_payment_id is null
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_accounting_events_all aae,
                  ap_invoices_all ai2
             WHERE ai2.invoice_id = ai.invoice_id
             AND   ai2.historical_flag = ''Y''
             AND   aae.source_id = ai2.invoice_id
             AND   aae.source_table IN (''AP_INVOICES'', ''AP_INVOICES_ALL'')
  	   AND   NOT EXISTS (
                     SELECT 1 FROM ap_invoice_distributions_all aid2
  	           WHERE aid2.invoice_id = ai2.invoice_id
  	           AND   aid2.accounting_event_id = aae.accounting_event_id))
     AND   NOT (
            aid.historical_flag = ''Y'' AND
            aid.posted_flag = ''Y'' AND
            aid.line_type_lookup_code <> ''PREPAY'' AND
            aid.prepay_distribution_id is null AND
            aid.prepay_tax_parent_id is null AND
            EXISTS (
              SELECT 1 FROM ap_system_parameters_all asp
              WHERE asp.org_id = ai.org_id
              AND   asp.accounting_method_option = ''Cash''))
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            asad.invoice_distribution_id,
            asad.cancellation_flag cancellation_flag,
            asad.prepay_distribution_id prepay_distribution_id,
            asad.parent_reversal_id parent_reversal_id,
            ai.invoice_date,
            asu.vendor_name,
            assi.vendor_site_code,
            null,
            asad.posted_flag,
            null,
            asad.line_type_lookup_code,
            ap_invoices_utility_pkg.get_approval_status(
              ai.invoice_id, ai.invoice_amount, ai.payment_status_flag,
              ai.invoice_type_lookup_code) invoice_status,
            ''Self Assessed Tax Distribution'' distribution_type,
            asad.accounting_event_id
     FROM invs,
          ap_invoices_all ai,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          ap_self_assessed_tax_dist_all asad,
          financials_system_params_all fsp
     WHERE ai.invoice_id = invs.invoice_id
     AND   asad.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   fsp.org_id = asad.org_id
     AND   ((fsp.purch_encumbrance_flag = ''Y'' AND
             asad.match_status_flag = ''A'') OR
            (fsp.purch_encumbrance_flag = ''N'' AND
             asad.match_status_flag IN (''A'',   ''T'')))
     AND   nvl(asad.posted_flag,   ''N'') <> ''Y''
     AND   asad.accounting_event_id is null
     AND   asad.prepay_distribution_id is null
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_holds_all ah,
                  ap_hold_codes ahc
             WHERE ah.invoice_id = ai.invoice_id
             AND   ah.hold_lookup_code = ahc.hold_lookup_code
             AND   ah.release_lookup_code is null
             AND   nvl(ahc.postable_flag,''N'') = ''N'')
     AND asad.awt_invoice_payment_id is null
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_accounting_events_all aae,
                  ap_invoices_all ai2
             WHERE ai2.invoice_id = ai.invoice_id
             AND   ai2.historical_flag = ''Y''
             AND   aae.source_id = ai2.invoice_id
             AND   aae.source_table IN (''AP_INVOICES'', ''AP_INVOICES_ALL'')
  	   AND   NOT EXISTS (
                     SELECT 1 FROM ap_invoice_distributions_all aid2
  	           WHERE aid2.invoice_id = ai2.invoice_id
  	           AND   aid2.accounting_event_id = aae.accounting_event_id))'
  );


  add_signature(g_signatures,
    76,
    'INVOICE',
    'ACCOUNTING',
    '19877760',
    '1054299.1',
    'ap_trx_missing_xdl.sql',
    'Missing records in XLA_DISTRIBUTION_LINKS for migrated transactions',
    'Apply the GDF patch following the instructions provided in [1054299.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close'),
    'SELECT /*+ ordered use_nl(ai, xte, xe) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            xe.event_id,
            xte.entity_id,
            xah.ae_header_id,
            xte.source_id_int_1 transaction_id,
            xte.transaction_number,
            xte.entity_code,
            xte.ledger_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          gl_period_statuses upg,
          xla_transaction_entities_upg xte,
          xla_events xe,
          xla_ae_headers xah,
          xla_ae_lines xal
     WHERE xe.application_id = 200
     AND   xe.event_status_code = ''P''
     AND   xe.entity_id = xte.entity_id
     AND   xe.upg_batch_id is not null
     AND   xe.upg_batch_id <> - 9999
     AND   xah.application_id = 200
     AND   xal.application_id = 200
     AND   xte.application_id = 200
     AND   upg.application_id = 200
     AND   xah.event_id = xe.event_id
     AND   xah.ledger_id = xte.ledger_id
     AND   xal.ae_header_id = xah.ae_header_id
     AND   xah.upg_batch_id is not null
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.ledger_id = upg.ledger_id
     AND   nvl(xte.source_id_int_1,-99) = ai.invoice_id
     AND   asp.set_of_books_id = xte.ledger_id
     AND   upg.set_of_books_id = asp.set_of_books_id
     AND   asp.org_id = ai.org_id
     AND   ai.gl_date BETWEEN upg.start_date AND upg.end_date
     AND   upg.migration_status_code = ''U''
     AND   upg.closing_status in (''O'',''C'',''P'')
     AND   trunc(upg.start_date) < (
             SELECT min(trunc(creation_date)) FROM ad_applied_patches
             WHERE patch_type = ''MAINTENANCE-PACK''
             AND   maint_pack_level LIKE ''12.%'')
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.accounting_event_id = xe.event_id
             AND   aid.Historical_flag = ''Y'')
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM xla_distribution_links xdl
             WHERE xdl.application_id = 200
             AND   xdl.ae_header_id = xah.ae_header_id
             AND   xdl.ae_line_num = xal.ae_line_num)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    77,
    'INVOICE',
    'ACCOUNTING',
    '17487387',
    '975162.1',
    'ap_asatd_no_liab_sel.sql',
    'Self assessed tax distributions with missing liability account cause accounting to fail with error 95353',
    'Apply the GDF patch following the instructions provided in [975162.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            sd.invoice_distribution_id,
            zxd.gl_date,
            zxd.tax_rate_id,
            zxd.recovery_rate_id,
            zxd.self_assessed_flag,
            zxd.recoverable_flag,
            zxd.tax_jurisdiction_id,
            zxd.tax_regime_id,
            zxd.tax_id,
            sd.org_id,
            zxd.tax_status_id,
            sd.dist_code_combination_id,
            zxd.account_source_tax_rate_id,
            sd.detail_tax_dist_id,
            sd.self_assessed_tax_liab_ccid
     FROM ap_invoices_all ai,
          ap_self_assessed_tax_dist_all sd,
          zx_rec_nrec_dist zxd,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.invoice_id = sd.invoice_id
     AND   zxd.rec_nrec_tax_dist_id = sd.detail_tax_dist_id
     AND   sd.posted_flag IN (''N'', ''S'')
     AND   sd.self_assessed_tax_liab_ccid is null
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    78,
    'INVOICE',
    'ACCOUNTING',
    '17956201',
    '985228.1',
    'ap_psa_cleanup_s.sql check 1',
    'Reversing distribution pairs which have not been encumbered but which have been stamped with BC_EVENT_ID.',
    'Apply the GDF patch following the instructions provided in [985228.1]',
    'Y',
    'N',
    impact_area_tbl('Period Close'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id parent_inv_dist_id,
            aid.distribution_line_number parent_dist_line_num,
            aid.line_type_lookup_code parent_line_type,
            aid.amount parent_amount,
            aid.base_amount parent_base_amount,
            aid.bc_event_id parent_bc_event_id,
            xe.event_status_code parent_event_status,
            aid.encumbered_flag parent_encumbered_flag,
            aid.posted_flag parent_posted_flag,
            aidr.invoice_distribution_id reversal_inv_dist_id,
            aidr.distribution_line_number reversal_dist_line_num,
            aidr.line_type_lookup_code reversal_line_type,
            aidr.amount reversal_amount,
            aidr.base_amount reversal_base_amount,
            aidr.bc_event_id reversal_bc_event_id,
            xer.event_status_code reversal_event_status,
            aidr.encumbered_flag reversal_encumbered_flag,
            aidr.posted_flag reversal_posted_flag
     FROM ap_invoice_distributions_all aid,
          ap_invoice_distributions_all aidr,
          financials_system_params_all fsp,
          xla_events xe,
          xla_events xer,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aid.bc_event_id = xe.event_id(+)
     AND   aidr.bc_event_id = xer.event_id(+)
     AND   xe.application_id(+) = 200
     AND   xer.application_id(+) = 200
     AND   xe.budgetary_control_flag(+) = ''Y''
     AND   xer.budgetary_control_flag(+) = ''Y''
     AND   aid.invoice_distribution_id = aidr.parent_reversal_id
     AND   nvl(aid.historical_flag, ''N'') <> ''Y''
     AND   nvl(aidr.historical_flag, ''N'') <> ''Y''
     AND   nvl(aid.reversal_flag,   ''N'') = ''Y''
     AND   nvl(aidr.reversal_flag,   ''N'') = ''Y''
     AND   aid.invoice_id = aidr.invoice_id
     AND   aid.org_id = fsp.org_id
     AND   fsp.purch_encumbrance_flag = ''Y''
     AND   aid.invoice_line_number = aidr.invoice_line_number
     AND   (nvl(xe.event_id,  -99) = -99 OR xe.event_status_code <> ''P'')
     AND   (nvl(xer.event_id, -99) = -99 OR xer.event_status_code <> ''P'')
     AND   (nvl(xe.event_id,  -99) <> -99 OR nvl(xer.event_id, -99) <> -99)
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    79,
    'INVOICE',
    'ACCOUNTING',
    '17956201',
    '985228.1',
    'ap_psa_cleanup_s.sql check 2',
    'Approved distributions containing unprocessed budgetary control events causing the actual accounting of the invoice to fail',
    'Apply the GDF patch following the instructions provided in [985228.1]',
    'Y',
    'N',
    impact_area_tbl('Period Close'),
    'SELECT aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aid.match_status_flag,
            aid.bc_event_id,
            xe.event_status_code,
            xe.process_status_code,
            aid.encumbered_flag,
            aid.accounting_event_id,
            aid.posted_flag,
            aid.po_distribution_id
     FROM ap_invoice_distributions_all aid,
          xla_events xe,
          financials_system_params_all fsp,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE nvl(aid.historical_flag,   ''N'') = ''N''
     AND   nvl(aid.posted_flag, ''N'') <> ''Y''
     AND   aid.po_distribution_id is null
     AND   aid.org_id = fsp.org_id
     AND   nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y''
     AND   aid.encumbered_flag = ''Y''
     AND   aid.match_status_flag = ''A''
     AND   aid.bc_event_id = xe.event_id(+)
     AND   xe.application_id(+) = 200
     AND   (nvl(xe.event_id, -99) = -99 OR
            (nvl(xe.event_id, -99) <> -99 AND
             xe.event_status_code <> ''P''))
     AND   nvl(aid.reversal_flag,   ''N'') <> ''Y''
     AND   aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    80,
    'INVOICE',
    'ACCOUNTING',
    '20086994',
    '1063263.1',
    'ap_incl_excl_tax_sel.sql',
    'Out of sync amounts between Invoice distributions and XLA_Distribution_Links',
    'Apply the GDF patch following the instructions provided in [1063263.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'Invoice Discard', 'Trial Balance'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai, aid, xdl, xe, xah, xal) */
            ''INCL_TAX_INCORR_AMT_IN_AID_XDL'' corruption_type,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_amount,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.accounting_event_id
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          xla_distribution_links xdl,
          xla_events xe,
          xla_ae_headers xah,
          gl_ledgers gl,
          xla_ae_lines xal
     WHERE ai.invoice_id = invs.invoice_id
     AND   xah.ledger_id = gl.ledger_id
     AND   gl.sla_ledger_cash_basis_flag = ''N''
     AND   ai.invoice_id = aid.invoice_id
     AND   aid.line_type_lookup_code NOT IN (''PREPAY'', ''AWT'', ''NONREC_TAX'',
             ''REC_TAX'', ''TRV'', ''TERV'', ''TIPV'')
     AND   aid.prepay_distribution_id is null
     AND   aid.accounting_event_id = xe.event_id
     AND   xe.event_status_code = ''P''
     AND   xe.process_status_code = ''P''
     AND   nvl(xe.budgetary_control_flag, ''N'') = ''N''
     AND   xe.event_id = xah.event_id
     AND   xah.balance_type_code = ''A''
     AND   xah.application_id = 200
     AND   xah.application_id = xe.application_id
     AND   xah.application_id = xal.application_id
     AND   xah.application_id = xdl.application_id
     AND   xah.parent_ae_header_id is null
     AND   xah.ae_header_id = xal.ae_header_id
     AND   nvl(xah.upg_batch_id, -9999) = -9999
     AND   xal.accounting_class_code = ''LIABILITY''
     AND   xah.ae_header_id = xdl.ae_header_id
     AND   xal.ae_line_num = xdl.ae_line_num
     AND   xdl.source_distribution_type = ''AP_INV_DIST''
     AND   xdl.source_distribution_id_num_1 = aid.invoice_distribution_id
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid2
             WHERE aid2.invoice_id = aid.invoice_id
             AND   aid2.line_type_lookup_code IN (''NONREC_TAX'', ''REC_TAX'',
                     ''TIPV'', ''TERV'', ''TRV'')
             AND   aid2.invoice_line_number = aid.invoice_line_number
             AND   aid2.charge_applicable_to_dist_id = aid.invoice_distribution_id
             AND   aid2.posted_flag = ''Y'')
     AND   (nvl(xdl.unrounded_entered_cr, xdl.unrounded_entered_dr) <> abs(aid.amount) OR
            NOT EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_invoice_distributions_all aid3,
                  xla_ae_headers xah2,
                  xla_distribution_links xdl2
             WHERE aid3.invoice_id = aid.invoice_id
             AND   aid3.line_type_lookup_code IN (''NONREC_TAX'', ''REC_TAX'',
                     ''TIPV'', ''TERV'', ''TRV'')
             AND   aid3.invoice_line_number = aid.invoice_line_number
             AND   aid3.charge_applicable_to_dist_id = aid.invoice_distribution_id
             AND   xah2.ledger_id = xah.ledger_id
             AND   xah2.application_id = xah.application_id
             AND   xdl2.application_id = xah.application_id
             AND   xah2.event_id = aid3.accounting_event_id
             AND   xah2.ae_header_id = xdl2.ae_header_id
             AND   xdl2.source_distribution_type = ''AP_INV_DIST''
             AND   xdl2.source_distribution_id_num_1 = aid3.invoice_distribution_id ))
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid, xdl, xe, xah, xal) */
            ''INCORR_AMT_AID_XDL'' corruption_type,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            aid.org_id,
            ai.invoice_amount,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.accounting_event_id
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          xla_distribution_links xdl,
          xla_events xe,
          xla_ae_headers xah,
          gl_ledgers gl,
          xla_ae_lines xal
     WHERE ai.invoice_id = invs.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.line_type_lookup_code NOT IN (''PREPAY'',''AWT'')
     AND   aid.prepay_distribution_id is null
     AND   xe.event_id = aid.accounting_event_id
     AND   xe.event_status_code = ''P''
     AND   xe.process_status_code = ''P''
     AND   xe.application_id = 200
     AND   nvl(xe.budgetary_control_flag, ''N'') = ''N''
     AND   xah.event_id = xe.event_id
     AND   xah.application_id = xe.application_id
     AND   xah.balance_type_code = ''A''
     AND   xah.parent_ae_header_id is null
     AND   nvl(xah.upg_batch_id, -9999) = -9999
     AND   gl.ledger_id = xah.ledger_id
     AND   gl.sla_ledger_cash_basis_flag = ''N''
     AND   xal.ae_header_id = xah.ae_header_id
     AND   xal.application_id = xah.application_id
     AND   xal.accounting_class_code = ''LIABILITY''
     AND   xdl.source_distribution_type = ''AP_INV_DIST''
     AND   xdl.source_distribution_id_num_1 = aid.invoice_distribution_id
     AND   xdl.application_id = xah.application_id
     AND   xdl.ae_header_id = nvl(xal.ae_header_id,0)
     AND   xdl.ae_line_num = nvl(xal.ae_line_num,0)
     AND   ((abs(nvl(aid.base_amount, aid.amount)) <>
               abs(nvl(xdl.unrounded_accounted_cr,0) -
               nvl(xdl.unrounded_accounted_dr,0))  AND
             xah.ledger_id = ai.set_of_books_id) OR
            ((abs(aid.amount) <>  abs(nvl(xdl.unrounded_entered_cr,0) -
                nvl(xdl.unrounded_entered_dr,0)))  AND
              xah.ledger_id <> ai.set_of_books_id))
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid, xe, xah, xte) */
            ''MISSING_AID_IN_XDL'' corruption_type,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            aid.org_id,
            ai.invoice_amount,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.accounting_event_id
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          xla_events xe,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          gl_ledgers gl
     WHERE xah.ledger_id = gl.ledger_id
     AND   gl.sla_ledger_cash_basis_flag = ''N''
     AND   ai.invoice_id = aid.invoice_id
     AND   aid.line_type_lookup_code NOT IN (''PREPAY'',''AWT'')
     AND   aid.prepay_distribution_id is null
     AND   xe.event_id = aid.accounting_event_id
     AND   nvl(xe.budgetary_control_flag, ''N'') = ''N''
     AND   xah.event_id = xe.event_id
     AND   xah.application_id = 200
     AND   xah.balance_type_code = ''A''
     AND   xah.parent_ae_header_id is null
     AND   NOT (aid.line_type_lookup_code IN (''ERV'',''TERV'') AND
             xah.ledger_id <> ai.set_of_books_id)
     AND   xe.application_id = 200
     AND   xe.event_status_code = ''P''
     AND   xe.process_status_code = ''P''
     AND   xe.entity_id = xte.entity_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.source_id_int_1 = ai.invoice_id
     AND   nvl(xah.upg_batch_id, -9999) = -9999
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM xla_distribution_links xdl
             WHERE xah.application_id = xdl.application_id
             AND   xah.ae_header_id = xdl.ae_header_id
             AND   xdl.source_distribution_type = ''AP_INV_DIST''
             AND   xdl.source_distribution_id_num_1 = aid.invoice_distribution_id )
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    81,
    'INVOICE',
    'ACCOUNTING',
    '17956184',
    '982795.1',
    'ap_bc_on_rectax_dist_sel.sql',
    'Budgetary control Events stamped on Recoverable Tax Distributions',
    'Apply the GDF patch following the instructions provided in [982795.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.line_type_lookup_code,
            aid.accounting_date,
            aid.amount,
            aid.base_amount,
            aid.posted_flag,
            aid.bc_event_id,
            aid.encumbered_flag,
            xe.event_status_code,
            xe.process_status_code,
            xe.budgetary_control_flag,
            xe.upg_batch_id
     FROM ap_invoice_distributions_all aid,
          ap_invoices_all ai,
          gl_ledgers gl,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          xla_events xe,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE ai.invoice_id = aid.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   aid.line_type_lookup_code = ''REC_TAX''
     AND   aid.prepay_distribution_id is null
     AND   xe.application_id = 200
     AND   xe.event_id = aid.bc_event_id
     AND   aid.bc_event_id is not null
     AND   ai.set_of_books_id = gl.ledger_id
     AND   (nvl(aid.posted_flag, ''N'') <> ''Y'' OR
            EXISTS (
              SELECT 1 FROM ap_invoice_payments_all aip
              WHERE aip.invoice_id = aid.invoice_id
              AND   nvl(aip.posted_flag, ''N'') <> ''Y''
              AND   gl.sla_ledger_cash_basis_flag = ''Y''
              UNION
              SELECT 1
              FROM ap_invoice_payments_all aip,
                   ap_payment_history_all aph,
                   ap_system_parameters_all asp
              WHERE aip.invoice_id = aid.invoice_id
              AND   aip.check_id = aph.check_id
              AND   aph.org_id = asp.org_id
              AND   nvl(aph.posted_flag, ''N'') <> ''Y''
              AND   gl.sla_ledger_cash_basis_flag = ''Y''
              AND   aph.org_id = asp.org_id
              AND   aph.transaction_type like ''PAYMENT%CLEAR%''
              AND   asp.when_to_account_pmt like ''CLEARING ONLY''))
     AND   NOT EXISTS (
             SELECT 1
             FROM xla_distribution_links xdl,
                  xla_ae_headers xah
             WHERE xdl.application_id = 200
             AND   xah.application_id = 200
             AND   xdl.ae_header_id = xah.ae_header_id
             AND   xah.event_id = aid.bc_event_id
             AND   xah.balance_type_code = ''E''
             AND   xdl.source_distribution_type = ''AP_INV_DIST''
             AND   xdl.source_distribution_id_num_1 = aid.invoice_distribution_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    82,
    'INVOICE',
    'ACCOUNTING',
    '17983453',
    '1060644.1',
    'ap_orphan_dists_s.sql',
    'Orphan invoice distributions with no corresponding invoice line.',
    'Apply the GDF patch following the instructions provided in [1060644.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.invoice_date,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.line_type_lookup_code,
            aid.invoice_distribution_id,
            aid.amount,
            aid.base_amount,
            aid.accounting_event_id,
            aid.posted_flag,
            aid.detail_tax_dist_id,
            aid.set_of_books_id
     FROM ap_invoice_distributions_all aid,
          ap_invoices_all ai,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE nvl(aid.historical_flag, ''N'') = ''N''
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   (NOT EXISTS (
               SELECT 1 FROM ap_invoice_lines_all l
               WHERE l.invoice_id = aid.invoice_id
               AND   l.line_number = aid.invoice_line_number) OR
            aid.parent_reversal_id IN (
               SELECT p.invoice_distribution_id FROM ap_invoice_distributions_all p
               WHERE NOT EXISTS (
                 SELECT 1 FROM ap_invoice_lines_all l
                 WHERE l.invoice_id = p.invoice_id
                 AND   l.line_number = p.invoice_line_number)))
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    83,
    'INVOICE',
    'ACCOUNTING',
    '18620608',
    '1190473.1',
    'ap_prepay_final_rnd_s.sql',
    'Prepayment Application accounted for an Incorrect amount because of incorrect final payment rounding happening due to prior Prepayment unapplication or a prior payment cancellation (prepay_reissue) ',
    'Apply the GDF patch following the instructions provided in [1190473.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ push_pred(apad_amts) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.invoice_amount,
            ai.invoice_currency_code,
            ai.invoice_date,
            aidp.line_type_lookup_code,
            aidp.invoice_line_number,
            aidp.distribution_line_number,
            aidp.invoice_distribution_id prepay_app_distribution_id,
            aidp.accounting_date,
            aidp.amount prepay_app_amt,
            aidp.base_amount prepay_app_base_amt,
            apad_amts.sum_app_dists_amt,
            apad_amts.sum_app_dists_base_amt,
            aidp.accounting_event_id event_id,
            apph.prepay_history_id,
            apph.transaction_type,
            aidp.posted_flag,
            aidp.match_status_flag,
            fsp.purch_encumbrance_flag,
            asp.base_currency_code,
            ai.set_of_books_id
     FROM ap_prepay_history_all apph,
          (
            SELECT apad.prepay_app_distribution_id,
                   sum(apad.amount) sum_app_dists_amt,
                   sum(apad.base_amount) sum_app_dists_base_amt
            FROM ap_prepay_app_dists apad,
                 ap_prepay_history_all apph
            WHERE apph.transaction_type <> ''PREPAYMENT APPLICATION ADJ''
            AND   apph.prepay_history_id = apad.prepay_history_id
            AND   apad.prepay_dist_lookup_code IN (''PREPAY APPL'',
                    ''PREPAY APPL NONREC TAX'', ''PREPAY APPL REC TAX'',
                    ''FINAL PAYMENT ROUNDING'')
            GROUP BY apad.prepay_app_distribution_id
          ) apad_amts,
          ap_invoice_distributions_all aidp,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          financials_system_params_all fsp,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE apph.transaction_type <> ''PREPAYMENT APPLICATION ADJ''
     AND   aidp.invoice_id = apph.invoice_id
     AND   apph.accounting_event_id = aidp.accounting_event_id
     AND   aidp.line_type_lookup_code IN (''PREPAY'', ''REC_TAX'', ''NONREC_TAX'')
     AND   aidp.prepay_distribution_id is not null
     AND   nvl(aidp.reversal_flag, ''N'') <> ''Y''
     AND   aidp.invoice_id = ai.invoice_id
     AND   fsp.org_id = aidp.org_id
     AND   asp.org_id = aidp.org_id
     AND   (aidp.posted_flag = ''Y'' OR
            (aidp.match_status_flag IN (''A'',''T'') AND
             nvl(fsp.purch_encumbrance_flag, ''N'') = ''N'') OR
            (aidp.match_status_flag = ''A'' AND
             nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y''))
     AND   aidp.accounting_event_id is not null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aidp2
             WHERE aidp2.invoice_id = ai.invoice_id
             AND   aidp2.prepay_distribution_id is not null
             AND   aidp2.line_type_lookup_code = ''PREPAY''
             AND   aidp2.reversal_flag = ''Y''
             AND   aidp2.parent_reversal_id is not null
             UNION
             SELECT 1
             FROM ap_invoice_payments_all aip,
                  ap_checks_all ac
             WHERE aip.invoice_id = ai.invoice_id
             AND   aip.check_id = ac.check_id
             AND   ac.status_lookup_code = ''VOIDED''
             AND   ac.void_date is not null)
     AND   nvl(apph.historical_flag, ''N'') = ''N''
     AND   apad_amts.prepay_app_distribution_id = aidp.invoice_distribution_id
     AND   (aidp.amount <> apad_amts.sum_app_dists_amt OR
            (ai.invoice_currency_code <> asp.base_currency_code AND
                 abs(aidp.base_amount - apad_amts.sum_app_dists_base_amt) >= 2))
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    84,
    'INVOICE',
    'ACCOUNTING',
    '17481243',
    '975184.1',
    'ap_apad_missing_sel.sql',
    'Approved prepayment application or unapplication distributions missing records in the table AP_PREPAY_APP_DISTS, which causes prepayment application or unapplication accounting events to remain unaccounted',
    'Apply the GDF patch following the instructions provided in [975184.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'Prepay Application'),
    'SELECT /*+ ordered use_nl(ai, aid, xe) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.posted_flag,
            aid.prepay_distribution_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          financials_system_params_all fsp,
          xla_events xe
     WHERE ai.invoice_id = aid.invoice_id
     AND   aid.accounting_event_id is not null
     AND   aid.org_id = fsp.org_id
     AND   ((aid.match_status_flag = ''A'' AND
             fsp.purch_encumbrance_flag = ''Y'') OR
            (aid.match_status_flag IN (''A'',''T'') AND
             nvl(fsp.purch_encumbrance_flag, ''N'') = ''N''))
     AND   nvl(aid.historical_flag, ''N'') = ''N''
     AND   aid.line_type_lookup_code IN (''PREPAY'', ''REC_TAX'', ''NONREC_TAX'')
     AND   aid.prepay_distribution_id is not null
     AND   aid.posted_flag IN (''N'', ''S'')
     AND   xe.event_id = aid.accounting_event_id
     AND   xe.event_status_code IN (''I'',''U'')
     AND   xe.application_id = 200
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_prepay_app_dists apad
             WHERE apad.prepay_app_distribution_id = aid.invoice_distribution_id
             AND   apad.accounting_event_id = aid.accounting_event_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    85,
    'INVOICE',
    'ACCOUNTING',
    '18242404',
    '1275451.1',
    'ap_prepay_upg_unapply_sel.sql',
    'Incorrect source_distribution_type, side of the debit and credit entries, and amounts in XLA_Distribution_links for upgraded Prepayment Application events.',
    'Apply the GDF patch following the instructions provided in [1275451.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+ ordered use_nl(ai_std aida aidu aidp) */
            ai_std.invoice_id               std_invoice_id,
            ai_std.invoice_num              std_invoice_num,
            ai_std.org_id                   org_id,
            ai_std.invoice_date             std_invoice_date,
            ai_std.invoice_type_lookup_code std_invoice_type,
            ai_prepay.invoice_id            prepay_invoice_id,
            ai_prepay.invoice_num           prepay_invoice_num,
            ai_prepay.invoice_date          prepay_invoice_date,
            aida.invoice_line_number        prepay_app_line_num,
            aida.invoice_distribution_id    prepay_app_dist_id,
            aida.distribution_line_number   prepay_app_dist_num,
            aida.line_type_lookup_code      prepay_app_line_type,
            aida.match_status_flag          prepay_app_match_status,
            aida.accounting_date            prepay_app_acct_date,
            xea.event_type_code             prepay_app_event_type,
            aida.accounting_event_id        prepay_app_event_id,
            aida.posted_flag                prepay_app_posted_flag,
            aida.amount                     prepay_app_amount,
            aida.base_amount                prepay_app_base_amount,
            aida.historical_flag            prepay_app_hist_flag,
            aidu.invoice_distribution_id    prepay_unapp_dist_id,
            aidu.distribution_line_number   prepay_unapp_dist_num,
            aidu.line_type_lookup_code      prepay_unapp_line_type,
            aidu.match_status_flag          prepay_unapp_match_status,
            aidu.accounting_date            prepay_unapp_acct_date,
            xeu.event_type_code             prepay_unapp_event_type,
            aidu.posted_flag                prepay_unapp_posted_flag,
            aidu.accounting_event_id        prepay_unapp_event_id,
            aidu.amount                     prepay_unapp_amount,
            aidu.base_amount                prepay_unapp_base_amount,
            aidu.historical_flag            prepay_unapp_hist_flag,
            ai_std.set_of_books_id          sob_id,
            ai_std.gl_date,
            glps.period_name,
            glps.migration_status_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai_std,
          gl_period_statuses glps,
          ap_invoice_distributions_all aida,
          ap_invoice_distributions_all aidu,
          ap_invoice_distributions_all aidp,
          ap_invoices_all ai_prepay,
          xla_events xea,
          xla_events xeu
     WHERE aida.invoice_id = aidu.invoice_id
     AND   aida.invoice_id = ai_std.invoice_id
     AND   glps.application_id = 200
     AND   nvl(glps.adjustment_period_flag, ''N'') = ''N''
     AND   glps.set_of_books_id = ai_std.set_of_books_id
     AND   ai_std.gl_date BETWEEN glps.start_date AND glps.end_date
     AND   aida.invoice_distribution_id = aidu.parent_reversal_id
     AND   aida.prepay_distribution_id = aidu.prepay_distribution_id
     AND   aidp.invoice_distribution_id = aida.prepay_distribution_id
     AND   aidp.invoice_id = ai_prepay.invoice_id
     AND   nvl(aida.reversal_flag, ''N'') = ''Y''
     AND   nvl(aidu.reversal_flag, ''N'') = ''Y''
     AND   aida.prepay_distribution_id is not null
     AND   aidu.prepay_distribution_id is not null
     AND   aida.amount < 0
     AND   aidu.amount > 0
     AND   aida.posted_flag = ''Y''
     AND   aidu.posted_flag <> ''Y''
     AND   aida.accounting_event_id is not null
     AND   aida.accounting_event_id = xea.event_id
     AND   xea.application_id = 200
     AND   xea.event_type_code = ''PREPAYMENT APPLIED''
     AND   xea.upg_batch_id is not null
     AND   xea.upg_batch_id <> -9999
     AND   xea.event_status_code = ''P''
     AND   aidu.accounting_event_id is not null
     AND   aidu.accounting_event_id = xeu.event_id
     AND   xeu.application_id = 200
     AND   xeu.event_type_code = ''PREPAYMENT UNAPPLIED''
     AND   xeu.event_status_code <> ''P''
     AND   ai_std.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    86,
    'INVOICE',
    'ACCOUNTING',
    '17481586',
    '1283264.1',
    'ap_prepay_tax_regen_s.sql',
    'Tax applicable to Prepayment Application or unapplication distributions missing accounting events',
    'Apply the GDF patch following the instructions provided in [1283264.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ ordered use_nl(ai, aidp, aidt) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            aidt.line_type_lookup_code   tax_line_type,
            aidt.invoice_distribution_id tax_distribution_id,
            aidt.reversal_flag           tax_reversal_flag,
            aidt.parent_reversal_id      tax_parent_reversal_id,
            aidt.accounting_event_id     tax_acct_event_id,
            aidt.posted_flag             tax_posted_flag,
            aidt.match_status_flag       tax_match_status_flag,
            aidt.detail_tax_dist_id      detail_tax_dist_id,
            decode(sign(aidp.amount),
              -1, ''PREPAYMENT APPLICATION'',
              1, ''PREPAYMENT UNAPPLICATION'',
              0, ''ZERO'')               category,
            aidp.line_type_lookup_code     prepay_line_type,
            aidp.invoice_distribution_id   prepay_app_distribution_id,
            aidp.reversal_flag             prepay_reversal_flag,
            aidp.parent_reversal_id        prepay_parent_reversal_id,
            aidp.invoice_line_number       prepay_invoice_line_no,
            aidp.distribution_line_number  prepay_dist_line_no,
            aidp.accounting_event_id       prepay_acct_event_id,
            aidp.posted_flag               prepay_posted_flag,
            aidp.match_status_flag         prepay_match_status_flag,
            ai.set_of_books_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aidt,
          ap_invoice_distributions_all aidp
     WHERE aidt.invoice_id = aidp.invoice_id
     AND   aidt.charge_applicable_to_dist_id = aidp.invoice_distribution_id
     AND   aidp.prepay_distribution_id is not null
     AND   aidp.line_type_lookup_code = ''PREPAY''
     AND   aidt.line_type_lookup_code LIKE ''%TAX%''
     AND   aidp.accounting_event_id is not null
     AND   aidt.accounting_event_id is null
     AND   aidt.posted_flag <> ''Y''
     AND   ai.invoice_id = aidt.invoice_id
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    87,
    'INVOICE',
    'ACCOUNTING',
    '17486117',
    '1273125.1',
    'ap_unacc_prep_unapp_sel.sql',
    'Prepayment Unapplication not getting Accounted because of a related Prepayment Application Adjusted event which reverses the Accounting for the corresponding Prepayment Application ',
    'Apply the GDF patch following the instructions provided in [1273125.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aph_pu.accounting_event_id unapplied_event,
            aph_pu.posted_flag unappld_event_posted_flag,
            aph_adj.accounting_event_id event_id,
            aph_adj.posted_flag adj_event_posted_flag
     FROM ap_prepay_history_all aph_pu,
          ap_prepay_history_all aph_adj,
          ap_invoices_all ai,
          ap_prepay_app_dists apad_pu,
          ap_prepay_app_dists apad_adj,
          xla_events xe_pu,
          xla_events xe_adj,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aph_pu.transaction_type = ''PREPAYMENT UNAPPLIED''
     AND   aph_pu.posted_flag = ''N''
     AND   aph_pu.invoice_id = aph_adj.invoice_id
     AND   aph_adj.transaction_type = ''PREPAYMENT APPLICATION ADJ''
     AND   aph_adj.posted_flag = ''Y''
     AND   aph_pu.related_prepay_app_event_id = aph_adj.related_prepay_app_event_id
     AND   ai.invoice_id = aph_pu.invoice_id
     AND   apad_pu.accounting_event_id = aph_pu.accounting_event_id
     AND   apad_adj.accounting_event_id = aph_adj.accounting_event_id
     AND   apad_adj.reversed_prepay_app_dist_id = apad_pu.reversed_prepay_app_dist_id
     AND   xe_pu.event_id = aph_pu.accounting_event_id
     AND   xe_pu.application_id = 200
     AND   xe_pu.event_status_code = ''U''
     AND   xe_pu.process_status_code in (''U'',''I'')
     AND   xe_adj.event_id = aph_adj.accounting_event_id
     AND   xe_adj.application_id = 200
     AND   xe_adj.event_status_code = ''P''
     AND   xe_adj.process_status_code = ''P''
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    88,
    'INVOICE',
    'ACCOUNTING',
    '19327661',
    '1179414.1',
    'ap_prepay_triplicate_s.sql',
    'Prepayment application/unapplication resulting in accounted amounts which are multiples of the actual prepayment application amount',
    'Apply the GDF patch following the instructions provided in [1179414.1]',
    'Y',
    'Y',
    impact_area_tbl('Prepay Application'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.invoice_date,
            ai.invoice_amount,
            ai.set_of_books_id,
            xe.event_id,
            xe.event_type_code,
            apph.prepay_history_id,
            apph.invoice_line_number,
            apph.prepay_invoice_id,
            ai_prepay.invoice_num prepay_invoice_num,
            apph.prepay_line_num,
            dist_sum.amt prepay_appl_amt,
            acct_sum.amt prepay_acct_amt
     FROM xla_events xe,
          xla_transaction_entities_upg xte,
          ap_prepay_history_all apph,
          ap_invoices_all ai,
          ap_invoices_all ai_prepay,
          (
            SELECT decode(sum(aid.amount),
                     0, 1,
                     sum(aid.amount))  amt,
                   aid.accounting_event_id
            FROM ap_invoice_distributions_all aid
            WHERE aid.line_type_lookup_code IN (''PREPAY'',''REC_TAX'',''NONREC_TAX'')
            AND   aid.prepay_distribution_id is not null
            GROUP BY aid.accounting_event_id
          ) dist_sum,
          (
            SELECT sum(nvl(xal.entered_cr, 0) - nvl(xal.entered_dr, 0)) amt,
                   xe.event_id,
                   xah.ledger_id
            FROM xla_ae_lines xal,
                 xla_ae_headers xah,
                 xla_events xe,
                 xla_transaction_entities_upg xte
            WHERE xal.application_id = 200
            AND   xah.application_id = 200
            AND   xe.application_id = 200
            AND   xal.ae_header_id = xah.ae_header_id
            AND   xah.event_id = xe.event_id
            AND   xe.entity_id = xte.entity_id
            AND   xte.entity_code = ''AP_INVOICES''
            AND   xte.ledger_id = xah.ledger_id
            AND   xal.accounting_class_code = ''PREPAID_EXPENSE''
            AND   xe.event_type_code IN (''PREPAYMENT APPLIED'',''PREPAYMENT UNAPPLIED'')
            GROUP BY xe.event_id, xah.ledger_id
          ) acct_sum,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE xe.application_id = 200
     AND   xe.event_type_code IN (''PREPAYMENT APPLIED'',''PREPAYMENT UNAPPLIED'')
     AND   xe.event_status_code = ''P''
     AND   xe.event_id = dist_sum.accounting_event_id
     AND   xe.event_id = acct_sum.event_id
     AND   abs(abs(acct_sum.amt)/abs(dist_sum.amt)) > 2
     AND   xe.event_id = apph.accounting_event_id
     AND   apph.prepay_invoice_id = ai_prepay.invoice_id
     AND   xte.application_id = 200
     AND   xe.entity_id = xte.entity_id
     AND   xte.ledger_id = ai.set_of_books_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    89,
    'INVOICE',
    'ACCOUNTING',
    '16841852',
    '1264239.1',
    'ap_awt_on_prepay_sel.sql',
    'AWT distributions related to Prepayment Application/Unapplication distributions causing the Invoice or its Payment to remain Unaccounted',
    'Apply the GDF patch following the instructions provided in [1264239.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid_awt.invoice_line_number,
            aid_awt.invoice_distribution_id,
            aid_awt.amount,
            aid_awt.base_amount,
            aid_awt.awt_invoice_payment_id,
            aid_awt.awt_invoice_id,
            ai.invoice_currency_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid_awt,
          ap_invoice_distributions_all aid_prepay,
          xla_events xe
     WHERE aid_prepay.invoice_id = aid_awt.invoice_id
     AND   ai.invoice_id = aid_awt.invoice_id
     AND   aid_prepay.invoice_distribution_id = aid_awt.awt_related_id
     AND   aid_prepay.prepay_distribution_id is not null
     AND   xe.event_id = aid_awt.accounting_event_id
     AND   xe.event_status_code IN (''U'',''I'')
     AND   xe.application_id = 200
     AND   nvl(aid_awt.posted_flag,''N'') <> ''Y''
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    90,
    'INVOICE',
    'ACCOUNTING',
    '17485768',
    '982075.1',
    'ap_apad_cancelled_dist_sel.sql',
    'Prepayment Application/Unapplication distributions prorated to cancelled invoice distributions causing accounting error ''This line cannot be accounted...''',
    'Apply the GDF patch following the instructions provided in [982075.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+ ordered use_nl(ai, aid, aid1, xe) parallel(apad,6) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            apad.prepay_app_dist_id,
            apad.accounting_event_id,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.amount,
            xe.event_type_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_prepay_app_dists apad,
          ap_invoice_distributions_all aid1,
          xla_events xe
     WHERE xe.event_id = apad.accounting_event_id
     AND   xe.application_id = 200
     AND   (xe.upg_batch_id is null OR
            xe.upg_batch_id = ''-9999'')
     AND   xe.event_type_code IN (''PREPAYMENT APPLIED'',''PREPAYMENT UNAPPLIED'')
     AND   apad.prepay_app_distribution_id = aid.invoice_distribution_id
     AND   aid.posted_flag <> ''Y''
     AND   nvl(aid.historical_flag, ''N'') <> ''Y''
     AND   aid.line_type_lookup_code IN (''PREPAY'', ''REC_TAX'', ''NONREC_TAX'')
     AND   aid.prepay_distribution_id is not null
     AND   aid.invoice_id = ai.invoice_id
     AND   apad.invoice_distribution_id = aid1.invoice_distribution_id
     AND   aid1.line_type_lookup_code NOT IN (''AWT'',''PREPAY'')
     AND   aid1.cancellation_flag = ''Y''
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    91,
    'INVOICE',
    'ACCOUNTING',
    '17487474',
    '1194913.1',
    'ap_prep_apld_noitmdist_sel.sql',
    'Prepayment application/unapplication events not getting accounted because the the corresponding standard invoice is canceled and does not contain any item or charge distributions',
    'Apply the GDF patch following the instructions provided in [1194913.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+ ordered use_nl(ai, aid) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.parent_reversal_id,
            xe.event_type_code,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.amount,
            aid.base_amount
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          xla_events xe
     WHERE aid.invoice_id = ai.invoice_id
     AND   aid.prepay_distribution_id is not null
     AND   aid.accounting_event_id = xe.event_id (+)
     AND   nvl(aid.posted_flag, ''N'') <> ''Y''
     AND   nvl(aid.reversal_flag, ''N'') = ''Y''
     AND   nvl(xe.application_id, -99) = 200
     AND   nvl(xe.event_status_code, ''N'') <> ''P''
     AND   ai.cancelled_date is not null
     AND   ai.invoice_amount = 0
     AND   EXISTS (
             SELECT /*+ no_unnest no_expand */ 1
             FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = aid.invoice_id
             AND   aid1.prepay_distribution_id is not null
             AND   nvl(aid1.reversal_flag, ''N'') = ''Y''
             AND   (aid.parent_reversal_id = aid1.invoice_distribution_id OR
                    aid.invoice_distribution_id = aid1.parent_reversal_id)
             AND   nvl(aid1.posted_flag, ''N'') <> ''Y'')
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid2
             WHERE aid2.invoice_id = ai.invoice_id
             AND   aid2.prepay_distribution_id is null)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    92,
    'INVOICE',
    'ACCOUNTING',
    '17481399',
    '1109933.1',
    'ap_prepay_bus_code_s.sql',
    'Upgraded prepayment Invoice Accounting is missing business class code for Prepaid_Expense Accounting lines ',
    'Apply the GDF patch following the instructions provided in [1109933.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+ ordered use_nl(ai xte xe xah xal) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            xe.event_id,
            xah.ae_header_id,
            xal.ae_line_num,
            xal.accounting_class_code,
            xal.entered_dr,
            xal.entered_cr,
            xal.accounted_dr,
            xal.accounted_cr
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_events xe,
          xla_ae_headers xah,
          xla_ae_lines xal
     WHERE xe.event_id = xah.event_id
     AND   xah.ae_header_id = xal.ae_header_id
     AND   xah.application_id = 200
     AND   xe.application_id = 200
     AND   xal.application_id = 200
     AND   xe.entity_id = xte.entity_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   ai.invoice_type_lookup_code = ''PREPAYMENT''
     AND   ai.historical_flag = ''Y''
     AND   xe.event_type_code like ''PREPAYMENT%''
     AND   xe.event_status_code = ''P''
     AND   (xal.accounting_class_code LIKE ''%EXPENSE%'' OR
            xal.accounting_class_code LIKE ''%TAX%'' OR
            xal.accounting_class_code LIKE ''%ACCRUAL%'')
     AND   xal.accounting_class_code NOT LIKE ''%LIAB%''
     AND   xe.upg_batch_id is not null
     AND   xe.upg_batch_id <> -9999
     AND   xah.upg_batch_id is not null
     AND   xah.upg_batch_id <> -9999
     AND   xal.upg_batch_id is not null
     AND   xal.upg_batch_id <> -9999
     AND   xal.business_class_code is null
     AND   xte.ledger_id = ai.set_of_books_id
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    93,
    'INVOICE',
    'ACCOUNTING',
    '17487692',
    '1284158.1',
    'ap_prepay_pay_cancel_s.sql',
    'Prepayment Application or Unapplication events are not getting Accounted because all payments for the corresponding Prepayment Invoice have been cancelled',
    'Apply the GDF patch following the instructions provided in [1284158.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+ ordered use_nl(aid ppd) no_merge(iview) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.invoice_date,
            ai.invoice_amount,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.accounting_event_id event_id,
            aid.posted_flag,
            aid.parent_reversal_id,
            aid.reversal_flag,
            xe.event_type_code,
            ai_prepay.invoice_id   prepay_invoice_id,
            ai_prepay.invoice_num  prepay_invoice_num,
            ai_prepay.invoice_date prepay_invoice_date,
            ail.prepay_line_number prepay_line_number,
            ai.set_of_books_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_invoice_distributions_all aid,
          ap_invoice_distributions_all ppd,
          ap_invoices_all ai_prepay,
          xla_events xe
     WHERE xe.application_id = 200
     AND   xe.event_id = aid.accounting_event_id
     AND   aid.invoice_line_number = ail.line_number
     AND   aid.invoice_id = ail.invoice_id
     AND   ail.invoice_id = ai.invoice_id
     AND   aid.prepay_distribution_id = ppd.invoice_distribution_id
     AND   ppd.invoice_id = ai_prepay.invoice_id
     AND   aid.posted_flag <> ''Y''
     AND   xe.event_status_code <> ''P''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip
             WHERE aip.invoice_id = ai_prepay.invoice_id
             AND   nvl(aip.reversal_flag, ''N'') <> ''Y'')
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    94,
    'INVOICE',
    'ACCOUNTING',
    '19327670',
    '1284162.1',
    'ap_ppappl_evnt_miss_s.sql',
    'Prepayment Application and Unapplication distributions have the same Accounting_Event_ID causing issues with Accounting ',
    'Apply the GDF patch following the instructions provided in [1284162.1]',
    'Y',
    'Y',
    impact_area_tbl('Prepay Application'),
    'SELECT /*+ ordered use_nl(ai, aid) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.invoice_date,
            ai.invoice_amount,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aid.accounting_date,
            aid.accounting_event_id event_id,
            aid.posted_flag,
            aid.set_of_books_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_amount > = 0
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.line_type_lookup_code = ''PREPAY''
     AND   aid.accounting_event_id is not null
     AND   aid.amount < 0
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = ai.invoice_id
             AND   aid1.parent_reversal_id = aid.invoice_distribution_id
             AND   aid1.accounting_event_id is not null
             AND   aid1.line_type_lookup_code = ''PREPAY''
             AND   aid1.amount = (0-aid.amount)
             AND   aid1.accounting_event_id = aid.accounting_event_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM xla_events xe
             WHERE xe.application_id = 200
             AND   xe.event_type_code = ''PREPAYMENT APPLIED''
             AND   xe.event_id = aid.accounting_event_id)
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM xla_events xe
             WHERE xe.application_id = 200
             AND   xe.event_type_code = ''PREPAYMENT UNAPPLIED''
             AND   xe.event_id = aid.accounting_event_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    95,
    'INVOICE',
    'ACCOUNTING',
    '19327695',
    '1276434.1',
    'ap_invalid_prepay_adj_sel.sql',
    'Invalid Prepayment Application Adjusted cascade events generated with an invoice_adjustment_event_id which is not a valid accounting event stamped on non-AWT invoice distributions',
    'Apply the GDF patch following the instructions provided in [1276434.1]',
    'Y',
    'N',
    impact_area_tbl('Prepay Application'),
    'SELECT ai1.invoice_id,
            ai1.invoice_num applied_to_invoice_num,
            ai1.org_id,
            ai2.invoice_num prepay_invoice_num,
            asu.vendor_name,
            assi.vendor_site_code,
            aph.prepay_invoice_id,
            aph.prepay_history_id,
            aph.accounting_event_id event_id,
            aph.invoice_adjustment_event_id,
            aph.transaction_type,
            aph.posted_flag,
            aph.org_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai1,
          ap_prepay_history_all aph,
          xla_events xe,
          ap_invoices_all ai2,
          ap_suppliers asu,
          ap_supplier_sites_all assi
     WHERE aph.transaction_type like ''PREPAYMENT APPLICATION ADJ''
     AND   nvl(aph.posted_flag, ''N'') != ''Y''
     AND   aph.transaction_type != ''MANUAL PAYMENT ADJUSTED''
     AND   xe.event_id = aph.accounting_event_id
     AND   xe.event_status_code != ''P''
     AND   xe.application_id = 200
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all
             WHERE accounting_event_id = aph.invoice_adjustment_event_id
             AND   line_type_lookup_code <> ''AWT'')
     AND   aph.invoice_id = ai1.invoice_id
     AND   aph.prepay_invoice_id = ai2.invoice_id
     AND   ai2.vendor_id = asu.vendor_id(+)
     AND   ai2.vendor_site_id = assi.vendor_site_id(+)
     AND   ai1.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    96,
    'INVOICE',
    'ACCOUNTING',
    '17485924',
    '1326703.1',
    'ap_corrupt_prepay_adj_s.sql check 1',
    'Prepayment Application Adjustment events generated with a NULL Related_prepay_app_event_ID, causing Create Accounting to error out',
    'Apply the GDF patch following the instructions provided in [1326703.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_type_lookup_code,
            asu.vendor_name,
            assi.vendor_site_id,
            apph.prepay_history_id,
            apph.accounting_date,
            apph.accounting_event_id event_id,
            apph.bc_event_id,
            apph.posted_flag,
            apph.transaction_type,
            apph.invoice_line_number,
            apph.prepay_line_num,
            apph.prepay_invoice_id,
            apph.invoice_adjustment_event_id,
            apph.related_prepay_app_event_id,
            ai.set_of_books_id
     FROM ap_prepay_history_all apph,
          ap_invoices_all ai,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE apph.transaction_type = ''PREPAYMENT APPLICATION ADJ''
     AND   apph.related_prepay_app_event_id is null
     AND   nvl(apph.historical_flag,   ''N'') <> ''Y''
     AND   apph.posted_flag <> ''Y''
     AND   apph.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    97,
    'INVOICE',
    'ACCOUNTING',
    '17485924',
    '1326703.1',
    'ap_corrupt_prepay_adj_s.sql check 2',
    'Prepayment Application Adjustment events generated with an Invoice_Adjustment_Event_ID belonging to the PREPAYMENT APPLICATIONS Event Class',
    'Apply the GDF patch following the instructions provided in [1326703.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_type_lookup_code,
            asu.vendor_name,
            assi.vendor_site_id,
            apph.prepay_history_id,
            apph.accounting_date,
            apph.accounting_event_id event_id,
            apph.bc_event_id,
            apph.posted_flag,
            apph.transaction_type,
            apph.invoice_line_number,
            apph.prepay_line_num,
            apph.prepay_invoice_id,
            apph.invoice_adjustment_event_id,
            apph.related_prepay_app_event_id,
            ai.set_of_books_id
     FROM ap_prepay_history_all apph,
          ap_invoices_all ai,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          xla_events xe,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE apph.transaction_type = ''PREPAYMENT APPLICATION ADJ''
     AND   apph.invoice_adjustment_event_id = xe.event_id
     AND   apph.invoice_adjustment_event_id is not null
     AND   xe.event_type_code LIKE ''PREPAY%''
     AND   nvl(apph.historical_flag,   ''N'') <> ''Y''
     AND   apph.posted_flag <> ''Y''
     AND   apph.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    98,
    'INVOICE',
    'ACCOUNTING',
    '17633017',
    '1323351.1',
    'ap_prepay_adj_incorr_acct_s.sql',
    'Prepayment Application Adjustment events accounted incorrectly causing net accounting for Prepayment Application to be different from the net advance applied on the Invoice.',
    'Apply the GDF patch following the instructions provided in [1323351.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            asu.vendor_name,
            assi.vendor_site_code,
            ai.invoice_date,
            ai.invoice_amount,
            ai.invoice_type_lookup_code,
            apph.transaction_type,
            apph.prepay_history_id,
            apph.accounting_event_id event_id,
            apph.posted_flag,
            apph.related_prepay_app_event_id,
            apph.invoice_adjustment_event_id,
            aid.invoice_distribution_id missing_invoice_dist_id,
            aid.parent_reversal_id missing_dist_parent_id,
            aid.reversal_flag missing_dist_reversal_flag,
            aid.line_type_lookup_code missing_dist_lookup_code,
            ai.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          ap_prepay_history_all apph,
          ap_invoice_distributions_all aid,
          ap_suppliers asu,
          ap_supplier_sites_all assi
     WHERE ai.invoice_id = invs.invoice_id
     AND   apph.transaction_type = ''PREPAYMENT APPLICATION ADJ''
     AND   apph.invoice_adjustment_event_id = aid.accounting_event_id
     AND   aid.prepay_distribution_id is null
     AND   aid.line_type_lookup_code NOT IN (''AWT'',''PREPAY'')
     AND   nvl(aid.base_amount, amount) <> 0
     AND   apph.posted_flag = ''Y''
     AND   apph.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aidp
             WHERE aidp.accounting_event_id = apph.related_prepay_app_event_id
             AND   aidp.invoice_id = apph.invoice_id
             AND   nvl(aidp.reversal_flag, ''N'') <> ''Y'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_prepay_app_dists apad
             WHERE apad.prepay_history_id = apph.prepay_history_id
             AND   apad.invoice_distribution_id = aid.invoice_distribution_id)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = aid.invoice_id
             AND   nvl(aid.parent_reversal_id, aid.invoice_distribution_id) =
                     nvl(d.parent_reversal_id, aid.invoice_distribution_id)
             AND   aid.invoice_distribution_id <> d.invoice_distribution_id
             AND   aid.reversal_flag = ''Y''
             AND   d.reversal_flag = ''Y''
             AND   aid.accounting_event_id = d.accounting_event_id)
     AND   (nvl(aid.reversal_flag, ''N'') <> ''Y'' OR
            EXISTS (
              SELECT 1
              FROM ap_invoice_distributions_all d,
                   ap_prepay_app_dists apad
              WHERE d.invoice_id = aid.invoice_id
              AND   d.invoice_distribution_id = aid.parent_reversal_id
              AND   aid.reversal_flag = ''Y''
              AND   d.reversal_flag = ''Y''
              AND   d.invoice_distribution_id = apad.invoice_distribution_id
              AND   apad.accounting_event_id = apph.related_prepay_app_event_id))
     UNION
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            asu.vendor_name,
            assi.vendor_site_code,
            ai.invoice_date,
            ai.invoice_amount,
            ai.invoice_type_lookup_code,
            apph.transaction_type,
            apph.prepay_history_id,
            apph.accounting_event_id event_id,
            apph.posted_flag,
            apph.related_prepay_app_event_id,
            apph.invoice_adjustment_event_id,
            aid.invoice_distribution_id,
            aid.parent_reversal_id,
            aid.reversal_flag,
            aid.line_type_lookup_code,
            ai.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          ap_prepay_history_all apph,
          ap_invoice_distributions_all aid,
          ap_suppliers asu,
          ap_supplier_sites_all assi
     WHERE ai.invoice_id = invs.invoice_id
     AND   apph.transaction_type = ''PREPAYMENT APPLICATION ADJ''
     AND   apph.invoice_adjustment_event_id = aid.accounting_event_id
     AND   aid.prepay_distribution_id IS NULL
     AND   aid.line_type_lookup_code NOT IN (''AWT'',''PREPAY'')
     AND   aid.reversal_flag = ''Y''
     AND   aid.parent_reversal_id is not NULL
     AND   nvl(aid.base_amount, amount) <> 0
     AND   apph.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_prepay_app_dists apad
             WHERE apad.prepay_history_id = apph.prepay_history_id
             AND   apad.invoice_distribution_id = aid.invoice_distribution_id)
     AND   EXISTS (
             SELECT 1
             FROM ap_invoice_distributions_all aid2,
                  ap_prepay_app_dists apad,
                  ap_prepay_history_all aph
             WHERE aid2.invoice_id = aid.invoice_id
             AND   aid2.invoice_distribution_id = aid.parent_reversal_id
             AND   aph.invoice_id = aid2.invoice_id
             AND   aid2.reversal_flag = ''Y''
             AND   apad.prepay_history_id = aph.prepay_history_id
             AND   aid2.invoice_distribution_id = apad.invoice_distribution_id
             AND   apph.related_prepay_app_event_id = aph.related_prepay_app_event_id
             AND   apad.accounting_event_id = aph.accounting_event_id)'
  );


  add_signature(g_signatures,
    99,
    'INVOICE',
    'ACCOUNTING',
    '18997124',
    '874904.1',
    'ap_AcctgDateOutOfSynch_sel.sql',
    'Out of Sync Accounting dates between the Invoicing transaction tables and the Accounting Events table',
    'Apply the GDF patch following the instructions provided in [874904.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close', 'Sweep'),
    'WITH ai AS (
       SELECT /*+ ordered use_nl(ai) */
              ai.invoice_id,
              ai.invoice_num,
              ai.invoice_date,
              ai.org_id
       FROM (
              ##$$IVIEW$$##
            ) invs,
            ap_invoices_all ai
       WHERE ai.invoice_id = invs.invoice_id
     )
     SELECT /*+ ordered use_nl(aid, xe) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            to_char(aid.accounting_date, ''DD-MON-YY HH24:MI:SS'') accounting_date,
            to_char(xe.event_date, ''DD-MON-YY HH24:MI:SS'') event_date,
            xe.event_id,
            aid.posted_flag,
            aid.invoice_distribution_id,
            null rec_nrec_tax_dist_id,
            null prepay_history_id,
            ''Invoice Distribution'' trx_type
     FROM ai,
          ap_invoice_distributions_all aid,
          xla_events xe
     WHERE aid.accounting_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   ai.invoice_id = aid.invoice_id
     AND   aid.accounting_date <> xe.event_date
     UNION ALL
     SELECT /*+ ordered use_nl(aid, xe) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            to_char(aid.accounting_date, ''DD-MON-YY HH24:MI:SS''),
            to_char(xe.event_date, ''DD-MON-YY HH24:MI:SS''),
            xe.event_id,
            aid.posted_flag,
            aid.invoice_distribution_id,
            null,
            null,
            ''Self Assessed Tax Dist''
     FROM ai,
          ap_self_assessed_tax_dist_all aid,
          xla_events xe
     WHERE aid.accounting_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   ai.invoice_id = aid.invoice_id
     AND   aid.accounting_DATE <> xe.event_date
     UNION ALL
     SELECT /*+ ordered use_nl(aid, zrnd, xe) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            to_char(zrnd.gl_date, ''DD-MON-YY HH24:MI:SS''),
            to_char(xe.event_date, ''DD-MON-YY HH24:MI:SS''),
            xe.event_id,
            aid.posted_flag,
            null,
            zrnd.rec_nrec_tax_dist_id,
            null,
            ''Tax Detail For Inv Dist''
     FROM ai,
          ap_invoice_distributions_all aid,
          zx_rec_nrec_dist zrnd,
          xla_events xe
     WHERE aid.accounting_event_id = xe.event_id
     AND   aid.detail_tax_dist_id = zrnd.rec_nrec_tax_dist_id
     AND   zrnd.application_id = 200
     AND   zrnd.entity_code = ''AP_INVOICES''
     AND   zrnd.event_class_code IN (''STANDARD INVOICES'',
             ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
     AND   zrnd.trx_id = aid.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   xe.application_id = 200
     AND   zrnd.gl_date <> xe.event_date
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            to_char(zrnd.gl_date, ''DD-MON-YY HH24:MI:SS''),
            to_char(xe.event_date, ''DD-MON-YY HH24:MI:SS''),
            xe.event_id,
            aid.posted_flag,
            null,
            zrnd.rec_nrec_tax_dist_id,
            null,
            ''Tax Detail for Self Assessed Tax Dist''
     FROM ai,
          ap_self_assessed_tax_dist_all aid,
          zx_rec_nrec_dist zrnd,
          xla_events xe
     WHERE aid.accounting_event_id = xe.event_id
     AND   aid.detail_tax_dist_id = zrnd.rec_nrec_tax_dist_id
     AND   zrnd.application_id = 200
     AND   zrnd.entity_code = ''AP_INVOICES''
     AND   zrnd.event_class_code IN (''STANDARD INVOICES'',
             ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
     AND   zrnd.trx_id = aid.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   xe.application_id = 200
     AND   zrnd.gl_date <> xe.event_date
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            to_char(apph.accounting_date, ''DD-MON-YY HH24:MI:SS''),
            to_char(xe.event_date, ''DD-MON-YY HH24:MI:SS''),
            xe.event_id,
            apph.posted_flag,
            null,
            null,
            apph.prepay_history_id,
            ''Prepay History''
     FROM ai,
          ap_prepay_history_all apph,
          xla_events xe
     WHERE apph.accounting_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   ai.invoice_id = apph.invoice_id
     AND   apph.accounting_date <> xe.event_date'
  );


  add_signature(g_signatures,
    100,
    'INVOICE',
    'ACCOUNTING',
    '18997150',
    '875012.1',
    'ap_unacct_trx_closed_prd_sel.sql',
    'Unaccounted accounting events having event dates in closed periods.',
    'Apply the GDF patch following the instructions provided in [875012.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close'),
    'SELECT /*+ ordered use_nl(ai, xte, xe) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            xe.event_id,
            xe.event_type_code event_type,
            xe.event_date,
            xte.entity_code,
            xte.ledger_id,
            xte.source_id_int_1 transaction_id,
            xte.transaction_number,
            xte.Security_Id_Int_1 transaction_org_id,
            ''Run fix script'' sweep_to_date
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_events xe,
          ap_system_parameters_all asp,
          gl_period_statuses gps
     WHERE xe.application_id = 200
     AND   xte.application_id = 200
     AND   xe.entity_id = xte.entity_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.ledger_id = ai.set_of_books_id
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   xe.event_status_code IN (''I'',''U'')
     AND   xe.process_status_code IN (''I'',''U'',''R'')
     AND   xte.security_id_int_1 = asp.org_id
     AND   gps.application_id = 200
     AND   gps.set_of_books_id = asp.set_of_books_id
     AND   trunc(xe.event_date) between gps.start_date and gps.end_date
     AND   gps.closing_status not in (''O'',''F'')
     AND   nvl(adjustment_period_flag, ''N'') = ''N''
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    101,
    'INVOICE',
    'ACCOUNTING',
    '17487602',
    '1291521.1',
    'ap_orphan_xdl_s.sql',
    'Records in XLA_Distribution_Links which do not tie back to a valid record in ap_invoice_distributions_all or ap_self_assessed_tax_dists_all tables ',
    'Apply the GDF patch following the instructions provided in [1291521.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure', 'Accounting Incorrect'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ leading(invs) use_nl(ai, xte, xe, xah, xll, xdl) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.invoice_amount,
            ai.invoice_currency_code,
            ai.invoice_date,
            xe.event_id,
            xe.event_type_code,
            xe.event_status_code,
            xe.process_status_code,
            xah.ae_header_id,
            xah.gl_transfer_status_code,
            decode(xah.balance_type_code,
              ''A'', ''Actual'',
              ''E'', ''Encumbrance'') balance_type,
            xe.event_date,
            ai.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_events xe,
          xla_ae_headers xah,
          xla_ae_lines xll,
          xla_distribution_links xdl
     WHERE xe.application_id = 200
     AND   xdl.application_id = 200
     AND   xll.application_id = 200
     AND   xah.application_id = 200
     AND   xte.application_id = 200
     AND   xe.event_status_code = ''P''
     AND   nvl(xe.budgetary_control_flag, ''N'') = ''N''
     AND   xe.event_type_code NOT IN (''PREPAYMENT APPLIED'',
                ''PREPAYMENT UNAPPLIED'',
                ''PREPAYMENT APPLICATION ADJ'')
     AND   xe.event_id = xah.event_id
     AND   xe.entity_id = xte.entity_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.ledger_id = ai.set_of_books_id
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   xah.ae_header_id = xll.ae_header_id
     AND   xah.balance_type_code = ''A''
     AND   (xah.upg_batch_id is null OR
            xah.upg_batch_id = -9999)
     AND   xll.accounting_class_code = ''LIABILITY''
     AND   xdl.ae_header_id = xll.ae_header_id
     AND   xdl.ae_line_num = xll.ae_line_num
     AND   xdl.source_distribution_type LIKE ''AP_INV_DIST''
     AND   xe.event_type_code <> ''MANUAL''
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all AID
             WHERE aid.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''inv dist'' FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_distribution_id = xdl.source_distribution_id_num_1
             AND   aid.accounting_event_id = xe.event_id)
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ leading(invs) use_nl(ai, xte, xe, xah, xll, xdl) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.invoice_amount,
            ai.invoice_currency_code,
            ai.invoice_date,
            xe.event_id,
            xe.event_type_code,
            xe.event_status_code,
            xe.process_status_code,
            xah.ae_header_id,
            xah.gl_transfer_status_code,
            decode(xah.balance_type_code,
              ''A'', ''Actual'',
              ''E'', ''Encumbrance'') balance_type,
            xe.event_date,
            ai.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_events xe,
          xla_ae_headers xah,
          xla_ae_lines xll,
          xla_distribution_links xdl
     WHERE xe.application_id = 200
     AND   xdl.application_id = 200
     AND   xll.application_id = 200
     AND   xah.application_id = 200
     AND   xte.application_id = 200
     AND   xe.event_status_code = ''P''
     AND   nvl(xe.budgetary_control_flag, ''N'') = ''N''
     AND   xe.event_type_code NOT IN (''PREPAYMENT APPLIED'',
             ''PREPAYMENT UNAPPLIED'', ''PREPAYMENT APPLICATION ADJ'')
     AND   xe.event_id = xah.event_id
     AND   xe.entity_id = xte.entity_id
     AND   xte.ledger_id = ai.set_of_books_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   xah.ae_header_id = xll.ae_header_id
     AND   xah.balance_type_code = ''A''
     AND   (xah.upg_batch_id is null OR xah.upg_batch_id = -9999)
     AND   xll.accounting_class_code = ''SELF_ASSESSED_TAX_LIAB''
     AND   xdl.ae_header_id = xll.ae_header_id
     AND   xdl.ae_line_num = xll.ae_line_num
     AND   xdl.source_distribution_type LIKE ''AP_INV_DIST''
     AND   xe.event_type_code <> ''MANUAL''
     AND   EXISTS (
             SELECT  1 FROM ap_self_assessed_tax_dist_all aid
            WHERE aid.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''inv dist'' FROM ap_self_assessed_tax_dist_all aid
             WHERE aid.invoice_distribution_id = xdl.source_distribution_id_num_1
             AND   aid.accounting_event_id = xe.event_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    102,
    'INVOICE',
    'ACCOUNTING',
    '17505148',
    '788135.1',
    'ap_Orphan_Events_Sel.sql',
    'Orphan Accounting Events, which have records in the XLA_Events table but are not stamped on any Transaction tables',
    'Apply the GDF patch following the instructions provided in [788135.1]',
    'Y',
    'Y',
    impact_area_tbl('Period Close', 'Trial Balance'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered no_unnest use_nl(ai xte xe xah) */
            ''EVENT'' orphan_type,
            ''N'' processed_flag,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            xe.event_id,
            xe.event_status_code,
            xe.process_status_code,
            xah.ae_header_id,
            xte.source_id_int_1 source_id,
            xte.entity_code source_table,
            xe.event_date,
            xe.entity_id,
            xe.event_type_code,
            xe.budgetary_control_flag,
            xe.upg_batch_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_events xe,
          xla_ae_headers xah
     WHERE xe.application_id = xte.application_id
     AND   xe.event_status_code <> ''P''
     AND   xe.event_id = xah.event_id (+)
     AND   xah.application_id(+) = xe.application_id
     AND   xte.entity_id = xe.entity_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.ledger_id = ai.set_of_books_id
     AND   NOT EXISTS (
             SELECT ''No Invoice rows exist for this event''
             FROM ap_invoice_distributions_all aid
             WHERE aid.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No Distributions exist for the bc_event_id''
             FROM ap_invoice_distributions_all aid
             WHERE aid.bc_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No payment rows exist for this event''
             FROM ap_invoice_payments_all aip
             WHERE aip.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No payment history rows exists for this event''
             FROM ap_payment_history_all aph
             WHERE aph.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No self assessed tax rows exists for this event''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No self assessed tax rows exists for the bc_event_id''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.bc_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepay history rows exists for this event''
             FROM ap_prepay_history_all aprh
             WHERE aprh.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepayment history rows exists for the bc_event_id''
             FROM ap_prepay_history_all apph
             WHERE apph.bc_event_id = xe.event_id)
     AND   xe.event_type_code NOT IN
             (''MANUAL'', ''REVERSAL'',''PREPAYMENT APPLICATION ADJ'')
     AND   (xe.upg_batch_id is NULL OR
            xe.upg_batch_id = -9999)
     AND   NOT EXISTS (
             SELECT ''No final accounted headers''
             FROM xla_ae_headers xah
             WHERE xah.event_id = xe.event_id
             AND   xah.application_id = 200
             AND   xah.entity_id = xte.entity_id
             AND   xah.accounting_entry_status_code = ''F''
             AND   xah.gl_transfer_status_code = ''Y'')
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered no_unnest use_nl(ai xte xah) */
            ''HEADER'',
            ''N'',
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            xah.event_id,
            null,
            null,
            xah.ae_header_id,
            xte.source_id_int_1,
            xte.entity_code,
            xah.accounting_date,
            xah.entity_id,
            xah.event_type_code,
            null,
            xah.upg_batch_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah
     WHERE xah.application_id = xte.application_id
     AND   xte.entity_id = xah.entity_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.ledger_id = ai.set_of_books_id
     AND   NOT EXISTS (
             SELECT ''No Invoice rows exist for this event''
             FROM ap_invoice_distributions_all aid
             WHERE aid.accounting_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No Distributions exist for the bc_event_id''
             FROM ap_invoice_distributions_all aid
             WHERE aid.bc_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No payment rows exist for this event''
             FROM ap_invoice_payments_all aip
             WHERE aip.accounting_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No payment history rows exists for this event''
             FROM ap_payment_history_all aph
             WHERE aph.accounting_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No self assessed tax rows exists for this event''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.accounting_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No self assessed tax rows exists for the bc_event_id''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.bc_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepay history rows exists for this event''
             FROM ap_prepay_history_all aprh
             WHERE aprh.accounting_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepayment history rows exists for the bc_event_id''
             FROM ap_prepay_history_all apph
             WHERE apph.bc_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT '' Event for this header does not exist''
             FROM xla_events xe
             WHERE xe.application_id = xah.application_id
             AND   xe.event_id = xah.event_id)
     AND   xah.event_type_code NOT IN
             (''MANUAL'', ''REVERSAL'', ''PREPAYMENT APPLICATION ADJ'')
     AND   (xah.upg_batch_id is NULL OR
            xah.upg_batch_id = -9999)
     AND   nvl(xah.gl_transfer_status_code, ''X'') <> ''Y''
     AND   nvl(xah.accounting_entry_status_code, ''X'') <> ''F''
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT /*+ ordered no_unnest use_nl(ai xte xe xah) */
            ''EVENT'' orphan_type,
            ''Y'' processed_flag,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            xe.event_id,
            xe.event_status_code,
            xe.process_status_code,
            xah.ae_header_id,
            xte.source_id_int_1 source_id,
            xte.entity_code source_table,
            xe.event_date,
            xe.entity_id,
            xe.event_type_code,
            xe.budgetary_control_flag,
            xe.upg_batch_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_events xe,
          xla_ae_headers xah
     WHERE xe.application_id = 200
     AND   xe.event_status_code = ''P''
     AND   xah.event_id = xe.event_id
     AND   xah.application_id = 200
     AND   xte.entity_id = xe.entity_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.ledger_id = ai.set_of_books_id
     AND   NOT EXISTS (
             SELECT ''No Invoice rows exist for this event''
             FROM ap_invoice_distributions_all aid
             WHERE aid.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No Distributions exist for the bc_event_id''
             FROM ap_invoice_distributions_all aid
             WHERE aid.bc_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No payment rows exist for this event''
             FROM ap_invoice_payments_all aip
             WHERE aip.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No payment history rows exists for this event''
             FROM ap_payment_history_all aph
             WHERE aph.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No self assessed tax rows exists for this event''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No self assessed tax rows exists for the bc_event_id''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.bc_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepay history rows exists for this event''
             FROM ap_prepay_history_all aprh
             WHERE aprh.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepayment history rows exists for the bc_event_id''
             FROM ap_prepay_history_all apph
             WHERE apph.bc_event_id = xe.event_id)
     AND   xe.event_type_code NOT IN
             (''MANUAL'', ''REVERSAL'', ''PREPAYMENT APPLICATION ADJ'')
     AND   (xe.upg_batch_id is NULL OR
            xe.upg_batch_id = -9999)
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    103,
    'INVOICE',
    'ACCOUNTING',
    '18997188',
    '742429.1',
    'ap_inv_event_status_code_sel.sql',
    'Accounting Events marked as Incomplete in the Accounting events table even though the Invoices related to the event do not contain any Non-Postable holds',
    'Apply the GDF patch following the instructions provided in [742429.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            xe.event_id,
            xe.event_date,
            xe.event_status_code,
            xe.process_status_code,
            xe.budgetary_control_flag,
            xte.entity_code,
            xte.source_id_int_1 source_id,
            xte.ledger_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_events xe
     WHERE ai.invoice_id = invs.invoice_id
     AND   xte.entity_id = xe.entity_id
     AND   xte.application_id = 200
     AND   xe.application_id = 200
     AND   xe.event_status_code = ''I''
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.ledger_id = ai.set_of_books_id
     AND   NOT EXISTS (
             SELECT 1 FROM ap_holds_all ah
             WHERE ah.invoice_id = xte.source_id_int_1
             AND   xte.entity_code = ''AP_INVOICES''
             AND   ah.release_lookup_code is null)
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_invoice_distributions_all aid,
                  financials_system_params_all fsp
             WHERE aid.invoice_id = nvl(xte.source_id_int_1, -99)
             AND   xte.entity_code = ''AP_INVOICES''
             AND   xte.ledger_id = aid.set_of_books_id
             AND   aid.org_id = fsp.org_id
             AND   aid.set_of_books_id = fsp.set_of_books_id
             AND   ((nvl(fsp.purch_encumbrance_flag,''N'') = ''N'' AND
                     aid.match_status_flag NOT IN (''T'',''A'')) OR
                    (nvl(fsp.purch_encumbrance_flag,''N'') = ''Y'' AND
                     aid.match_Status_flag != ''A'')))
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id'
  );


  add_signature(g_signatures,
    104,
    'INVOICE',
    'ACCOUNTING',
    '18997220',
    '1071876.1',
    'ap_incorrect_posted_flag_sel.sql Invoices',
    'Out of Sync Posting status between the Accounting events in the Events tables and the transaction tables ',
    'Apply the GDF patch following the instructions provided in [1071876.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close', 'Sweep'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            ''ap_invoice_distributions_all'' trx_table,
            aid.invoice_distribution_id trx_id,
            aid.posted_flag,
            aid.accrual_posted_flag,
            aid.cash_posted_flag,
            xe.event_id,
            aid.set_of_books_id ledger_id
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          xla_events xe,
          gl_ledgers gl
     WHERE (aid.posted_flag = ''N'' OR
            (aid.accrual_posted_flag = ''N'' AND
             nvl(gl.sla_ledger_cash_basis_flag, ''N'') <> ''Y''))
     AND   ai.set_of_books_id = gl.ledger_id
     AND   xe.process_status_code = ''P''
     AND   xe.event_status_code   IN (''N'',''P'')
     AND   ai.invoice_id = aid.invoice_id
     AND   xe.event_id = aid.accounting_event_id
     AND   xe.application_id = 200
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            astd.invoice_line_number,
            astd.distribution_line_number,
            ''ap_self_assessed_tax_dist_all'' trx_table,
            astd.invoice_distribution_id trx_id,
            astd.posted_flag,
            astd.accrual_posted_flag,
            astd.cash_posted_flag,
            xe.event_id,
            astd.set_of_books_id ledger_id
     FROM invs,
          ap_invoices_all ai,
          ap_self_assessed_tax_dist_all astd,
          xla_events xe,
          gl_ledgers gl
     WHERE (astd.posted_flag = ''N'' OR
            (astd.accrual_posted_flag = ''N'' AND
             nvl(gl.sla_ledger_cash_basis_flag, ''N'') <> ''Y''))
     AND   ai.set_of_books_id = gl.ledger_id
     AND   xe.process_status_code = ''P''
     AND   xe.event_status_code   IN (''N'',''P'')
     AND   ai.invoice_id = astd.invoice_id
     AND   xe.event_id = astd.accounting_event_id
     AND   xe.application_id = 200
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aph.prepay_line_num,
            NULL,
            ''ap_prepay_history_all'' trx_table,
            aph.prepay_history_id trx_id,
            aph.posted_flag,
            null,
            null,
            xe.event_id,
            xte.ledger_id ledger_id
     FROM invs,
          ap_invoices_all ai,
          ap_prepay_history_all aph,
          xla_events xe,
          xla_transaction_entities_upg xte
     WHERE posted_flag = ''N''
     AND   process_status_code = ''P''
     AND   xe.event_status_code   IN (''N'',''P'')
     AND   ai.invoice_id = aph.prepay_invoice_id
     AND   xte.security_id_int_1 = aph.org_id
     AND   xe.event_id = aph.accounting_event_id
     AND   xe.entity_id = xte.entity_id
     AND   xe.application_id = xte.application_id
     AND   xte.application_id = 200
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    105,
    'INVOICE',
    'ACCOUNTING',
    '17956236',
    '1088872.1',
    'ap_posted_flag_out_sync_sel.sql',
    'Posted Flag stuck in status ''S'' on transaction tables',
    'Apply the GDF patch following the instructions provided in [1088872.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Sweep'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''INV DISTRIBUTION'' trx_type,
            ai.invoice_id,
            ai.invoice_num,
            aid.org_id,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.distribution_line_number,
            null prepay_history_id,
            aid.posted_flag,
            xe.event_status_code,
            xe.event_id,
            decode(xe.event_status_code, ''P'',''Y'',''N'') events_posted_flag
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          xla_events xe
     WHERE aid.posted_flag = ''S''
     AND   xe.application_id = 200
     AND   xe.event_id = aid.accounting_event_id
     AND   ai.invoice_id = aid.invoice_id
     AND   ai.invoice_id = invs.invoice_id
     UNION
     SELECT ''PREPAY HISTORY'',
            ai.invoice_id,
            ai.invoice_num,
            aph.org_id,
            null,
            null,
            null,
            aph.prepay_history_id,
            aph.posted_flag,
            xe.event_status_code,
            xe.event_id ,
            decode(xe.event_status_code, ''P'',''Y'',''N'') events_posted_flag
     FROM invs,
          ap_invoices_all ai,
          ap_prepay_history_all aph,
          xla_events xe
     WHERE ai.invoice_id = invs.invoice_id
     AND   aph.posted_flag = ''S''
     AND   xe.application_id = 200
     AND   xe.event_id = aph.accounting_event_id
     AND   ai.invoice_id = aph.invoice_id'
  );


  add_signature(g_signatures,
    106,
    'INVOICE',
    'ACCOUNTING',
    '17879448',
    '1315907.1',
    'ApAppAccUnappNoActionSel.sql',
    'Prepayment unapplication event in a NO Action status, even though the Prepayment Application event is Accounted',
    'Apply the GDF patch following the instructions provided in [1315907.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT ''Primary Prepay Events'' category,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.invoice_type_lookup_code,
            aidp.invoice_line_number prepay_app_line_num,
            aidp.distribution_line_number prepay_app_dist_num,
            aidp.invoice_distribution_id prepay_app_distribution_id,
            aidp.line_type_lookup_code prepay_app_dist_type,
            aidp.amount prepay_app_amount,
            aidp.base_amount prepay_app_base_amount,
            aidp.posted_flag prepay_app_posted_flag,
            aidp.accounting_date prepay_app_accounting_date,
            aidp.accounting_event_id prepay_app_event_id,
            aidp.accounting_event_id event_id,
            xep.event_status_code prepay_app_event_status,
            xep.process_status_code prepay_app_process_status,
            aidu.distribution_line_number prepay_unapp_dist_num,
            aidu.invoice_distribution_id prepay_unapp_distribution_id,
            aidu.posted_flag prepay_unapp_posted_flag,
            aidu.accounting_date prepay_unapp_accounting_date,
            aidu.accounting_event_id prepay_unapp_event_id,
            xeu.event_status_code prepay_unapp_event_status,
            xeu.process_status_code prepay_unapp_process_status,
            aidp.set_of_books_id
     FROM ap_invoice_distributions_all aidp,
          ap_invoice_distributions_all aidu,
          ap_invoices_all ai,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          xla_events xep,
          xla_events xeu,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE aidp.invoice_id = aidu.invoice_id
     AND   aidp.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   aidp.invoice_distribution_id = aidu.parent_reversal_id
     AND   aidp.prepay_distribution_id is not null
     AND   aidu.prepay_distribution_id is not null
     AND   aidp.posted_flag = ''Y''
     AND   aidu.posted_flag = ''Y''
     AND   aidp.accounting_event_id = xep.event_id
     AND   xep.application_id = 200
     AND   aidu.accounting_event_id = xeu.event_id
     AND   xeu.application_id = 200
     AND   xep.event_status_code = ''P''
     AND   xep.process_status_code = ''P''
     AND   xep.upg_batch_id is null
     AND   xeu.event_status_code = ''N''
     AND   xeu.process_status_code = ''P''
     AND   xeu.upg_batch_id is null
     AND   xep.event_type_code = ''PREPAYMENT APPLIED''
     AND   xeu.event_type_code = ''PREPAYMENT UNAPPLIED''
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    107,
    'INVOICE',
    'ACCOUNTING',
    '19367714',
    '1321370.1',
    'ap_aplb_missing_s.sql',
    'Missing records in AP_Liability_Balance',
    'Apply the GDF patch following the instructions provided in [1321370.1]',
    'Y',
    'N',
    impact_area_tbl('Trial Balance'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     ),
     ae_lines_v AS (
     SELECT /*+ leading(invs) use_nl(ael) */
            ael.ae_line_id,
            ael.ae_header_id,
            ael.ae_line_number,
            ael.ae_line_type_code,
            ael.code_combination_id,
            ael.currency_code,
            ael.entered_dr,
            ael.entered_cr,
            ael.accounted_dr,
            ael.accounted_cr,
            ael.description,
            ael.gl_sl_link_id,
            ael.reference2
     FROM invs,
          ap_ae_lines_all ael
     WHERE ael.source_table IN (''AP_INVOICES'',''AP_INVOICES_ALL'')
     AND   ael.source_id = invs.invoice_id
     UNION
     SELECT /*+ ordered use_nl(aip, ael) */
            ael.ae_line_id,
            ael.ae_header_id,
            ael.ae_line_number,
            ael.ae_line_type_code,
            ael.code_combination_id,
            ael.currency_code,
            ael.entered_dr,
            ael.entered_cr,
            ael.accounted_dr,
            ael.accounted_cr,
            ael.description,
            ael.gl_sl_link_id,
            ael.reference2
     FROM invs,
          ap_invoice_payments_all aip,
          ap_ae_lines_all ael
     WHERE aip.invoice_id = invs.invoice_id
     AND   ael.source_table = ''AP_INVOICE_PAYMENTS''
     AND   ael.source_id = aip.invoice_payment_id
     UNION
     SELECT /*+ ordered use_nl(aid, ael) */
            ael.ae_line_id,
            ael.ae_header_id,
            ael.ae_line_number,
            ael.ae_line_type_code,
            ael.code_combination_id,
            ael.currency_code,
            ael.entered_dr,
            ael.entered_cr,
            ael.accounted_dr,
            ael.accounted_cr,
            ael.description,
            ael.gl_sl_link_id,
            ael.reference2
     FROM invs,
          ap_invoice_distributions_all aid,
          ap_ae_lines_all ael
     WHERE aid.invoice_id = invs.invoice_id
     AND   ael.source_table = ''AP_INVOICE_DISTRIBUTIONS''
     AND   ael.source_id = aid.invoice_distribution_id
     )
     SELECT /*+ leading(ael) use_nl(ai, aeh, aae) */
            ''Missing Records APLB'' category,
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id org_id,
            ai.invoice_date,
            ai.invoice_type_lookup_code,
            ai.invoice_amount,
            ai.base_amount,
            aeh.accounting_event_id,
            aae.event_type_code,
            aeh.ae_header_id,
            aeh.gl_transfer_flag,
            ael.ae_line_id,
            ael.ae_line_number,
            ael.ae_line_type_code,
            ael.code_combination_id,
            ael.currency_code,
            ael.entered_dr,
            ael.entered_cr,
            ael.accounted_dr,
            ael.accounted_cr,
            ael.description,
            ael.gl_sl_link_id,
            aeh.set_of_books_id
     FROM ae_lines_v ael,
          ap_invoices_all ai,
          ap_ae_headers_all aeh,
          ap_accounting_events_all aae
     WHERE aae.accounting_event_id = aeh.accounting_event_id
     AND   aeh.ae_header_id = ael.ae_header_id
     AND   ael.ae_line_type_code = ''LIABILITY''
     AND   to_number(ael.reference2) = ai.invoice_id
     AND   aeh.gl_transfer_flag = ''Y''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_liability_balance aplb1
             WHERE aplb1.ae_line_id = ael.ae_line_id
             AND   aplb1.ae_header_id = ael.ae_header_id
             AND   aplb1.set_of_books_id = aeh.set_of_books_id
             AND   aplb1.code_combination_id = ael.code_combination_id
             AND   aplb1.invoice_id = ai.invoice_id)
     AND   NOT EXISTS (
             SELECT 1 FROM xla_events xe
             WHERE xe.application_id = 200
             AND   xe.event_id = aeh.accounting_event_id
             AND   xe.upg_batch_id = -9999)
     AND   EXISTS (
             SELECT /*+ ordered use_nl(tiv, xte, hzp, hzps, as1) */
                    tiv.invoice_id
             FROM ap_invoices_all tiv,
                  xla_transaction_entities_upg xte,
                  hz_parties hzp,
                  hz_party_sites hzps,
                  ap_suppliers as1
             WHERE xte.entity_code = ''AP_INVOICES''
             AND   xte.ledger_id = ai.set_of_books_id
             AND   xte.application_id = 200
             AND   NVL(xte.source_id_int_1,-99) = tiv.invoice_id
             AND   tiv.party_id = hzp.party_id
             AND   tiv.vendor_id = as1.vendor_id(+)
             AND   ai.party_site_id = hzps.party_site_id(+)
             AND   ((as1.employee_id is null AND
                     hzps.party_site_id is not null) OR
                    (as1.employee_id is not null))
             AND   (tiv.payment_status_flag = ''Y'' OR
                    tiv.cancelled_date is not null)
             AND  tiv.invoice_id = ai.invoice_id)
     UNION ALL
     SELECT /*+ leading(ael) use_nl(ai, aeh, aae) */
            ''Lines Created in 11i, Transferred to GL in R12'',
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_type_lookup_code,
            ai.invoice_amount,
            ai.base_amount,
            aeh.accounting_event_id,
            aae.event_type_code,
            aeh.ae_header_id,
            aeh.gl_transfer_flag,
            ael.ae_line_id,
            ael.ae_line_number,
            ael.ae_line_type_code,
            ael.code_combination_id,
            ael.currency_code,
            ael.entered_dr,
            ael.entered_cr,
            ael.accounted_dr,
            ael.accounted_cr,
            ael.description,
            ael.gl_sl_link_id,
            aeh.set_of_books_id
     FROM ae_lines_v ael,
          ap_invoices_all ai,
          ap_ae_headers_all aeh,
          ap_accounting_events_all aae
     WHERE aae.accounting_event_id = aeh.accounting_event_id
     AND   aeh.ae_header_id = ael.ae_header_id
     AND   ael.ae_line_type_code = ''LIABILITY''
     AND   to_number(ael.reference2) = ai.invoice_id
     AND   nvl(aeh.gl_transfer_flag, ''N'') <> ''Y''
     AND   EXISTS (
             SELECT 1 FROM xla_ae_headers xah
             WHERE xah.application_id = 200
             AND   xah.upg_batch_id is not null
             AND   xah.gl_transfer_status_code = ''Y''
             AND   xah.event_id = aeh.accounting_event_id
             AND   xah.Completion_Acct_Seq_Value = aeh.ae_header_id
             AND   xah.group_id is not null)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_liability_balance aplb1
             WHERE aplb1.ae_line_id = ael.ae_line_id
             AND   aplb1.ae_header_id = ael.ae_header_id
             AND   aplb1.set_of_books_id = aeh.set_of_books_id
             AND   aplb1.code_combination_id = ael.code_combination_id
             AND   aplb1.invoice_id = ai.invoice_id)
     AND   NOT EXISTS (
             SELECT 1 FROM xla_events xe
             WHERE xe.application_id = 200
             AND   xe.event_id = aeh.accounting_event_id
             AND   xe.upg_batch_id = -9999)
     UNION ALL
     SELECT /*+ leading(ael) use_nl(ai, aeh, aae) */
            ''Non-Fully Paid Non-Canceled Invoices'',
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_type_lookup_code,
            ai.invoice_amount,
            ai.base_amount,
            aeh.accounting_event_id,
            aae.event_type_code,
            aeh.ae_header_id,
            aeh.gl_transfer_flag,
            ael.ae_line_id,
            ael.ae_line_number,
            ael.ae_line_type_code,
            ael.code_combination_id,
            ael.currency_code,
            ael.entered_dr,
            ael.entered_cr,
            ael.accounted_dr,
            ael.accounted_cr,
            ael.description,
            ael.gl_sl_link_id,
            aeh.set_of_books_id
     FROM ae_lines_v ael,
          ap_invoices_all ai,
          ap_ae_headers_all aeh,
          ap_accounting_events_all aae
     WHERE aae.accounting_event_id = aeh.accounting_event_id
     AND   aeh.ae_header_id = ael.ae_header_id
     AND   ael.ae_line_type_code = ''LIABILITY''
     AND   to_number(ael.reference2) = ai.invoice_id
     AND   aeh.gl_transfer_flag = ''Y''
     AND   ai.cancelled_date IS NULL
     AND   ai.payment_status_flag <> ''Y''
     AND   ai.invoice_amount <> 0
     AND   NOT EXISTS (
             SELECT 1 FROM ap_liability_balance aplb1
             WHERE aplb1.ae_line_id = ael.ae_line_id
             AND   aplb1.ae_header_id = ael.ae_header_id
             AND   aplb1.set_of_books_id = aeh.set_of_books_id
             AND   aplb1.code_combination_id = ael.code_combination_id
             AND   aplb1.invoice_id = ai.invoice_id)
     AND   NOT EXISTS (
             SELECT 1 FROM xla_events xe
             WHERE xe.application_id = 200
             AND   xe.event_id = aeh.accounting_event_id
             AND   xe.upg_batch_id = -9999)'
  );


  add_signature(g_signatures,
    108,
    'INVOICE',
    'ACCOUNTING',
    '17480656',
    '1335562.1',
    'ap_prepay_incorr_posted_s.sql check 1',
    'Accrual Posted flag and Cash Posted flag as ''N'' on AP distributions for Prepayment Application and Unapplication dists even though the corresponding events have been accounted ',
    'Apply the GDF patch following the instructions provided in [1335562.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+ ordered use_nl(ai aid xe) */
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            ai.invoice_type_lookup_code,
            ai.invoice_date,
            ai.invoice_amount,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aid.match_status_flag,
            aid.accounting_event_id,
            aid.posted_flag,
            aid.accrual_posted_flag,
            aid.cash_posted_flag,
            xe.event_status_code,
            xe.process_status_code,
            gl.sla_ledger_cash_basis_flag,
            aid.set_of_books_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          gl_ledgers gl,
          xla_events xe
     WHERE aid.invoice_id = ai.invoice_id
     AND   ai.set_of_books_id = gl.ledger_id
     AND   aid.accounting_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   xe.event_type_code IN (''PREPAYMENT APPLIED'',
             ''PREPAYMENT UNAPPLIED'')
     AND   aid.prepay_distribution_id is not null
     AND   xe.event_status_code IN (''N'',''P'')
     AND   xe.process_status_code = ''P''
     AND   (nvl(aid.posted_flag, ''N'') <> ''Y'' OR
            (gl.sla_ledger_cash_basis_flag = ''Y'' AND
             nvl(aid.cash_posted_flag, ''N'') <> ''Y'') OR
            (gl.sla_ledger_cash_basis_flag = ''N'' AND
             nvl(aid.accrual_posted_flag, ''N'') <> ''Y''))
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    109,
    'INVOICE',
    'ACCOUNTING',
    '17480656',
    '1335562.1',
    'ap_prepay_incorr_posted_s.sql check 2',
    'Accrual Posted flag and Cash Posted flag as ''N'' on AP distributions for Prepayment Application and Unapplication dists even though the corresponding events have been accounted ',
    'Apply the GDF patch following the instructions provided in [1335562.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_type_lookup_code,
            ai.invoice_date,
            ai.invoice_amount,
            apph.invoice_line_number,
            apph.transaction_type,
            apph.prepay_history_id,
            apph.prepay_invoice_id,
            apph.prepay_line_num,
            apph.accounting_event_id,
            apph.posted_flag,
            xe.event_status_code,
            xe.process_status_code,
            gl.sla_ledger_cash_basis_flag,
            ai.set_of_books_id
     FROM ap_prepay_history_all apph,
         ap_invoices_all ai,
         ap_suppliers asu,
         ap_supplier_sites_all assi,
         gl_ledgers gl,
         xla_events xe,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE apph.invoice_id = ai.invoice_id
     AND   ai.set_of_books_id = gl.ledger_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   apph.accounting_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   xe.event_type_code IN (''PREPAYMENT APPLIED'',
             ''PREPAYMENT UNAPPLIED'',''PREPAYMENT APPLICATION ADJ'')
     AND   xe.event_status_code IN (''N'',''P'')
     AND   xe.process_status_code = ''P''
     AND   nvl(apph.posted_flag, ''N'') <> ''Y''
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    110,
    'INVOICE',
    'ACCOUNTING',
    '19327581',
    '1349591.1',
    'ApPrepayIncorrAcctgSel.sql',
    'Prepayment applications incorrectly accounted ',
    'Apply the GDF patch following the instructions provided in [1349591.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ ordered use_nl(ai xte xe xah apph) */
            ''Primary Prepay Events'' category,
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            xe.event_id,
            xe.event_date,
            xe.event_type_code,
            xe.event_status_code,
            xe.process_status_code,
            xah.ledger_id,
            xe.budgetary_control_flag,
            apph.transaction_type,
            apph.prepay_history_id,
            apph.invoice_line_number,
            apph.prepay_invoice_id,
            apph.prepay_line_num,
            apph.related_prepay_app_event_id,
            apph.bc_event_id,
            apph.posted_flag,
            ai.set_of_books_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_events xe,
          xla_ae_headers xah,
          ap_prepay_history_all apph
     WHERE xe.application_id = 200
     AND   xah.application_id = 200
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xe.entity_id = xte.entity_id
     AND   xe.event_id = xah.event_id
     AND   xe.event_type_code IN (''PREPAYMENT APPLIED'',''PREPAYMENT UNAPPLIED'')
     AND   nvl(xe.budgetary_control_flag,''N'') = ''N''
     AND   abs(ap_gdf_fcns.net_pp_app(xe.event_id) -
             ap_gdf_fcns.net_pp_acct(xe.event_id, xah.ledger_id) -
             ap_gdf_fcns.net_adj_acct(xe.event_id, xah.ledger_id)) > .01
     AND   xe.event_status_code = ''P''
     AND   xah.upg_batch_id is null
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   xte.ledger_id = ai.set_of_books_id
     AND   xah.event_id = apph.accounting_event_id
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_prepay_history_all apph2
             WHERE apph2.invoice_id = ai.invoice_id
             AND   apph2.related_prepay_app_event_id = xe.event_id
             AND   apph2.transaction_type = ''PREPAYMENT APPLICATION ADJ''
             AND   apph2.posted_flag <> ''Y'')
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    111,
    'INVOICE',
    'ACCOUNTING',
    '18022957',
    '1349026.1',
    'ap_psa_cleanup_1_s.sql',
    'Reversal invoice distributions which still have unprocessed budetary control event stamped on them',
    'Apply the GDF patch following the instructions provided in [1349026.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Holds'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''AP_INVOICE_DISTRIBUTIONS_ALL'' table_name,
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_line_number      line_number,
            aid.invoice_distribution_id  parent_inv_dist_id,
            aid.distribution_line_number parent_dist_line_num,
            aid.line_type_lookup_code    parent_line_type,
            aid.amount                   parent_amount,
            aid.base_amount              parent_base_amount,
            aid.match_status_flag        parent_match_status_flag,
            aid.bc_event_id              parent_bc_event_id,
            aid.accounting_event_id      parent_acct_event_id,
            xe.event_status_code         parent_event_status,
            aid.encumbered_flag          parent_encumbered_flag,
            aid.posted_flag              parent_posted_flag,
            aidr.invoice_distribution_id   reversal_inv_dist_id,
            aidr.distribution_line_number  reversal_dist_line_num,
            aidr.line_type_lookup_code     reversal_line_type,
            aidr.amount                    reversal_amount,
            aidr.base_amount               reversal_base_amount,
            aidr.match_status_flag         reversal_match_status_flag,
            aidr.bc_event_id               reversal_bc_event_id,
            aidr.accounting_event_id       reversal_acct_event_id,
            xer.event_status_code          reversal_event_status,
            aidr.encumbered_flag           reversal_encumbered_flag,
            aidr.posted_flag               reversal_posted_flag
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_invoice_distributions_all aidr,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          financials_system_params_all fsp,
          xla_events xe,
          xla_events xer
     WHERE aid.bc_event_id = xe.event_id(+)
     AND   aidr.bc_event_id = xer.event_id(+)
     AND   xe.application_id(+) = 200
     AND   xer.application_id(+) = 200
     AND   xe.budgetary_control_flag(+) = ''Y''
     AND   xer.budgetary_control_flag(+) = ''Y''
     AND   aid.invoice_distribution_id = aidr.parent_reversal_id
     AND   nvl(aid.historical_flag, ''N'') <> ''Y''
     AND   nvl(aidr.historical_flag, ''N'') <> ''Y''
     AND   nvl(aid.reversal_flag, ''N'') = ''Y''
     AND   nvl(aidr.reversal_flag, ''N'') = ''Y''
     AND   aid.invoice_id = aidr.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   aid.org_id = fsp.org_id
     AND   fsp.purch_encumbrance_flag = ''Y''
     AND   aid.invoice_line_number = aidr.invoice_line_number
     AND   (nvl(xe.event_id, -99) = -99 OR
            xe.event_status_code <> ''P'')
     AND   (nvl(xer.event_id, -99) = -99 OR
            xer.event_status_code <> ''P'')
     AND   (nvl(xe.event_id, -99) <> -99 OR
            nvl(xer.event_id,  -99) <> -99 OR
            aid.encumbered_flag = ''Y'' OR
            aidr.encumbered_flag = ''Y'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.release_lookup_code is null)
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ''AP_SELF_ASSESSED_TAX_DIST_ALL'',
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.distribution_line_number,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aid.match_status_flag,
            aid.bc_event_id,
            aid.accounting_event_id,
            xe.event_status_code,
            aid.encumbered_flag,
            aid.posted_flag,
            aidr.invoice_distribution_id,
            aidr.distribution_line_number,
            aidr.line_type_lookup_code,
            aidr.amount,
            aidr.base_amount,
            aidr.match_status_flag,
            aidr.bc_event_id,
            aidr.accounting_event_id,
            xer.event_status_code,
            aidr.encumbered_flag,
            aidr.posted_flag
     FROM invs,
          ap_invoices_all ai,
          ap_self_assessed_tax_dist_all aid,
          ap_self_assessed_tax_dist_all aidr,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          financials_system_params_all fsp,
          xla_events xe,
          xla_events xer
     WHERE aid.bc_event_id = xe.event_id(+)
     AND   aidr.bc_event_id = xer.event_id(+)
     AND   xe.application_id(+) = 200
     AND   xer.application_id(+) = 200
     AND   xe.budgetary_control_flag(+) = ''Y''
     AND   xer.budgetary_control_flag(+) = ''Y''
     AND   aid.invoice_distribution_id = aidr.parent_reversal_id
     AND   nvl(aid.reversal_flag, ''N'') = ''Y''
     AND   nvl(aidr.reversal_flag, ''N'') = ''Y''
     AND   aid.invoice_id = aidr.invoice_id
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   aid.org_id = fsp.org_id
     AND   fsp.purch_encumbrance_flag = ''Y''
     AND   aid.invoice_line_number = aidr.invoice_line_number
     AND (nvl(xe.event_id, -99) = -99 OR
          xe.event_status_code <> ''P'')
     AND (nvl(xer.event_id, -99) = -99 OR
          xer.event_status_code <> ''P'')
     AND (nvl(xe.event_id, -99) <> -99 OR
          nvl(xer.event_id,  -99) <> -99 OR
          aid.encumbered_flag = ''Y'' OR
          aidr.encumbered_flag = ''Y'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.release_lookup_code is null)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    112,
    'INVOICE',
    'ACCOUNTING',
    '18022957',
    '1349026.1',
    'ap_psa_cleanup_2_s.sql check 1',
    'Invoice distributions which have encumbered flag as ''Y'', but the corresponding budgetary control event is not processed',
    'Apply the GDF patch following the instructions provided in [1349026.1]',
    'Y',
    'Y',
    impact_area_tbl('Invoice Holds'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''AP_INVOICE_DISTRIBUTIONS_ALL'' table_name,
            aid.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.match_status_flag,
            aid.amount,
            aid.base_amount,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.encumbered_flag,
            aid.posted_flag,
            aid.po_distribution_id,
            nvl(pll.accrue_on_receipt_flag, ''N'') accrue_on_receipt_flag,
            aid.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          financials_system_params_all fsp,
          po_distributions_all pod,
          po_line_locations_all pll,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          xla_events xe
     WHERE aid.bc_event_id = xe.event_id(+)
     AND   aid.po_distribution_id = pod.po_distribution_id(+)
     AND   pod.line_location_id = pll.line_location_id(+)
     AND   nvl(aid.historical_flag, ''N'') <> ''Y''
     AND   xe.application_id(+) = 200
     AND   (xe.budgetary_control_flag = ''Y'' OR
            nvl(xe.event_id, -99) = -99)
     AND   (nvl(xe.event_status_code, ''X'') <> ''P'' OR
            nvl(xe.event_id, -99) = -99)
     AND   nvl(aid.encumbered_flag, ''N'') = ''Y''
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.org_id = fsp.org_id
     AND   nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y''
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.release_lookup_code is null)
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ''AP_SELF_ASSESSED_TAX_DIST_ALL'',
            aid.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.match_status_flag,
            aid.amount,
            aid.base_amount,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.encumbered_flag,
            aid.posted_flag,
            aid.po_distribution_id,
            nvl(pll.accrue_on_receipt_flag, ''N'') accrue_on_receipt_flag,
            aid.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          ap_self_assessed_tax_dist_all aid,
          financials_system_params_all fsp,
          po_distributions_all pod,
          po_line_locations_all pll,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          xla_events xe
     WHERE aid.bc_event_id = xe.event_id(+)
     AND   aid.po_distribution_id = pod.po_distribution_id(+)
     AND   pod.line_location_id = pll.line_location_id(+)
     AND   xe.application_id(+) = 200
     AND   (xe.budgetary_control_flag = ''Y'' OR
            nvl(xe.event_id, -99) = -99)
     AND   (nvl(xe.event_status_code, ''X'') <> ''P'' OR
            nvl(xe.event_id, -99) = -99)
     AND   nvl(aid.encumbered_flag, ''N'') = ''Y''
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.org_id = fsp.org_id
     AND   nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y''
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.release_lookup_code is null)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    113,
    'INVOICE',
    'ACCOUNTING',
    '18022957',
    '1349026.1',
    'ap_psa_cleanup_2_s.sql check 2',
    'Invoice distributions for which the encumbered flag is ''N'' but the corresponding budgetary control event is processed',
    'Apply the GDF patch following the instructions provided in [1349026.1]',
    'Y',
    'Y',
    impact_area_tbl('Invoice Holds'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''AP_INVOICE_DISTRIBUTIONS_ALL'' table_name,
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aid.accounting_event_id event_id,
            aid.bc_event_id,
            aid.encumbered_flag,
            aid.posted_flag,
            aid.po_distribution_id,
            aid.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          financials_system_params_all fsp,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          xla_events xe
     WHERE nvl(aid.historical_flag, ''N'') <> ''Y''
     AND   aid.bc_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   xe.budgetary_control_flag = ''Y''
     AND   xe.event_status_code = ''P''
     AND   nvl(aid.encumbered_flag, ''N'') <> ''Y''
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.org_id = fsp.org_id
     AND   nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y''
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.release_lookup_code is null)
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ''AP_SELF_ASSESSED_TAX_DIST_ALL'',
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.encumbered_flag,
            aid.posted_flag,
            aid.po_distribution_id,
            aid.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          ap_self_assessed_tax_dist_all aid,
          financials_system_params_all fsp,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          xla_events xe
     WHERE aid.bc_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   xe.budgetary_control_flag = ''Y''
     AND   xe.event_status_code = ''P''
     AND   nvl(aid.encumbered_flag, ''N'') <> ''Y''
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.org_id = fsp.org_id
     AND   nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y''
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.release_lookup_code is null)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    114,
    'INVOICE',
    'ACCOUNTING',
    '18022957',
    '1349026.1',
    'ap_psa_cleanup_3_s.sql',
    'Following are the un-necessary fund related holds along with the related Invoice Details',
    'Apply the GDF patch following the instructions provided in [1349026.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Holds'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''All distributions encumbered'' Category,
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_amount,
            ai.invoice_type_lookup_code,
            asu.vendor_name,
            assi.vendor_site_code,
            aha.hold_lookup_code,
            aha.hold_date,
            aha.release_lookup_code,
            aha.held_by,
            aha.hold_id,
            aha.line_location_id,
            ai.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          ap_holds_all aha,
          financials_system_params_all fsp,
          ap_suppliers asu,
          ap_supplier_sites_all assi
     WHERE aha.invoice_id = ai.invoice_id
     AND   ai.org_id = fsp.org_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y''
     AND   aha.release_lookup_code is null
     AND   aha.hold_lookup_code IN (''CANT FUNDS CHECK'',
             ''Encumbrance Acctg Fail'', ''INSUFFICIENT FUNDS'')
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_invoice_distributions_all aid,
                  po_distributions_all pod,
                  po_line_locations_all pll
             WHERE aid.invoice_id = ai.invoice_id
             AND   nvl(aid.encumbered_flag, ''N'') IN (''N'',''H'',''P'')
             AND   aid.amount <> 0
             AND   aid.po_distribution_id = pod.po_distribution_id(+)
             AND   pod.line_location_id = pll.line_location_id(+)
             AND   nvl(pll.accrue_on_receipt_flag, ''N'') <> ''Y''
             AND   aid.line_type_lookup_code <> ''REC_TAX''
             UNION ALL
             SELECT 1
             FROM ap_self_assessed_tax_dist_all aid,
                  po_distributions_all pod,
                  po_line_locations_all pll
             WHERE aid.invoice_id = ai.invoice_id
             AND   nvl(aid.encumbered_flag, ''N'') IN (''N'',''H'',''P'')
             AND   aid.amount <> 0
             AND   aid.po_distribution_id = pod.po_distribution_id(+)
             AND   pod.line_location_id = pll.line_location_id(+)
             AND   nvl(pll.accrue_on_receipt_flag, ''N'') <> ''Y''
             AND   aid.line_type_lookup_code <> ''REC_TAX'')
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ''All distributions reversed, none Encumbered'',
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_amount,
            ai.invoice_type_lookup_code,
            asu.vendor_name,
            assi.vendor_site_code,
            aha.hold_lookup_code,
            aha.hold_date,
            aha.release_lookup_code,
            aha.held_by,
            aha.hold_id,
            aha.line_location_id,
            ai.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          ap_holds_all aha,
          financials_system_params_all fsp,
          ap_suppliers asu,
          ap_supplier_sites_all assi
     WHERE aha.invoice_id = ai.invoice_id
     AND   ai.org_id = fsp.org_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   nvl(fsp.purch_encumbrance_flag, ''N'') = ''Y''
     AND   aha.release_lookup_code is null
     AND   aha.hold_lookup_code IN (''CANT FUNDS CHECK'',
             ''Encumbrance Acctg Fail'', ''INSUFFICIENT FUNDS'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   nvl(aid.reversal_flag, ''N'') <> ''Y''
             UNION ALL
             SELECT 1 FROM ap_self_assessed_tax_dist_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   nvl(aid.reversal_flag, ''N'') <> ''Y'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.cancellation_flag = ''Y''
             UNION ALL
             SELECT 1 FROM ap_self_assessed_tax_dist_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.cancellation_flag = ''Y'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   nvl(aid.historical_flag, ''N'') = ''Y''
             AND   (nvl(aid.encumbered_flag, ''N'') NOT IN (''N'',''R'',''T'') OR
                    aid.encumbered_flag = ''Y''))
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_invoice_distributions_all aid,
                  xla_events xe
             WHERE aid.invoice_id = ai.invoice_id
             AND   nvl(aid.historical_flag, ''N'') = ''N''
             AND   aid.bc_event_id = xe.event_id
             AND   nvl(xe.budgetary_control_flag, ''N'') = ''Y''
             AND   xe.application_id = 200
             AND   xe.event_status_code = ''P''
             UNION ALL
             SELECT 1
             FROM ap_self_assessed_tax_dist_all aid,
                  xla_events xe
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.bc_event_id = xe.event_id
             AND   nvl(xe.budgetary_control_flag, ''N'') = ''Y''
             AND   xe.application_id = 200
             AND   xe.event_status_code = ''P'')
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    115,
    'INVOICE',
    'ACCOUNTING',
    '18022957',
    '1349026.1',
    'ap_psa_cleanup_4_s.sql',
    'Following are the Invoice distributions which are not marked as Approved, even though they should be Approved',
    'Apply the GDF patch following the instructions provided in [1349026.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Holds'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ''AP_INVOICE_DISTRIBUTIONS_ALL'' table_name,
             ai.invoice_id,
             ai.invoice_num,
             ai.org_id,
             ai.invoice_date,
             ai.invoice_type_lookup_code,
             aid.invoice_line_number,
             aid.distribution_line_number,
             aid.invoice_distribution_id,
             aid.line_type_lookup_code,
             aid.amount,
             aid.base_amount,
             aid.match_status_flag,
             aid.bc_event_id,
             aid.encumbered_flag,
             aid.accounting_event_id,
             aid.posted_flag,
             aid.parent_reversal_id,
             aid.po_distribution_id,
             pll.accrue_on_receipt_flag,
             ai.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          financials_system_params_all fsp,
          ap_invoice_distributions_all aid,
          ap_invoice_distributions_all aidp,
          po_distributions_all pod,
          po_line_locations_all pll,
          ap_suppliers asu,
          ap_supplier_sites_all assi
     WHERE aid.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   ai.org_id = fsp.org_id
     AND   fsp.purch_encumbrance_flag = ''Y''
     AND   aid.match_status_flag = ''T''
     AND   aid.po_distribution_id = pod.po_distribution_id(+)
     AND   pod.line_location_id = pll.line_location_id(+)
     AND   EXISTS (
             SELECT 1 FROM dual
             WHERE (aid.encumbered_flag NOT IN (''N'',''H'',''P'') OR
                    aid.amount = 0 OR
                    aid.line_type_lookup_code = ''REC_TAX'' OR
                    nvl(pll.accrue_on_receipt_flag, ''N'') = ''Y'')
             UNION ALL
             SELECT 1 FROM ap_invoice_distributions_all aidr
             WHERE aidr.invoice_id = aid.invoice_id
             AND   aidr.invoice_distribution_id <> aid.invoice_distribution_id
             AND   nvl(aid.parent_reversal_id, aid.invoice_distribution_id) =
                     nvl(aidr.parent_reversal_id, aidr.invoice_distribution_id)
             AND   aidr.reversal_flag = ''Y''
             AND   nvl(aid.encumbered_flag, ''N'') <> ''Y''
             AND   nvl(aidr.encumbered_flag, ''N'') <> ''Y''
             AND   aid.reversal_flag = ''Y'')
     AND   aid.invoice_id = aidp.invoice_id(+)
     AND   aid.parent_reversal_id = aidp.invoice_distribution_id(+)
     AND   NOT (aid.parent_reversal_id is not null AND
                nvl(aid.encumbered_flag, ''N'') IN (''N'',''H'',''P'') AND
                nvl(aidp.encumbered_flag, ''N'') NOT IN (''N'',''H'',''P''))
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_holds_all aha,
                  ap_hold_codes ahc
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.hold_lookup_code = ahc.hold_lookup_code
             AND   aha.release_lookup_code is null
             AND   nvl(ahc.postable_flag, ''N'') <> ''Y'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION ALL
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION ALL
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION ALL
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION ALL
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.release_lookup_code is null)
     AND   ai.invoice_id = invs.invoice_id
     UNION ALL
     SELECT ''AP_SELF_ASSESSED_TAX_DIST_ALL''           TABLE_NAME,
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_type_lookup_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aid.match_status_flag,
            aid.bc_event_id,
            aid.encumbered_flag,
            aid.accounting_event_id,
            aid.posted_flag,
            aid.parent_reversal_id,
            aid.po_distribution_id,
            pll.accrue_on_receipt_flag,
            ai.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          financials_system_params_all fsp,
          ap_self_assessed_tax_dist_all aid,
          ap_self_assessed_tax_dist_all aidp,
          po_distributions_all pod,
          po_line_locations_all pll,
          ap_suppliers asu,
          ap_supplier_sites_all assi
     WHERE aid.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   ai.org_id = fsp.org_id
     AND   fsp.purch_encumbrance_flag = ''Y''
     AND   aid.match_status_flag = ''T''
     AND   aid.po_distribution_id = pod.po_distribution_id(+)
     AND   pod.line_location_id = pll.line_location_id(+)
     AND   EXISTS (
             SELECT 1 FROM dual
             WHERE (aid.encumbered_flag NOT IN (''N'',''H'',''P'') OR
                    aid.amount = 0 OR
                    aid.line_type_lookup_code = ''REC_TAX'' OR
                    nvl(pll.accrue_on_receipt_flag, ''N'') = ''Y'')
             UNION ALL
             SELECT 1 FROM ap_invoice_distributions_all aidr
             WHERE aidr.invoice_id = aid.invoice_id
             AND   aidr.invoice_distribution_id <> aid.invoice_distribution_id
             AND   nvl(aid.parent_reversal_id, aid.invoice_distribution_id) =
                     nvl(aidr.parent_reversal_id, aidr.invoice_distribution_id)
             AND   aidr.reversal_flag = ''Y''
             AND   nvl(aid.encumbered_flag, ''N'') <> ''Y''
             AND   nvl(aidr.encumbered_flag, ''N'') <> ''Y''
             AND   aid.reversal_flag = ''Y'')
     AND   aid.invoice_id = aidp.invoice_id(+)
     AND   aid.parent_reversal_id = aidp.invoice_distribution_id(+)
     AND   NOT (aid.parent_reversal_id is not null AND
                nvl(aid.encumbered_flag, ''N'') IN (''N'',''H'',''P'') AND
                nvl(aidp.encumbered_flag, ''N'') NOT IN (''N'',''H'',''P''))
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_holds_all aha,
                  ap_hold_codes ahc
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.hold_lookup_code = ahc.hold_lookup_code
             AND   aha.release_lookup_code is null
             AND   nvl(ahc.postable_flag, ''N'') <> ''Y'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION ALL
             SELECT 1 FROM ap_invoice_distributions_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION ALL
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.match_status_flag, ''N'') <> ''A''
             UNION ALL
             SELECT 1 FROM ap_self_assessed_tax_dist_all d
             WHERE d.invoice_id = ai.invoice_id
             AND   nvl(d.posted_flag, ''N'') <> ''Y''
             UNION ALL
             SELECT 1 FROM ap_holds_all aha
             WHERE aha.invoice_id = ai.invoice_id
             AND   aha.release_lookup_code is null)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    116,
    'INVOICE',
    'ACCOUNTING',
    '17488502',
    '1333548.1',
    'ap_orphan_upg_events_sel.sql',
    'Orphan upgraded invoice accounting events not associated to any transaction',
    'Apply the GDF patch following the instructions provided in [1333548.1]',
    'Y',
    'Y',
    impact_area_tbl('Period Close', 'Trial Balance'),
    'SELECT /*+ ordered use_nl(ai, xte, xe) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            xe.event_id,
            xe.event_type_code,
            xe.event_status_code,
            xe.process_status_code,
            xe.event_date,
            xte.entity_id,
            xte.source_id_int_1,
            fsp.purch_encumbrance_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          financials_system_params_all fsp,
          xla_transaction_entities_upg xte,
          xla_events xe
     WHERE xe.application_id = 200
     AND   xe.application_id = xte.application_id
     AND   xe.event_type_code IN (''INVOICE VALIDATED'',
             ''INVOICE ADJUSTED'', ''INVOICE ADJUSTMENT'',
             ''INVOICE CANCELLED'', ''PREPAYMENT VALIDATED'',
             ''PREPAYMENT ADJUSTED'', ''PREPAYMENT CANCELLED'',
             ''DEBIT MEMO VALIDATED'', ''DEBIT MEMO ADJUSTED'',
             ''DEBIT MEMO CANCELLED'', ''CREDIT MEMO VALIDATED'',
             ''CREDIT MEMO ADJUSTED'', ''CREDIT MEMO CANCELLED'')
     AND   xe.event_type_code NOT IN (''MANUAL'', ''REVERSAL'')
     AND   xe.upg_batch_id is not null
     AND   xe.upg_batch_id <> -9999
     AND   nvl(xe.budgetary_control_flag, ''N'') = ''N''
     AND   xe.entity_id = xte.entity_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   ai.set_of_books_id = xte.ledger_id
     AND   ai.set_of_books_id = fsp.set_of_books_id
     AND   ai.org_id = fsp.org_id
     AND   NOT EXISTS (
             SELECT ''missing acctg evt for aprvd dists''
             FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.historical_flag = ''Y''
             AND   aid.accounting_event_id is null
             AND   (aid.match_status_flag = ''A'' OR
                    (aid.match_status_flag IN (''A'', ''T'') AND
                     purch_encumbrance_flag = ''N'')))
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */
                    ''No Invoice rows exist for this event''
             FROM ap_invoice_distributions_all aid
             WHERE aid.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */
                    ''No Distributions exist for the bc_event_id''
             FROM ap_invoice_distributions_all aid
             WHERE aid.bc_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */
                    ''No payment rows exist for this event''
             FROM ap_invoice_payments_all aip
             WHERE aip.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */
                    ''No payment history rows exists for this event''
             FROM ap_payment_history_all aph
             WHERE aph.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */
                    ''No self assessed tax rows exists for this event''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */
                    ''No self assessed tax rows exists for the bc_event_id''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.bc_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */
                    ''No prepay history rows exists for this event''
             FROM ap_prepay_history_all aprh
             WHERE aprh.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */
                    ''No prepayment history rows exists for the bc_event_id''
             FROM ap_prepay_history_all apph
             WHERE apph.bc_event_id = xe.event_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    117,
    'INVOICE',
    'ACCOUNTING',
    '17480776',
    '970912.1',
    'ap_prepay_apply_unapply_sel.sql',
    'Unaccounted prepay apply and unapply events for canceled invoices',
    'Apply the GDF patch following the instructions provided in [970912.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+ ordered use_nl(ai, aid, xe, xe2) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.parent_reversal_id,
            xe.event_type_code,
            aid.accounting_event_id,
            aid.bc_event_id,
            aid.amount,
            aid.base_amount
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          xla_events xe,
          xla_events xe2
     WHERE aid.invoice_id = ai.invoice_id
     AND   ai.cancelled_date is not null
     AND   ai.invoice_amount = 0
     AND   aid.prepay_distribution_id is not null
     AND   nvl(aid.reversal_flag, ''N'') = ''Y''
     AND   nvl(aid.posted_flag, ''N'')  <> ''Y''
     AND   aid.accounting_event_id = xe.event_id (+)
     AND   nvl(xe.application_id, 200) = 200
     AND   nvl(xe.event_status_code, ''N'') <> ''P''
     AND   nvl(aid.encumbered_flag, ''N'') <> ''Y''
     AND   aid.bc_event_id = xe2.event_id (+)
     AND   nvl(xe2.application_id, 200) = 200
     AND   nvl(xe2.event_status_code, ''N'') <> ''P''
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid1
             WHERE aid1.invoice_id = aid.invoice_id
             AND   aid1.prepay_distribution_id IS NOT NULL
             AND   nvl(aid1.reversal_flag, ''N'') = ''Y''
             AND   (aid.parent_reversal_id = aid1.invoice_distribution_id OR
                    aid.invoice_distribution_id = aid1.parent_reversal_id)
             AND   nvl(aid1.posted_flag, ''N'') <> ''Y''
             AND   nvl(aid1.encumbered_flag, ''N'') <> ''Y'')
     AND EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_distributions_all aid2
             WHERE aid2.invoice_id = ai.invoice_id
             AND aid2.prepay_distribution_id is null)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    191,
    'INVOICE',
    'ACCOUNTING',
    '17487182',
    '1317827.1',
    'ap_prepay_adj_orphan_s.sql',
    'Orphan prepayment application adjustment accounting events with no corresponding record in ap_prepay_history_all',
    'Apply the GDF patch following the instructions provided in [1317827.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_amount,
            ai.invoice_type_lookup_code,
            ai.set_of_books_id,
            xe.event_id,
            xe.event_type_code,
            xe.event_date,
            xe.creation_date,
            asu.vendor_name,
            assi.vendor_site_code
     FROM xla_events xe,
          xla_transaction_entities_upg xte,
          ap_invoices_all ai,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE xe.application_id = 200
     AND   xe.event_status_code IN (''I'',''U'')
     AND   xe.event_type_code = ''PREPAYMENT APPLICATION ADJ''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_prepay_history_all apph
             WHERE apph.accounting_event_id = xe.event_id)
     AND   xe.entity_id = xte.entity_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_INVOICES''
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    192,
    'INVOICE',
    'ACCOUNTING',
    '19327602',
    '1395357.1',
    'ap_orphan_apad_s.sql',
    'Orphan records in the table ap_prepay_app_dists with no corresponding record in ap_prepay_history_all',
    'Apply the GDF patch following the instructions provided in [1395357.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ''PRIMARY_ORPHAN_PREPAY_APP_DISTS'' category,
            ai.invoice_id,
            ai.invoice_num,
            ai.org_id,
            ai.invoice_date,
            ai.invoice_amount,
            asu.vendor_name,
            assi.vendor_site_code,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.invoice_distribution_id,
            aid.amount invoice_dist_amount,
            aid.base_amount invoice_dist_base_amount,
            aid.line_type_lookup_code,
            aid.prepay_distribution_id,
            aid.posted_flag,
            apad.prepay_app_dist_id,
            apad.prepay_history_id,
            apad.amount,
            apad.base_amount,
            apad.base_amt_at_prepay_xrate,
            apad.base_amt_at_prepay_pay_xrate,
            apad.base_amt_at_prepay_clr_xrate,
            xea.event_type_code,
            xea.event_id,
            xea.event_status_code,
            xeb.event_type_code budgetary_event_type,
            xeb.event_id budgetary_event_id,
            xeb.event_status_code budgetary_event_status,
            ai.set_of_books_id
     FROM ap_prepay_app_dists apad,
          xla_events xea,
          xla_events xeb,
          ap_invoice_distributions_all aid,
          ap_invoices_all ai,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE apad.prepay_app_distribution_id = aid.invoice_distribution_id
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   apad.accounting_event_id = xea.event_id(+)
     AND   apad.bc_event_id = xeb.event_id(+)
     AND   xea.application_id(+) = 200
     AND   xeb.application_id(+) = 200
     AND   NOT EXISTS (
             SELECT 1 FROM ap_prepay_history_all apph
             WHERE apph.prepay_history_id = apad.prepay_history_id)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    205,
    'INVOICE',
    'ACCOUNTING',
    '17493968',
    '1370202.1',
    'ApPoAccrualReconcSel.sql Check 1',
    'Invoices with different amounts in xla_ae_lines and xla_distribution_links causing issues with AP-PO accrual reconciliation',
    'Apply the GDF patch following the instructions provided in [1370202.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ''XAL_XDL_MISMATCH'' category,
            ai.invoice_id,
            ai.invoice_date,
            ai.org_id,
            ai.Invoice_Num,
            ai.Invoice_type_lookup_code,
            ai.Invoice_Amount,
            ai.Invoice_date,
            ai.set_of_books_id,
            xah.event_id,
            xah.event_type_code,
            xah.accounting_date,
            xah.ae_header_id,
            xal.ae_line_num,
            xal.code_combination_id,
            xal.accounting_class_code,
            xal.accounted_dr,
            xal.accounted_cr,
            xdl_v.net_amt
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          xla_ae_lines xal,
          cst_accrual_accounts cst,
          gl_period_statuses glps,
          (
            SELECT xdl.ae_header_id,
                   xdl.ae_line_num,
                   sum(nvl(xdl.unrounded_accounted_dr, 0) -
                     nvl(xdl.unrounded_accounted_cr, 0)) net_amt
            FROM xla_distribution_links xdl
            WHERE xdl.application_id = 200
            GROUP BY xdl.ae_header_id, xdl.ae_line_num
          ) xdl_v
     WHERE xal.application_id = 200
     AND   xah.application_id = 200
     AND   xte.application_id = 200
     AND   xal.ae_header_id = xah.ae_header_id
     AND   xah.entity_id = xte.entity_id
     AND   xah.upg_batch_id is not null
     AND   xah.event_type_code not in (''PREPAYMENT APPLIED'',
               ''PREPAYMENT UNAPPLIED'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.accounting_event_id = xah.event_id
             AND   aid.po_distribution_id is not null)
     AND   xah.ledger_id = xte.ledger_id
     AND   xte.ledger_id = ai.set_of_books_id
     AND   nvl(xte.source_id_int_1, -99) = ai.Invoice_ID
     AND   xte.entity_code = ''AP_INVOICES''
     AND   ai.set_of_books_id = glps.set_of_books_id
     AND   nvl(glps.adjustment_period_flag, ''N'') = ''N''
     AND   ai.gl_date BETWEEN glps.start_date AND glps.end_date
     AND   glps.application_id = 200
     AND   glps.migration_status_code = ''U''
     AND   xal.code_combination_id = cst.accrual_account_id
     AND   xdl_v.ae_header_id = xal.ae_header_id
     AND   xdl_v.ae_line_num = xal.ae_line_num
     AND   (nvl(xal.accounted_dr, 0) - nvl(xal.accounted_cr, 0)) <> xdl_v.net_amt
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    206,
    'INVOICE',
    'ACCOUNTING',
    '17493968',
    '1370202.1',
    'ApPoAccrualReconcSel.sql Check 2',
    'Accrual invoice distributions with exchange rate variance distributions having incorrect amounts in xla_distribution_links causing issues with AP-PO accrual reconciliation',
    'Apply the GDF patch following the instructions provided in [1370202.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ''INCORRECT_XDL_WHEN_ERV'' category,
            ai.invoice_id,
            ai.org_id,
            ai.invoice_num,
            ai.invoice_type_lookup_code,
            ai.invoice_Amount,
            ai.invoice_date,
             ai.set_of_books_id,
            asu.vendor_name,
            assi.vendor_site_code,
             xah.event_id,
            xah.event_type_code,
            xah.accounting_date,
            xah.ae_header_id,
            xal.ae_line_num,
            xal.code_combination_id,
            xal.accounting_class_code,
            xdl.unrounded_accounted_dr,
            xdl.unrounded_accounted_cr,
            aid.invoice_distribution_id,
            aid.line_type_lookup_code,
            aid.amount,
            aid.base_amount,
            aidv.invoice_distribution_id var_inv_dist_id,
            aidv.line_type_lookup_code var_line_type_code,
            aidv.amount var_amount,
            aidv.base_amount var_base_amount,
            aid.po_distribution_ID
     FROM xla_distribution_links xdl,
          xla_ae_lines xal,
          cst_accrual_accounts cst,
          xla_ae_headers xah,
          ap_invoice_distributions_all aid,
          ap_invoice_distributions_all aidv,
          ap_invoices_all ai,
          ap_suppliers asu,
          ap_supplier_sites_all assi,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE xdl.application_id = 200
     AND   xdl.accounting_line_type_code = ''S''
     AND   xdl.line_definition_code = ''ACCRUAL_INVOICES_ALL''
     AND   xdl.event_class_code = ''INVOICES''
     AND   xdl.event_type_code = ''INVOICES_ALL''
     AND   xdl.source_distribution_type = ''AP_INV_DIST''
     AND   xdl.upg_batch_id IS NOT NULL
     AND   xal.application_id = 200
     AND   xdl.ae_header_id = xal.ae_header_id
     AND   xdl.ae_line_num = xal.ae_line_num
     AND   xal.upg_batch_id IS NOT NULL
     AND   xal.code_combination_id = cst.accrual_account_id
     AND   xah.application_id = 200
     AND   xah.ae_header_id = xal.ae_header_id
     AND   xah.upg_batch_id IS NOT NULL
     AND   xah.event_id = aid.accounting_event_id
     AND   xah.event_type_code NOT IN (''PREPAYMENT APPLIED'',''PREPAYMENT UNAPPLIED'')
     AND   xah.ledger_id = aid.set_of_books_id
     AND   aid.invoice_distribution_id = xdl.source_distribution_id_num_1
     AND   aid.po_distribution_id IS NOT NULL
     AND   aid.line_type_lookup_code NOT IN (''ERV'',''TERV'')
     AND   aidv.invoice_id = aid.invoice_id
     AND   aid.invoice_distribution_id = aidv.related_id
     AND   aid.invoice_id = aidv.invoice_id
     AND   aidv.line_type_lookup_code IN (''ERV'',''TERV'')
     AND   aidv.base_amount <> 0
     AND   abs(
             abs(aid.base_amount) -
             abs(nvl(xdl.unrounded_accounted_cr,xdl.unrounded_accounted_dr))
           ) > 0.01
     AND   aid.Invoice_ID = ai.Invoice_ID
     AND   ai.vendor_id = asu.vendor_id(+)
     AND   ai.vendor_site_id = assi.vendor_site_id(+)
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    209,
    'INVOICE',
    'ACCOUNTING',
    '17494470',
    '1083599.1',
    'ap_party_id_mismatch_sel.sql',
    'Upgraded invoices having multiple parties for the liability lines',
    'Apply the GDF patch following the instructions provided in [1083599.1]',
    'Y',
    'N',
    impact_area_tbl('Trial Balance'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     ),
     dups_v AS (
       SELECT to_number(ael_v.invoice_id) "INVOICE_ID"
       FROM (
               SELECT /*+ leading(invs) use_nl(ael) */
                      ael.reference2 invoice_id,
                      ael.third_party_id
               FROM invs,
                    ap_ae_lines_all ael
               WHERE ael.source_table IN (''AP_INVOICES'',''AP_INVOICES_ALL'')
               AND   ael.source_id = invs.invoice_id
               AND   ael.ae_line_type_code = ''LIABILITY''
               UNION ALL
               SELECT /*+ ordered use_nl(aip, ael) */
                      ael.reference2,
                      ael.third_party_id
               FROM invs,
                    ap_invoice_payments_all aip,
                    ap_ae_lines_all ael
               WHERE aip.invoice_id = invs.invoice_id
               AND   ael.source_table = ''AP_INVOICE_PAYMENTS''
               AND   ael.source_id = aip.invoice_payment_id
               AND   ael.ae_line_type_code = ''LIABILITY''
               UNION ALL
               SELECT /*+ ordered use_nl(aid, ael) */
                      ael.reference2,
                      ael.third_party_id
               FROM invs,
                    ap_invoice_distributions_all aid,
                   ap_ae_lines_all ael
               WHERE aid.invoice_id = invs.invoice_id
               AND   ael.source_table = ''AP_INVOICE_DISTRIBUTIONS''
               AND   ael.source_id = aid.invoice_distribution_id
               AND   ael.ae_line_type_code = ''LIABILITY''
            ) ael_v
     GROUP BY ael_v.invoice_id
     HAVING count(distinct ael_v.third_party_id) > 1
     ),
     xte_v AS (
       SELECT DISTINCT
              inv_pay_info.orig_invoice,
              inv_pay_info.ael_source_table,
              inv_pay_info.ael_source_id,
              xte.entity_id,
              xte.entity_code,
              xte.ledger_id,
              xte.security_id_int_1 org_id,
              tiv.invoice_num,
              tiv.party_name
       FROM xla_transaction_entities_upg xte,
            ap_sla_invoices_transaction_v tiv,
            (
              SELECT /*+ leading(dups_v) use_nl(inv) */ DISTINCT
                     dups_v.invoice_id "ORIG_INVOICE",
                     inv.invoice_id xte_source_id,
                     ''AP_INVOICES'' xte_source_table,
                     inv.invoice_id ael_source_id ,
                     ''AP_INVOICES'' ael_source_table ,
                     inv.set_of_books_id
              FROM dups_v,
                   ap_invoices_all inv
              WHERE inv.invoice_id = dups_v.invoice_id
              UNION
              SELECT /*+ leading(dups_v) use_nl(invpay)*/ DISTINCT
                     dups_v.invoice_id,
                     invpay.check_id,
                     ''AP_PAYMENTS'',
                     invpay.invoice_payment_id,
                     ''AP_INVOICE_PAYMENTS'',
                     invpay.set_of_books_id
              FROM dups_v,
                   ap_invoice_payments_all invpay
              WHERE dups_v.invoice_id = invpay.invoice_id
            ) inv_pay_info
       WHERE xte.application_id = 200
       AND   inv_pay_info.orig_invoice = tiv.invoice_id
       AND   xte.ledger_id = inv_pay_info.set_of_books_id
       AND   xte.entity_code = inv_pay_info.xte_source_table
       AND   nvl(xte.source_id_int_1 , -99 ) = inv_pay_info.xte_source_id
       AND   nvl(xte.source_id_int_2 , -99 ) = -99
       AND   nvl(xte.source_id_int_3 , -99 ) = -99
       AND   nvl(xte.source_id_int_4 , -99 ) = -99
       AND   nvl(xte.SOURCE_ID_CHAR_1,'' '') = '' ''
       AND   nvl(xte.SOURCE_ID_CHAR_2,'' '') = '' ''
       AND   nvl(xte.SOURCE_ID_CHAR_3,'' '') = '' ''
       AND   nvl(xte.SOURCE_ID_CHAR_4,'' '') = '' ''
     )
     SELECT xte_v.orig_invoice invoice_id,
            xte_v.invoice_num,
            xte_v.org_id,
            xte_v.party_name,
            xal.ae_header_id,
            xal.ae_line_num,
            xal.party_id,
            xal.party_site_id,
            inv.party_id new_party_id,
            inv.party_site_id  new_party_site_id,
            xal.source_id,
            xal.source_table,
            xah.entity_id source_entity_id,
            inv.entity_id applied_to_entity_id,
            xah.ledger_id
     FROM xte_v,
          xla_ae_headers xah,
          xla_ae_lines xal,
          (
            SELECT DISTINCT
                   xal_inv.party_id,
                   xal_inv.party_site_id,
                   xte_inv.orig_invoice,
                   xah_inv.entity_id,
                   rank() OVER (
                     PARTITION BY xte_inv.entity_id
                     ORDER BY xah_inv.upg_batch_id DESC,
                              xah_inv.ae_header_id DESC,
                              xal_inv.ae_line_num DESC) rank
            FROM xla_ae_headers xah_inv,
                 xla_ae_lines xal_inv,
                 xte_v xte_inv
            WHERE xte_inv.entity_code = ''AP_INVOICES''
            AND   xah_inv.entity_id = xte_inv.entity_id
            AND   xah_inv.ledger_id = xte_inv.ledger_id
            AND   xah_inv.accounting_entry_status_code = ''F''
            AND   xah_inv.gl_transfer_status_code = ''Y''
            AND   xah_inv.application_id = 200
            AND   xal_inv.ae_header_id = xah_inv.ae_header_id
            AND   xal_inv.accounting_class_code = ''LIABILITY''
            AND   xah_inv.event_type_code not like ''PREPAY%APPL%''
            AND   xal_inv.application_id = 200
          ) inv,
          invs
     WHERE xah.entity_id = xte_v.entity_id
     AND   xah.upg_batch_id is not null
     AND   xah.upg_batch_id NOT IN (-9999, -5672)
     AND   xah.application_id = 200
     AND   xal.ae_header_id = xah.ae_header_id
     AND   xal.accounting_class_code = ''LIABILITY''
     AND   xal.source_table = xte_v.ael_source_table
     AND   xal.source_id = xte_v.ael_source_id
     AND   nvl(xal.gl_sl_link_id , 0) >= 0
     AND   xal.application_id = 200
     AND   xte_v.orig_invoice = inv.orig_invoice (+)
     AND   inv.rank(+)= 1
     AND   inv.party_id is not null
     AND   inv.party_site_id is not null
     AND   (xal.party_id <> inv.party_id OR
            xal.party_site_id <> inv.party_site_id)
     AND   xte_v.orig_invoice = invs.invoice_id'
  );


  add_signature(g_signatures,
    223,
    'INVOICE',
    'ACCOUNTING',
    '13622318',
    '1445214.1',
    'xla_xdl_miss_sel.sql',
    'The value for GL_SL_LINK is missing on upgraded accounting lines which are not transferred to GL.',
    'Apply the GDF patch following the instructions provided in [1445214.1]',
    'Y',
    'N',
    impact_area_tbl('GL Transfer'),
    'SELECT /*+ ordered use_nl(ai, xte, aeh, ael) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aeh.ae_header_id,
            ael.ae_line_num,
            ael.application_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_ae_headers aeh,
          xla_ae_lines ael
     WHERE aeh.application_id = ael.application_id
     AND   aeh.ae_header_id = ael.ae_header_id
     AND   aeh.gl_transfer_status_code = ''N''
     AND   aeh.accounting_entry_status_code = ''F''
     AND   aeh.upg_batch_id is not null
     AND   ael.gl_sl_link_id is null
     AND   aeh.application_id = 200
     AND   aeh.ledger_id = xte.ledger_id
     AND   aeh.entity_id = xte.entity_id
     AND   xte.application_id = 200
     AND   xte.ledger_id = ai.set_of_books_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    224,
    'INVOICE',
    'ACCOUNTING',
    '16228438',
    '1445573.1',
    'xla_11IINVXFRR12GLTB_sel.sql',
    'Liability accounted in 11i and transferred to GL in R12 is missing from the Trial Balance report.',
    'Apply the GDF patch following the instructions provided in [1445573.1][1445563.1]',
    'Y',
    'N',
    impact_area_tbl('Trial Balance'),
    'SELECT /*+ ordered use_nl(ai, xte, xah, xal, aae, aeh, ael) */
            xte.source_id_int_1 transaction_id,
            xte.security_id_int_1 org_id,
            xte.entity_code transaction_type,
            xah.event_id,
            xah.ae_header_id,
            xah.ledger_id,
            xah.accounting_date
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          xla_ae_lines xal,
          ap_accounting_events_all aae,
          ap_ae_headers_all aeh,
          ap_ae_lines_all ael
     WHERE xah.gl_transfer_status_code = ''Y''
     AND   xah.accounting_entry_status_code = ''F''
     AND   xah.upg_batch_id is not null
     AND   xah.upg_batch_id <> -9999
     AND   xah.group_id is not null
     AND   xah.gl_transfer_date is not null
     AND   xah.application_id = xte.application_id
     AND   xah.ledger_id = xte.ledger_id
     AND   xah.entity_id = xte.entity_id
     AND   xah.ae_header_id = xal.ae_header_id
     AND   xah.application_id = xal.application_id
     AND   xal.accounting_class_code = ''LIABILITY''
     AND   xte.application_id = 200
     AND   xte.ledger_id = ai.set_of_books_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   nvl(xte.source_id_int_1,-99) = ai.invoice_id
     AND   ai.invoice_id = invs.invoice_id
     AND   aae.accounting_event_id = xah.event_id
     AND   aae.accounting_event_id = aeh.accounting_event_id
     AND   aeh.ae_header_id = ael.ae_header_id
     AND   aeh.gl_transfer_flag <> ''Y''
     AND   ael.ae_line_type_code = ''LIABILITY''
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_liability_balance aplb
             WHERE aplb.invoice_id = to_number(nvl(ael.reference2,0))
             AND   aplb.ae_header_id = ael.ae_header_id
             AND   aplb.ae_line_id = ael.ae_line_id
             AND   aplb.set_of_books_id = aeh.set_of_books_id)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM xla_transaction_entities_upg xte,
                  ap_liability_balance aplb,
                  ap_ae_lines_all ael
             WHERE aplb.invoice_id = to_number(nvl(ael.reference2,0))
             AND   aplb.ae_header_id = ael.ae_header_id
             AND   aplb.ae_line_id = ael.ae_line_id
             AND   aplb.set_of_books_id = xah.ledger_id
             AND   xte.entity_id = xah.entity_id
             AND   xte.application_id = xah.application_id
             AND   xte.ledger_id = xah.ledger_id
             AND   aplb.invoice_id = xte.source_id_int_1)'
  );


  add_signature(g_signatures,
    227,
    'INVOICE',
    'ACCOUNTING',
    '21221141',
    '1133423.1',
    'xla_mulent_sel.sql',
    'Invoices with multiple transaction entity records in SLA',
    'Apply the GDF patch following the instructions provided in [1133423.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close', 'Sweep'),
    'SELECT /*+ leading(invs) use_nl(ai, xte2) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            xte2.application_id,
            xte2.entity_id,
            xte2.ledger_id,
            xte2.entity_code,
  	  xte2.source_id_int_1,
            xte2.transaction_number,
            count(DISTINCT xe2.event_id) event_count
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte2,
          xla_events xe2
     WHERE 1 < (
             SELECT count(*)
             FROM xla_transaction_entities_upg xte
             WHERE xte.application_id = xte2.application_id
             AND   xte.ledger_id = xte2.ledger_id
             AND   xte.entity_code = xte2.entity_code
             AND   nvl(xte.source_id_int_1,-99) = xte2.source_id_int_1)
     AND   xe2.application_id(+) = xte2.application_id
     AND   xe2.entity_id(+) = xte2.entity_id
     AND   xte2.ledger_id = ai.set_of_books_id
     AND   xte2.application_id = 200
     AND   xte2.entity_code = ''AP_INVOICES''
     AND   nvl(xte2.source_id_int_1, -99) = ai.invoice_id
     AND   ai.invoice_id = invs.invoice_id
     GROUP BY ai.invoice_id, ai.invoice_num, ai.invoice_date, ai.org_id,
              xte2.application_id, xte2.entity_id, xte2.ledger_id,
              xte2.entity_code, xte2.source_id_int_1, xte2.transaction_number'
  );


  add_signature(g_signatures,
    230,
    'INVOICE',
    'ACCOUNTING',
    '13475314',
    '1445175.1',
    'xla_acct_reversal_sel.sql',
    'Accounting reversal events are not getting accounted because of an existing reversal event.',
    'Apply the GDF patch following the instructions provided in [1445175.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT xdl.source_distribution_id_num_1,
            xah.event_type_code,
            xah.application_id,
            xah.upg_batch_id,
            xah.ledger_id,
            xah.balance_type_code,
            xdl.ae_header_id,
            xdl.ref_ae_header_id,
            xdl.ref_event_id,
            xdl.temp_line_num,
            xdl.ref_temp_line_num
     FROM  xla_distribution_links xdl,
           xla_ae_headers xah
     WHERE (xdl.application_id, xdl.ref_ae_header_id,
            xdl.temp_line_num, xah.ledger_id) IN (
             SELECT /*+ ordered use_nl(xah1, xdl1) */
                    xdl1.application_id,
                    xah1.ae_header_id,
                    -1 * xdl1.temp_line_num,
                    xah1.ledger_id
             FROM (
                    SELECT /*+ ordered use_nl(ai, xte, xe) */ DISTINCT
                           xe.application_id,
                           xe.entity_id
                    FROM (
                            ##$$IVIEW$$##
                          ) invs,
                         ap_invoices_all ai,
                         xla_transaction_entities_upg xte,
                         xla_events xe
                    WHERE xe.application_id = xte.application_id
                    AND   xe.entity_id = xte.entity_id
                    AND   xe.event_status_code = ''U''
                    AND   xte.application_id = 200
                    AND   xte.ledger_id = ai.set_of_books_id
                    AND   xte.entity_code = ''AP_INVOICES''
                    AND   nvl(xte.source_id_int_1,-99) = ai.invoice_id
                    AND   ai.invoice_id = invs.invoice_id
                  ) xe,
                  xla_ae_headers xah1,
                  xla_distribution_links xdl1
             WHERE xah1.application_id = xe.application_id
             AND   xah1.entity_id = xe.entity_id
             AND   xdl1.application_id = xah1.application_id
             AND   xdl1.ae_header_id = xah1.ae_header_id
             AND   xdl1.temp_line_num > 0)
     AND   xah.ae_header_id = xdl.ae_header_id
     AND   xah.application_id = xdl.application_id
     AND   xdl.ref_temp_line_num = -1 * xdl.temp_line_num
     AND   ((xdl.ref_event_id   = xdl.ref_ae_header_id AND
             xah.event_type_code <> ''MANUAL'') OR
            (xah.event_type_code = ''MANUAL'' AND
             xah.upg_batch_id = -9999))'
  );


  add_signature(g_signatures,
    239,
    'INVOICE',
    'ACCOUNTING',
    '17481514',
    '1460855.1',
    'ap_prep_np_unapp_unacc_sel.sql',
    'Events for prepayment unapplication will not account because the corresponding prepayment application event is flagged for no action (EVENT_STATUS_CODE=N)',
    'Apply the GDF patch following the instructions provided in [1460855.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+  ordered use_nl(app_aid, xe_app, unapp_aid, xe_unapp) */
            app_aid.invoice_id,
            app_aid.org_id,
            app_aid.invoice_line_number app_line_number,
            app_aid.line_type_lookup_code app_line_type,
            app_aid.invoice_distribution_id app_dist_id,
            app_aid.accounting_Event_id app_event_id,
            app_aid.posted_flag app_posted_flag,
            unapp_aid.invoice_line_number unapp_line_number,
            unapp_aid.line_type_lookup_code unapp_line_type,
            unapp_aid.invoice_distribution_id unapp_dist_id,
            unapp_aid.accounting_Event_id unapp_event_id,
            unapp_aid.posted_flag unapp_posted_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all app_aid,
          xla_events xe_app,
          ap_invoice_distributions_all unapp_aid,
          xla_events xe_unapp
     WHERE app_aid.prepay_distribution_id is not null
     AND app_aid.posted_flag = ''Y''
     AND app_aid.accounting_event_id = xe_app.event_id
     AND xe_app.application_id = 200
     AND xe_app.event_type_code = ''PREPAYMENT APPLIED''
     AND xe_app.event_status_code = ''N''
     AND xe_app.process_status_code = ''P''
     AND unapp_aid.invoice_id = app_aid.invoice_id
     AND unapp_aid.prepay_distribution_id is not null
     AND unapp_aid.parent_reversal_id is not null
     AND app_aid.invoice_distribution_id = unapp_aid.parent_reversal_id
     AND unapp_aid.posted_flag = ''N''
     AND unapp_aid.accounting_event_id = xe_unapp.event_id
     AND xe_unapp.event_type_code = ''PREPAYMENT UNAPPLIED''
     AND xe_unapp.application_id = 200
     AND xe_unapp.event_status_code = ''U''
     AND app_aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    274,
    'INVOICE',
    'ACCOUNTING',
    '13783741',
    '1445563.1',
    'xla_transR12_xdl_miss_sel.sql Invoice',
    'The value for GL_SL_LINK is missing on upgraded accounting lines which are transferred to GL.',
    'Apply the GDF patch following the instructions provided in [1445563.1]',
    'Y',
    'N',
    impact_area_tbl('Drilldown'),
    'SELECT /*+ ordered use_nl(ai, xte, xah, xal, gir) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            xah.ae_header_id ,
            xal.ae_line_num,
            xah.application_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          xla_ae_lines xal,
          gl_import_references gir,
          gl_je_headers gjh,
          gl_je_batches gjb
     WHERE upper(gjh.je_source) = ''PAYABLES''
     AND   gjh.ledger_id = xah.ledger_id
     AND   gjb.je_batch_id = gjh.je_batch_id
     AND   gjh.je_header_id = gir.je_header_id
     AND   gjh.je_batch_id = gir.je_batch_id
     AND   gir.gl_sl_link_ID is null
     AND   gjh.je_from_sla_flag = ''Y''
     AND   gir.reference_5 = to_char(xah.entity_id)
     AND   gir.reference_6 = to_char(xah.event_id)
     AND   gir.reference_7 = to_char(xah.ae_header_id)
     AND   gir.reference_8 = to_char(xal.ae_line_num)
     AND   xal.ae_header_id = xah.ae_header_id
     AND   xal.application_id = xah.application_id
     AND   xah.entity_id = xte.entity_id
     AND   xah.application_id = xte.application_id
     AND   xte.application_id = 200
     AND   xte.ledger_id = ai.set_of_books_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    297,
    'INVOICE',
    'ACCOUNTING',
    '20317621',
    '2150690.1',
    'ap_prep_xal_no_desc_sel.sql',
    'Prepay event accounting lines are missing descriptions though these are present on the distributions.',
    'Apply the GDF patch following the instructions provided in [2150690.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT DISTINCT
            xah.event_id,
            xah.event_type_code,
            xal.ae_header_id,
            xal.ae_line_num,
            xal.accounting_class_code,
            xal.description accounting_line_desc,
            xal.entered_dr,
            xal.entered_cr,
            xal.accounted_dr,
            xal.accounted_cr,
            aid.invoice_id,
            aid.invoice_distribution_id,
            aid.invoice_line_number,
            aid.distribution_line_number,
            aid.amount,
            aid.base_amount,
            aid.description inv_dist_desc,
            xah.upg_batch_id,
            aid.historical_flag
      FROM (
            ##$$IVIEW$$##
           ) invs,
           ap_invoice_distributions_all aid,
           xla_ae_lines xal,
           xla_ae_headers xah,
           xla_distribution_links xdl,
           ap_prepay_app_dists apad
     WHERE aid.invoice_id = invs.invoice_id
     AND   xal.application_id = 200
     AND   xal.accounting_class_code IN (''PREPAID_EXPENSE'',''RTAX'',''NRTAX'')
     AND   xal.description is null
     AND   xah.application_id = xal.application_id
     AND   xah.ae_header_id = xal.ae_header_id
     AND   xah.event_type_code IN (''PREPAYMENT APPLIED'',
             ''PREPAYMENT UNAPPLIED'',''PREPAYMENT APPLICATION ADJ'')
     AND   xal.ae_header_id = xdl.ae_header_id
     AND   xal.ae_line_num = xdl.ae_line_num
     AND   xdl.application_id = xal.application_id
     AND   xdl.source_distribution_type = ''AP_PREPAY''
     AND   xdl.source_distribution_id_num_1 = apad.prepay_app_dist_id
     AND   apad.prepay_app_distribution_id = aid.invoice_distribution_id
     AND   decode(xal.accounting_class_code
                 , ''PREPAID_EXPENSE'',''PREPAY''
                 , ''RTAX'',''REC_TAX''
                 , ''NRTAX'',''NONREC_TAX'' ) = aid.line_type_lookup_code
     AND   aid.description is not null
     ORDER BY xah.event_id, xal.ae_header_id, xal.ae_line_num'
  );


  add_signature(g_signatures,
    316,
    'INVOICE',
    'ACCOUNTING',
    '22733950',
    '2157173.1',
    'ap_orphan_prep_events_sel.sql',
    'Orphan prepay application or unapplication events in ap_prepay_history_all which do not exist in xla_events or ap_invoice_distributions_all.',
    'Apply the GDF patch following the instructions provided in [2157173.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT aph.invoice_id,
            aph.org_id,
            aph.invoice_line_number,
            aph.prepay_invoice_id,
            aph.prepay_line_num,
            aph.accounting_date,
            aph.historical_flag,
            aph.accounting_event_id,
            aph.invoice_adjustment_event_id,
            aph.related_prepay_app_event_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_prepay_history_all aph
     WHERE aph.invoice_id = invs.invoice_id
     AND   aph.posted_flag <> ''Y''
     AND   aph.transaction_type IN (''PREPAYMENT APPLIED'', ''PREPAYMENT UNAPPLIED'')
     AND   NOT EXISTS (
             SELECT 1 FROM xla_events xe
             WHERE application_id = 200
             AND xe.event_id = aph.accounting_event_id
             AND xe.event_status_code = ''P'')
     AND   NOT EXISTS (
             SELECT 1 FROM xla_events xe
             WHERE xe.application_id = 200
             AND xe.event_id = aph.bc_event_id
             AND xe.event_status_code = ''P'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.accounting_event_id = aph.accounting_event_id)
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_invoice_lines_all ail,
                  ap_invoice_distributions_all aid
             WHERE ail.invoice_id = aph.invoice_id
             AND ail.line_number = aph.invoice_line_number
             AND ail.line_type_lookup_code = ''PREPAY''
             AND ail.invoice_id = aid.invoice_id
             AND ail.line_number = aid.invoice_line_number)'
  );


  add_signature(g_signatures,
    317,
    'INVOICE',
    'ACCOUNTING',
    '18964372',
    '1336255.1',
    'ApIncorrEventTypeSel.sql',
    'Incorrect invoice event types for upgraded prepayment, credit memo, and debit memo invoices resulting in accounting error due to imbalanced journal entry in the subledger.',
    'Apply the GDF patch following the instructions provided in [1336255.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai, xte, xe) */
            xe.event_id,
            xe.event_type_code,
            decode(xe.event_type_code,
              ''INVOICE VALIDATED'', decode(ai.invoice_type_lookup_code,
                                     ''DEBIT'', ''DEBIT MEMO VALIDATED'',
                                     ''CREDIT'', ''CREDIT MEMO VALIDATED'',
                                     ''PREPAYMENT'',''PREPAYMENT VALIDATED'',
                                     xe.event_type_code),
              ''INVOICE ADJUSTED'',  decode(ai.invoice_type_lookup_code,
                                     ''DEBIT'', ''DEBIT MEMO ADJUSTED'',
                                     ''CREDIT'', ''CREDIT MEMO ADJUSTED'',
                                     ''PREPAYMENT'', ''PREPAYMENT ADJUSTED'',
                                     xe.event_type_code),
              ''INVOICE CANCELLED'', decode(ai.invoice_type_lookup_code,
                                     ''DEBIT'', ''DEBIT MEMO CANCELLED'',
                                     ''CREDIT'', ''CREDIT MEMO CANCELLED'',
                                     ''PREPAYMENT'',''PREPAYMENT CANCELLED'',
                                     xe.event_type_code),
              xe.event_type_code) proposed_event_type,
            xe.event_date,
            xe.entity_id,
            xe.event_status_code,
            xe.process_status_code,
            xe.upg_batch_id,
            to_char(null) old_event_type,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.invoice_amount,
            ai.invoice_type_lookup_code,
            ai.org_id,
            ai.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_events xe
     WHERE ai.invoice_id = invs.invoice_id
     AND   xte.application_id = 200
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   nvl(xte.security_id_int_1, -99) = ai.org_id
     AND   xte.ledger_id = ai.set_of_books_id
     AND   ai.invoice_type_lookup_code IN (''CREDIT'', ''DEBIT'', ''PREPAYMENT'')
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.application_id = 200
     AND   xe.entity_id = xte.entity_id
     AND   xe.event_type_code LIKE ''INVOICE%''
     AND   xe.application_id = 200
     AND   xe.upg_batch_id > 0
     UNION ALL
     SELECT /*+ ordered use_nl(ai, xte, xe, aae) */
            xe.event_id,
            xe.event_type_code,
            decode(ai.invoice_type_lookup_code,
              ''DEBIT'', ''DEBIT MEMO ADJUSTED'',
              ''CREDIT'', ''CREDIT MEMO ADJUSTED'',
              ''PREPAYMENT'', ''PREPAYMENT ADJUSTED'',
              ''INVOICE ADJUSTED'') proposed_event_type,
            xe.event_date,
            xe.entity_id,
            xe.event_status_code,
            xe.process_status_code,
            xe.upg_batch_id,
            aae.event_type_code old_event_type,
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.invoice_amount,
            ai.invoice_type_lookup_code,
            ai.org_id,
            ai.set_of_books_id
     FROM invs,
          ap_invoices_all ai,
          xla_transaction_entities_upg xte,
          xla_events xe,
          ap_accounting_events_all aae
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(xte.source_id_int_1, -99) = ai.invoice_id
     AND   nvl(xte.security_id_int_1, -99) = ai.org_id
     AND   xte.ledger_id = ai.set_of_books_id
     AND   xte.entity_code = ''AP_INVOICES''
     AND   xte.application_id = 200
     AND   xe.entity_id = xte.entity_id
     AND   xe.event_type_code not LIKE ''%ADJUSTED%''
     AND   aae.event_type_code LIKE ''%ADJUST%''
     AND   xe.event_id = aae.accounting_event_id
     AND   xe.application_id = 200
     AND   xe.upg_batch_id > 0'
  );


  add_signature(g_signatures,
    330,
    'INVOICE',
    'ACCOUNTING',
    '18809798',
    '1917846.1',
    'ap_exp_rep_precision_sel.sql',
    'Imported expense reports are created with a larger precision than is defined for the currency.',
    'Follow the instructions provided in [1917846.1]',
    'Y',
    'Y',
    impact_area_tbl('Trial Balance'),
    'SELECT ai.invoice_num,
            aid.invoice_id,
            aid.amount,
            aid.posted_flag,
            aid.distribution_line_number,
            aid.invoice_line_number,
            aid.line_type_lookup_code,
            ai.invoice_currency_code,
            aid.invoice_distribution_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid.invoice_id
     AND   aid.amount <> ap_utilities_pkg.ap_round_currency(
                           aid.amount,
                           ai.invoice_currency_code)
     AND   ai.invoice_type_lookup_code = ''EXPENSE REPORT''
     AND   aid.line_type_lookup_code NOT IN (''REC_TAX'',''NONREC_TAX'')'
  );


  add_signature(g_signatures,
    362,
    'INVOICE',
    'ACCOUNTING',
    '18846591',
    '1916767.1',
    'ap_incorr_awt_base_amt_sel.sql',
    'Invoice or Payment time AWT distributions for foreign currency invoices have incorrect base amounts.',
    'Follow the instructions provided in [1916767.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            aip.exchange_rate exchange_rate,
            asp.base_currency_code,
            aid.invoice_distribution_id,
            aid.invoice_line_number
     FROM invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          ap_invoice_distributions_all aid,
          ap_invoice_payments_all aip
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = aid.invoice_id
     AND   asp.org_id = ai.org_id
     AND   asp.base_currency_code <> ai.invoice_currency_code
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_invoice_payment_id is not null
     AND   aip.invoice_payment_id = aid.awt_invoice_payment_id
     AND   aip.exchange_rate is not null
     AND   aid.base_amount is not null
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aidx
             WHERE aidx.invoice_id = aid.invoice_id
             AND   aidx.related_id = aid.awt_related_id
             AND   aidx.line_type_lookup_code in (''ERV'',''TERV''))
     AND   aid.base_amount <>
             (ap_utilities_pkg.ap_round_currency(
                aid.amount * aip.exchange_rate,asp.base_currency_code) +
              nvl(aid.rounding_amt,0))
    AND   aid.amount <>
            ap_utilities_pkg.ap_round_currency(
             (aid.base_amount - nvl(aid.rounding_amt,0))/
               aip.exchange_rate, ai.invoice_currency_code)
    UNION ALL
    SELECT ai.invoice_id,
           ai.invoice_num,
           ai.invoice_date,
           ai.org_id,
           ai.exchange_rate exchange_rate,
           asp.base_currency_code,
           aid.invoice_distribution_id,
           aid.invoice_line_number
     FROM invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          ap_invoice_distributions_all aid
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(ai.awt_flag,''N'') = ''Y''
     AND   ai.exchange_rate is not null
     AND   ai.invoice_id = aid.invoice_id
     AND   asp.org_id = ai.org_id
     AND   asp.base_currency_code <> ai.invoice_currency_code
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_invoice_payment_id is null
     AND   aid.base_amount is not null
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aidx
             WHERE aidx.invoice_id = aid.invoice_id
             AND   aidx.related_id = aid.awt_related_id
             AND   aidx.line_type_lookup_code in (''ERV'',''TERV''))
     AND   aid.base_amount <>
             (ap_utilities_pkg.ap_round_currency(
                aid.amount * ai.exchange_rate,asp.base_currency_code) +
              nvl(aid.rounding_amt,0))
     AND   aid.amount <>
             ap_utilities_pkg.ap_round_currency(
               (aid.base_amount - nvl(aid.rounding_amt,0))/ai.exchange_rate,
                ai.invoice_currency_code)'
  );


  add_signature(g_signatures,
    216,
    'INVOICE',
    'TAX',
    '16090199',
    '1152029.1',
    'zx_frzn_dist_pop.sql',
    'Invoices with tax distributions in Payables that do not exist in the EBTax distributions table ZX_REC_NREC_DIST',
    'Apply the GDF patch following the instructions provided in [1152029.1]',
    'Y',
    'Y',
    impact_area_tbl('EBTax', 'Validation Selection'),
    'SELECT /*+ ordered use_nl(ai) */
           ai.invoice_id,
           ai.invoice_num,
           ai.org_id,
           ai.invoice_date
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_invoice_distributions_all dist
             WHERE dist.invoice_id = ai.invoice_id
             AND   nvl(dist.historical_flag,''N'') <> ''Y''
             AND   dist.summary_tax_line_id is not null
             AND   dist.detail_tax_dist_id is not null
             AND   NOT EXISTS (
                     SELECT /*+ no_unnest */ 1 FROM zx_rec_nrec_dist zd
                     WHERE zd.rec_nrec_tax_dist_id = dist.detail_tax_dist_id
                     AND   zd.summary_tax_line_id = dist.summary_tax_line_id)
             UNION
             SELECT /*+ no_unnest */ 2
             FROM ap_self_assessed_tax_dist_all sa_dist
             WHERE sa_dist.invoice_id = ai.invoice_id
             AND   sa_dist.summary_tax_line_id is not null
             AND   sa_dist.detail_tax_dist_id is not null
             AND   NOT EXISTS (
                     SELECT /*+ no_unnest */ 1
                     FROM zx_rec_nrec_dist zd
                     WHERE zd.rec_nrec_tax_dist_id = sa_dist.detail_tax_dist_id
                     AND   zd.summary_tax_line_id = sa_dist.summary_tax_line_id))
     AND   ai.cancelled_date is null'
  );


  add_signature(g_signatures,
    222,
    'INVOICE',
    'TAX',
    '13365761',
    '1396732.1',
    'zx_funcl_backup.sql',
    'Non-historical invoices with tax distributions having exchange rate defined, but no conversion rate populated on EBTax distribution',
    'Apply the GDF patch following the instructions provided in [1396732.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Incorrect', 'EBTax'),
    'SELECT ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ai.exchange_rate,
            dist.rec_nrec_tax_dist_id,
            zxl.summary_tax_line_id,
            zxl.tax_line_id,
            nvl(cur.minimum_accountable_unit,
              power(10, (-1 * cur.precision))) min_accountable_unit
     FROM ap_invoices_all ai,
          gl_sets_of_books sob,
          financials_system_params_all fsp,
          zx_rec_nrec_dist dist,
          zx_lines zxl,
          fnd_currencies cur,
          (
            ##$$IVIEW$$##
          ) invs
     WHERE sob.set_of_books_id = fsp.set_of_books_id
     AND   ai.org_id = fsp.org_id
     AND   cur.currency_code = sob.currency_code
     AND   nvl(ai.historical_flag,''N'') = ''N''
     AND   ai.invoice_currency_code <> sob.currency_code
     AND   dist.application_id = 200
     AND   dist.entity_code = ''AP_INVOICES''
     AND   dist.event_class_code IN (''STANDARD INVOICES'',
             ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
     AND   dist.trx_id = ai.invoice_id
     AND   zxl.tax_line_id = dist.tax_line_id
     AND   dist.currency_conversion_rate is null
     AND   ai.exchange_rate is not null
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    232,
    'INVOICE',
    'TAX',
    '17500015',
    '1447997.1',
    'ap_consolidated_upgr_script_sel.sql Null Tax Code Dists',
    'Upgraded invoice distributions which had tax codes in 11i that have been nulled out after the upgrade.',
    'Apply the GDF patch following the instructions provided in [1447997.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Data'),
    'SELECT /*+ ordered use_nl(aid, aia, zrb) */
             aid.invoice_id,
             aid.org_id,
             aid.invoice_line_number,
             aid.invoice_distribution_id,aid.old_distribution_id,
             aia.invoice_distribution_id aia_inv_dist_id,
             aia.tax_code_id aia_tax_code,
             zrb.source_id zx_tax_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid,
          ap_invoice_dists_arch aia,
          zx_rates_b zrb
     WHERE  aid.invoice_id = aia.invoice_id
     AND    aid.old_distribution_id = aia.invoice_distribution_id
     AND    aid.tax_code_id IS NULL
     AND    aia.tax_code_id IS NOT NULL
     AND    aid.line_type_lookup_code not in (''IPV'',''ERV'',''TRV'',''TERV'',''TIPV'')
     AND    aia.tax_code_id = zrb.source_id
     AND    aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    233,
    'INVOICE',
    'TAX',
    '17500015',
    '1447997.1',
    'ap_consolidated_upgr_script_sel.sql Null Tax Group Dists',
    'Upgraded invoice distributions which had tax groups in 11i that have been nulled out after the upgrade.',
    'Apply the GDF patch following the instructions provided in [1447997.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Data'),
    'SELECT /*+ ordered use_nl(aid, aia, atc) */
            aid.invoice_id,
            aid.org_id,
            aid.invoice_distribution_id,
            aid.old_distribution_id,
            aia.invoice_distribution_id arch_inv_dist_id,
            aia.tax_code_id arch_tax_code,
            atc.tax_id,
            atc.tax_type,
            atc.name,
            aid.invoice_line_number
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_distributions_all aid,
          ap_invoice_dists_arch aia,
          ap_tax_codes_all atc
     WHERE  aid.invoice_id = aia.invoice_id
     AND    aid.old_distribution_id = aia.invoice_distribution_id
     AND    aid.tax_code_id is null
     AND    aid.line_type_lookup_code not in (''IPV'',''ERV'',''TRV'',''TERV'',''TIPV'')
     AND    aia.tax_code_id is not null
     AND    aia.tax_code_id = atc.tax_id
     AND    atc.tax_type = ''TAX_GROUP''
     AND    aid.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    234,
    'INVOICE',
    'TAX',
    '17500015',
    '1447997.1',
    'ap_consolidated_upgr_script_sel.sql Null Tax Class Code Dists',
    'Upgraded invoice distributions which had tax classification codes in 11i that have been nulled out after the upgrade.',
    'Apply the GDF patch following the instructions provided in [1447997.1]',
    'Y',
    'N',
    impact_area_tbl('Invoice Data'),
    'SELECT /*+ ordered use_nl(ada) */
            ada.invoice_id,
            ada.org_id,
            ada.invoice_distribution_id,
            ada.tax_code_id,
            ada.line_type_lookup_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoice_dists_arch ada
     WHERE ada.line_type_lookup_code NOT IN (''AWT'',''TAX'')
     AND   ada.tax_code_id is not null
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ ''with TCC''
             FROM ap_invoice_distributions_all aid,
                  ap_invoice_lines_all ail
             WHERE aid.invoice_id = ada.invoice_id
             AND   ada.invoice_distribution_id = aid.old_distribution_id
             AND   ail.invoice_id = aid.invoice_id
             AND   ail.line_number = aid.invoice_line_number
             AND   ail.Tax_Classification_Code is not null)
     AND   EXISTS (
             SELECT /*+ no_unnest */ ''with TCC''
             FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ada.invoice_id
             AND  ada.invoice_distribution_id = aid.old_distribution_id)
     AND   ada.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    250,
    'INVOICE',
    'TAX',
    '21944590',
    '1152123.1',
    'zx_lines_mismatch_upd.sql',
    'Tax lines contain invalid value combinations for record_type_code and historical_flag, taxable_basis_formula and manually_entered_flag, or adjusted_doc_trx_level_type and applied_from_trx_level_type',
    'Apply the Generic Data Fix patch {20968750} per the readme instructions.',
    'Y',
    'N',
    impact_area_tbl('EBTax', 'Invoice Cancellation', 'Validation Selection'),
    'SELECT /*+ ordered use_nl(l) */
            l.trx_id invoice_id,
            l.adjusted_doc_application_id,
            l.adjusted_doc_trx_level_type,
            l.applied_from_application_id,
            l.applied_from_trx_level_type,
            l.taxable_basis_formula,
            l.manually_entered_flag,
            l.tax_calculation_formula,
            l.record_type_code,
            l.historical_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
            zx_lines l
     WHERE l.trx_id = invs.invoice_id
     AND   l.application_id = 200
     AND   l.entity_code = ''AP_INVOICES''
     AND   l.event_class_code IN (''STANDARD INVOICES'',
             ''PREPAYMENT INVOICES'',''EXPENSE REPORTS'')
     AND   ((nvl2(l.adjusted_doc_application_id, 1, 2 ) <>
             nvl2(l.adjusted_doc_trx_level_type, 1, 2 )) OR
            (nvl2(l.applied_from_application_id, 1, 2 ) <>
             nvl2(l.applied_from_trx_level_type, 1, 2 )) OR
            (( l.manually_entered_flag = ''Y'' AND
               nvl(l.taxable_basis_formula,''#!X!#'') <> ''PRORATED_TB'' AND
               l.tax_provider_id is null) OR
             (l.taxable_basis_formula is null AND
              l.tax_provider_id is null) OR
             (l.taxable_basis_formula is not null AND
              l.tax_provider_id is not null)) OR
            (l.tax_calculation_formula is null AND
             l.tax_provider_id is null) OR
            (l.tax_calculation_formula is not null AND
             l.tax_provider_id is not null) OR
            ((nvl(l.historical_flag,''N'') = ''Y'' AND
              l.record_type_code <> ''MIGRATED'') OR
             (nvl(l.historical_flag,''N'') = ''N'' AND
              l.record_type_code <> ''ETAX_CREATED'')))'
  );


  add_signature(g_signatures,
    251,
    'INVOICE',
    'TAX',
    '10095488',
    '1152123.1',
    'zx_pop_curr_lines.sql',
    'Incorrect currency conversion attributes on historical/migrated transactions which can result in ORA-00001 unique constraint errors on ZX_LINES_SUMMARY_U1.',
    'Apply the Generic Data Fix patch {10095488} as per the readme instructions.',
    'Y',
    'N',
    impact_area_tbl('EBTax', 'Invoice Cancellation', 'Validation Selection'),
    'SELECT /*+ ordered use_nl(zl) */
            zl.summary_tax_line_id,
            zl.currency_conversion_date,
            zl.currency_conversion_type,
            zl.currency_conversion_rate
     FROM (
            ##$$IVIEW$$##
          ) invs,
          zx_lines zl
     WHERE zl.record_type_code = ''MIGRATED''
     AND   zl.application_id = 200
     AND   zl.entity_code = ''AP_INVOICES''
     AND   zl.event_class_code IN (''STANDARD INVOICES'', ''PREPAYMENT INVOICES'',
             ''EXPENSE REPORTS'')
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM zx_lines_det_factors ldf
             WHERE ldf.application_id = zl.application_id
             AND   ldf.entity_code = zl.entity_code
             AND   ldf.event_class_code = zl.event_class_code
             AND   ldf.trx_id = zl.trx_id
             AND   ldf.trx_line_id = zl.trx_line_id
             AND   ldf.record_type_code = ''MIGRATED''
             AND   (nvl(ldf.currency_conversion_date,sysdate) <>
                      nvl(zl.currency_conversion_date,sysdate) OR
                    nvl(ldf.currency_conversion_type,''C'') <>
                      nvl(zl.currency_conversion_type,''C'') OR
                    nvl(ldf.currency_conversion_rate,-10) <>
                      nvl(zl.currency_conversion_rate,-10)))
     AND   zl.trx_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    252,
    'INVOICE',
    'TAX',
    '12961200',
    '1152123.1',
    'zx_pop_trx_number.sql',
    'Mismatch between the trx_number in zx_lines and the invoice_num in ap_invoices_all which can result in ORA-00001 unique constraint errors on ZX_LINES_SUMMARY_U1.',
    'Apply the Generic Data Fix patch {12961200} as per the readme instructions.',
    'Y',
    'N',
    impact_area_tbl('EBTax', 'Invoice Cancellation', 'Validation Selection'),
    'SELECT /*+ ordered use_nl(ai, zl) */
            ai.invoice_num,
            zl.tax_line_id,
            zl.trx_id,
            zl.summary_tax_line_id,
            zl.trx_line_id,
            zl.event_class_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          zx_lines zl
     WHERE zl.application_id = 200
     AND   zl.entity_code = ''AP_INVOICES''
     AND   zl.event_class_code IN (''STANDARD INVOICES'',''EXPENSE REPORTS'',
             ''PREPAYMENT INVOICES'')
     AND   zl.trx_id = ai.invoice_id
     AND   zl.trx_number <> ai.invoice_num
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    253,
    'INVOICE',
    'TAX',
    '14317362',
    '1152123.1',
    'zx_pop_estb_id.sql',
    'The establishment_id value is null in table zx_lines/zx_lines_summary which can result in ORA-00001 unique constraint errors on ZX_LINES_SUMMARY_U1.',
    'Apply the Generic Data Fix patch {14317362} as per the readme instructions.',
    'Y',
    'N',
    impact_area_tbl('EBTax', 'Invoice Cancellation', 'Validation Selection'),
    'SELECT /*+ ordered use_nl(zl) */
            zl.trx_id,
            zl.trx_line_id,
            zl.event_class_code,
            zl.tax_line_id,
            zl.summary_tax_line_id,
            etb.establishment_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          zx_lines zl,
          xle_etb_profiles etb,
          zx_party_tax_profile ptp
     WHERE zl.application_id = 200
     AND   zl.entity_code = ''AP_INVOICES''
     AND   zl.event_class_code IN (''STANDARD INVOICES'',''EXPENSE REPORTS'',
             ''PREPAYMENT INVOICES'')
     AND   zl.legal_entity_id = etb.legal_entity_id
     AND   zl.establishment_id is null
     AND   etb.main_establishment_flag = ''Y''
     AND   nvl(etb.main_effective_from, zl.trx_date) <= zl.trx_date
     AND   nvl(etb.main_effective_to, zl.trx_date) >= zl.trx_date
     AND   etb.party_id = ptp.party_id
     AND   ptp.party_type_code = ''LEGAL_ESTABLISHMENT''
     AND   zl.trx_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    254,
    'INVOICE',
    'TAX',
    '14700514',
    '1152123.1',
    'zx_sync_tax_rate_pop.sql',
    'Incorrect tax_rate stamped on tax lines and tax summary lines which can result in ORA-00001 unique constraint errors on ZX_LINES_SUMMARY_U1.',
    'Apply generic datafix patch {14700514} as indicated in [1152123.1] (Pattern #4).',
    'Y',
    'N',
    impact_area_tbl('EBTax', 'Invoice Cancellation', 'Validation Selection'),
    'SELECT /*+ ordered use_nl(ai) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai
     WHERE ai.invoice_id = invs.invoice_id
     AND   ap_invoices_utility_pkg.get_approval_status (
             ai.invoice_id,
             ai.invoice_amount,
             ai.payment_status_flag,
             ai.invoice_type_lookup_code) <> ''APPROVED''
      AND   ai.cancelled_date is null
      AND   EXISTS (
              SELECT /*+first_rows(1)*/
                     zl.summary_tax_line_id
              FROM zx_lines zl
              WHERE zl.application_id = 200
              AND   zl.entity_code = ''AP_INVOICES''
              AND   zl.event_class_code IN (''STANDARD INVOICES'',
                      ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
              AND   zl.trx_id = ai.invoice_id
              GROUP BY summary_tax_line_id
              HAVING (count(DISTINCT tax_rate_id) = 1 AND
                      count(DISTINCT tax_rate) > 1))'
  );


  add_signature(g_signatures,
    257,
    'INVOICE',
    'TAX',
    '18955694',
    '1500303.1',
    'ap_incor_taxable_amt_sel.sql',
    'Incorrect taxable_amount values on tax distributions for upgraded invoices',
    'Apply the GDF patch following the instructions provided in [1500303.1]',
    'Y',
    'N',
    impact_area_tbl('EBTax'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai, aid_tax, aid_item) */
            1 type,
            aid_item.invoice_id,
            ai.invoice_date,
            ai.org_id,
            aid_tax.invoice_distribution_id,
            aid_tax.charge_applicable_to_dist_id,
            ai.invoice_currency_code,
            asp.base_currency_code,
            aid_tax.detail_tax_dist_id,
            aid_item.related_id,
            null invoice_line_number,
            null distribution_line_number,
            null parent_reversal_id,
            null amount,
            aid_tax.taxable_amount incorr_taxbl_amt,
            aid_tax.taxable_base_amount incorr_taxbl_base_amt,
            sum(aid_item.amount) corr_taxbl_amt,
            sum(aid_item.base_amount) corr_taxbl_base_amt
     FROM invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          ap_invoice_distributions_all aid_tax,
          ap_invoice_distributions_all aid_item
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.historical_flag = ''Y''
     AND   ai.invoice_id = aid_tax.invoice_id
     AND   aid_tax.historical_flag = ''Y''
     AND   aid_tax.charge_applicable_to_dist_id is not null
     AND   aid_tax.line_type_lookup_code in (''REC_TAX'',''NONREC_TAX'')
     AND   aid_tax.charge_applicable_to_dist_id = aid_item.related_id
     AND   ai.org_id = asp.org_id
     AND   ai.set_of_books_id = asp.set_of_books_id
     AND   aid_tax.parent_reversal_id is null
     GROUP BY aid_item.invoice_id, ai.invoice_date,
              ai.org_id, aid_tax.invoice_distribution_id,
              aid_tax.charge_applicable_to_dist_id, aid_tax.taxable_amount,
              aid_tax.taxable_base_amount, ai.invoice_currency_code,
              asp.base_currency_code, aid_tax.detail_tax_dist_id,
              aid_item.related_id
     HAVING (aid_tax.taxable_amount <> sum(aid_item.amount)) OR
            (ai.invoice_currency_code <> asp.base_currency_code AND
             aid_tax.taxable_base_amount <> sum(aid_item.base_amount)) OR
            (ai.invoice_currency_code = asp.base_currency_code AND
             aid_tax.taxable_base_amount is not null)
     UNION ALL
     SELECT /*+ ordered use_nl(ai, aid_par, aid_rev) */
            2 type,
            ai.invoice_id,
            ai.invoice_date,
            ai.org_id,
            aid_rev.invoice_distribution_id,
            aid_rev.charge_applicable_to_dist_id,
            ai.invoice_currency_code,
            asp.base_currency_code,
            aid_rev.detail_tax_dist_id,
            null,
            aid_rev.invoice_line_number,
            aid_rev.distribution_line_number,
            aid_rev.parent_reversal_id,
            aid_rev.amount,
            aid_rev.taxable_amount,
            aid_rev.taxable_base_amount,
            -(aid_par.taxable_amount),
            -(aid_par.taxable_base_amount)
     FROM invs,
          ap_invoices_all ai,
          ap_system_parameters_all asp,
          ap_invoice_distributions_all aid_par,
          ap_invoice_distributions_all aid_rev
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.org_id = asp.org_id
     AND   ai.set_of_books_id = asp.set_of_books_id
     AND   ai.invoice_id = aid_par.invoice_id
     AND   aid_par.invoice_id=aid_rev.invoice_id
     AND   nvl(aid_par.historical_flag,''N'') = ''Y''
     AND   nvl(aid_rev.historical_flag,''N'') = ''Y''
     AND   aid_par.line_type_lookup_code IN (''REC_TAX'',''NONREC_TAX'')
     AND   aid_par.line_type_lookup_code = aid_rev.line_type_lookup_code
     AND   aid_par.charge_applicable_to_dist_id = aid_rev.charge_applicable_to_dist_id
     AND   nvl(aid_par.reversal_flag,''N'') = ''Y''
     AND   nvl(aid_rev.reversal_flag,''N'') = ''Y''
     AND   aid_rev.parent_reversal_id is not null
     AND   aid_par.invoice_distribution_id = aid_rev.parent_reversal_id
     AND   (aid_par.taxable_amount = aid_rev.taxable_amount  OR
            aid_par.taxable_base_amount = aid_rev.taxable_base_amount)'
  );


  add_signature(g_signatures,
    260,
    'INVOICE',
    'TAX',
    '17603319',
    '1316316.1',
    'zx_dist_var_pop.sql Pattern 1',
    'Tax lines for discarded or cancelled invoice lines are not marked as canceled and have amounts assigned.',
    'Apply the GDF patch following the instructions provided in [1316316.1] (Section 5)',
    'Y',
    'Y',
    impact_area_tbl('EBTax', 'Invoice Cancellation'),
    'SELECT /*+ ordered use_nl(ai, ail, ah) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ail.line_number,
            ail.discarded_flag,
            ail.cancelled_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_invoice_lines_all ail,
          ap_holds_all ah
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvL(ai.historical_flag,''N'') <> ''Y''
     AND   ai.cancelled_date is null
     AND   ah.invoice_id = ai.invoice_id
     AND   ah.hold_lookup_code IN (''DIST VARIANCE'',''LINE VARIANCE'')
     AND   ah.release_lookup_code IS NULL
     AND   ail.invoice_id = ai.invoice_id
     AND   ail.line_type_lookup_code <> ''TAX''
     AND   (nvl(ail.discarded_flag,''N'') = ''Y'' OR
            nvl(ail.cancelled_flag,''N'') = ''Y'')
     AND EXISTS (
           SELECT /*+ no_unnest */
                  null
           FROM zx_lines zl
           WHERE zl.application_id = 200
           AND   zl.entity_code = ''AP_INVOICES''
           AND   zl.event_class_code IN (''STANDARD INVOICES'',
                   ''PREPAYMENT INVOICES'',''EXPENSE REPORTS'')
           AND   zl.trx_id = ai.invoice_id
           AND   zl.trx_level_type = ''LINE''
           AND   zl.trx_line_id = ail.line_number
           AND   (nvl(zl.cancel_flag,''N'') <> ''Y'' OR
                  zl.tax_amt <> 0))'
  );


  add_signature(g_signatures,
    261,
    'INVOICE',
    'TAX',
    '17603319',
    '1316316.1',
    'zx_dist_var_pop.sql Pattern 2',
    'Invoices on Distribution or Line Variance hold where tax line tax amount does not match the sum of the distributions.',
    'Apply the GDF patch following the instructions provided in [1316316.1] (Section 5)',
    'Y',
    'Y',
    impact_area_tbl('EBTax', 'Invoice Holds', 'Validation Selection'),
    'SELECT /*+ ordered use_nl(ai, ah) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ah.hold_lookup_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_holds_all ah
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(ai.historical_flag,''N'') <> ''Y''
     AND   ai.cancelled_date is null
     AND   ah.invoice_id = ai.invoice_id
     AND   ah.hold_lookup_code IN (''DIST VARIANCE'',''LINE VARIANCE'')
     AND   ah.release_lookup_code is null
     AND   EXISTS (
             SELECT /*+ no_unnest
                        index(zl zx_lines_n4)
                        index(zd zx_rec_nrec_dist_u2) */
                    null
             FROM zx_lines zl,
                  zx_rec_nrec_dist zd
             WHERE zl.application_id = 200
             AND   zl.trx_id = ai.invoice_id
             AND   zd.tax_line_id = zl.tax_line_id
             AND   zd.application_id = zl.application_id
             AND   zd.entity_code = zl.entity_code
             AND   zd.event_class_code = zl.event_class_code
             AND   zd.trx_id = zl.trx_id
             GROUP BY zd.tax_line_id, zl.tax_amt
             HAVING zl.tax_amt <> SUM(zd.rec_nrec_tax_amt))'
  );


  add_signature(g_signatures,
    262,
    'INVOICE',
    'TAX',
    '17603319',
    '1316316.1',
    'zx_dist_var_pop.sql Pattern 3',
    'Invoices on Distribution or Line Variance hold where the amount of the tax distributions in EBTax does not match the amounts in Payables.',
    'Apply the GDF patch following the instructions provided in [1316316.1] (Section 5)',
    'Y',
    'Y',
    impact_area_tbl('EBTax', 'Invoice Holds', 'Validation Selection'),
    'SELECT /*+ ordered use_nl(ai, ah) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            ah.hold_lookup_code
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_holds_all ah
     WHERE ai.invoice_id = invs.invoice_id
     AND   nvl(ai.historical_flag,''N'') <> ''Y''
     AND   ai.cancelled_date is null
     AND   ah.invoice_id = ai.invoice_id
     AND   ah.hold_lookup_code IN (''DIST VARIANCE'',''LINE VARIANCE'')
     AND   ah.release_lookup_code IS NULL
     AND   (EXISTS (
              SELECT /*+ no_unnest leading(aid) index(zd zx_rec_nrec_dist_u1) */
                     null
              FROM ap_invoice_distributions_all aid,
                   zx_rec_nrec_dist zd
              WHERE aid.invoice_id = ai.invoice_id
              AND   aid.line_type_lookup_code IN (''REC_TAX'',''NONREC_TAX'',
                      ''TRV'',''TIPV'',''TERV'')
              AND   aid.detail_tax_dist_id is not null
              AND   zd.rec_nrec_tax_dist_id = aid.detail_tax_dist_id
              GROUP BY aid.detail_tax_dist_id, zd.rec_nrec_tax_amt
              HAVING zd.rec_nrec_tax_amt <> sum(aid.amount)) OR
            EXISTS (
              SELECT /*+ no_unnest leading(asad) index(zd zx_rec_nrec_dist_u1) */
                     null
              FROM ap_self_assessed_tax_dist_all asad,
                   zx_rec_nrec_dist zd
              WHERE asad.invoice_id = ai.invoice_id
              AND   asad.line_type_lookup_code IN (''REC_TAX'',''NONREC_TAX'')
              AND   asad.detail_tax_dist_id is not null
              AND   zd.rec_nrec_tax_dist_id = asad.detail_tax_dist_id
              AND   zd.rec_nrec_tax_amt <> asad.amount))'
  );


  add_signature(g_signatures,
    264,
    'INVOICE',
    'TAX',
    '12644252',
    '1316316.1',
    'zx_frz_mig_tax_dist.sql',
    'Migrated invoices have unfrozen tax distributions and lines.',
    'Apply the generic data fix patch {12644252} as described in [1316316.1]',
    'Y',
    'N',
    impact_area_tbl('EBTax', 'Validation Selection'),
    'SELECT /*+ ordered use_nl(ai, zd) */
            ai.invoice_id,
            ai.invoice_num,
            ai.invoice_date,
            ai.org_id,
            zd.rec_nrec_tax_dist_id,
            zd.freeze_flag
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          zx_rec_nrec_dist zd
     WHERE nvl(ai.historical_flag,''N'') = ''Y''
     AND   ai.cancelled_date is null
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.detail_tax_dist_id = zd.rec_nrec_tax_dist_id
             AND   aid.line_type_lookup_code IN (''REC_TAX'', ''NONREC_TAX'',
                     ''TRV'', ''TIPV'', ''TERV'')
             AND   nvl(aid.historical_flag,''N'') = ''Y''
             AND   ((aid.accounting_event_id is not null AND
                     aid.charge_applicable_to_dist_id is not null) OR
                    aid.charge_applicable_to_dist_id is null))
     AND   zd.application_id = 200
     AND   zd.entity_code = ''AP_INVOICES''
     AND   zd.event_class_code IN (''STANDARD INVOICES'',
             ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
     AND   zd.record_type_code = ''MIGRATED''
     AND   nvl(zd.historical_flag,''N'') = ''Y''
     AND   nvl(zd.freeze_flag, ''N'') <> ''Y''
     AND   zd.trx_id = ai.invoice_id
     AND   ai.invoice_id = invs.invoice_id'
  );


  add_signature(g_signatures,
    388,
    'INVOICE',
    'TAX',
    '19170382',
    '1316316.1',
    'zx_lines_upd_offset_rate.sql',
    'Upgraded tax lines have a value in zx_lines.offset_tax_rate_code even when supplier site has offset tax calculation disabled causing issues in EMEA VAT Selection Based Reports and errors in invoice validation during tax calculation.',
    'Apply the GDF patch following the instructions provided in [1316316.1]',
    'Y',
    'N',
    impact_area_tbl('EBTax'),
    'SELECT DISTINCT
            ai.invoice_id,
            ai.invoice_date,
            ai.application_id,
            ai.legal_entity_id,
            ai.set_of_books_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          ap_invoices_all ai,
          ap_supplier_sites_all ss
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.vendor_site_id = ss.vendor_site_id
     AND   nvl(ss.offset_tax_flag,''Y'') = ''N''
     AND   ai.historical_flag = ''Y''
     AND   EXISTS (
             SELECT 1 FROM zx_lines zx
             WHERE zx.application_id = ai.application_id
             AND   zx.legal_entity_id = ai.legal_entity_id
             AND   zx.ledger_id = ai.set_of_books_id
             AND   zx.trx_date = ai.invoice_date
             AND   zx.entity_code = ''AP_INVOICES''
             AND   zx.event_class_code IN (''STANDARD INVOICES'',
                     ''PREPAYMENT INVOICES'', ''EXPENSE REPORTS'')
             AND   zx.trx_id = ai.invoice_id
             AND   zx.record_type_code = ''MIGRATED''
             AND   nvl(zx.offset_flag,''Y'') = ''N''
             AND   zx.offset_tax_rate_code is not null)'
  );


  add_signature(g_signatures,
    411,
    'INVOICE',
    'TAX',
    '19493720',
    '1152123.1',
    'zx_sync_inv_exc_rate.sql',
    'When invoice exchange rates, dates, or type are modified on an invoice with cancelled tax lines, the change is not reflected in all ZX (EBTax) tables',
    'Apply patch {19493720} and revalidate the affected invoice as per the instructions provided in [1152123.1] (Section 11)',
    'Y',
    'N',
    impact_area_tbl('EBTax'),
    'WITH invs AS (
       ##$$MIVIEW$$##
     )
     SELECT /*+ ordered use_nl(ai, zldf) */
            ai.invoice_id,
            ai.invoice_num,
            ai.exchange_date,
            ai.exchange_rate_type,
            ai.exchange_rate,
            zldf.currency_conversion_date,
            zldf.currency_conversion_type,
            zldf.currency_conversion_rate,
            ''ZX_LINES_DET_FACTORS'' data_location
     FROM invs,
          ap_invoices_all ai,
          zx_lines_det_factors zldf
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = zldf.trx_id
     AND   ai.org_id = zldf.internal_organization_id
     AND   zldf.application_id = 200
     AND   zldf.entity_code = ''AP_INVOICES''
     AND   zldf.event_class_code IN (''STANDARD INVOICES'',
             ''PREPAYMENT INVOICES'',''EXPENSE REPORTS'')
     AND   (ai.exchange_date != zldf.currency_conversion_date OR
            ai.exchange_rate_type != zldf.currency_conversion_type OR
            ai.exchange_rate != zldf.currency_conversion_rate)
     UNION ALL
     SELECT /*+ ordered use_nl(ai, zls) */
            ai.invoice_id,
            ai.invoice_num,
            ai.exchange_date,
            ai.exchange_rate_type,
            ai.exchange_rate,
            zls.currency_conversion_date,
            zls.currency_conversion_type,
            zls.currency_conversion_rate,
            ''ZX_LINES_SUMMARY-STANDARD INV''
     FROM invs,
          ap_invoices_all ai,
          zx_lines_summary zls
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = zls.trx_id
     AND   ai.org_id = zls.internal_organization_id
     AND   zls.application_id = 200
     AND   zls.entity_code = ''AP_INVOICES''
     AND   zls.event_class_code = ''STANDARD INVOICES''
     AND   (ai.exchange_date != zls.currency_conversion_date OR
            ai.exchange_rate_type != zls.currency_conversion_type OR
            ai.exchange_rate != zls.currency_conversion_rate)
     UNION ALL
     SELECT /*+ ordered use_nl(ai, zls) */
            ai.invoice_id,
            ai.invoice_num,
            ai.exchange_date,
            ai.exchange_rate_type,
            ai.exchange_rate,
            zls.currency_conversion_date,
            zls.currency_conversion_type,
            zls.currency_conversion_rate,
            ''ZX_LINES_SUMMARY-PREPAY INV''
     FROM invs,
          ap_invoices_all ai,
          zx_lines_summary zls
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = zls.trx_id
     AND   ai.org_id = zls.internal_organization_id
     AND   zls.application_id = 200
     AND   zls.entity_code = ''AP_INVOICES''
     AND   zls.event_class_code = ''PREPAYMENT INVOICES''
     AND   (ai.exchange_date != zls.currency_conversion_date OR
            ai.exchange_rate_type != zls.currency_conversion_type OR
            ai.exchange_rate != zls.currency_conversion_rate)
     UNION ALL
     SELECT /*+ ordered use_nl(ai, zls) */
            ai.invoice_id,
            ai.invoice_num,
            ai.exchange_date,
            ai.exchange_rate_type,
            ai.exchange_rate,
            zls.currency_conversion_date,
            zls.currency_conversion_type,
            zls.currency_conversion_rate,
            ''ZX_LINES_SUMMARY-EXP REPORT''
     FROM invs,
          ap_invoices_all ai,
          zx_lines_summary zls
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = zls.trx_id
     AND   ai.org_id = zls.internal_organization_id
     AND   zls.application_id = 200
     AND   zls.entity_code = ''AP_INVOICES''
     AND   zls.event_class_code = ''EXPENSE REPORTS''
     AND   (ai.exchange_date != zls.currency_conversion_date OR
            ai.exchange_rate_type != zls.currency_conversion_type OR
            ai.exchange_rate != zls.currency_conversion_rate)
     UNION ALL
     SELECT /*+ ordered use_nl(ai, zl) */
            ai.invoice_id,
            ai.invoice_num,
            ai.exchange_date,
            ai.exchange_rate_type,
            ai.exchange_rate,
            zl.currency_conversion_date,
            zl.currency_conversion_type,
            zl.currency_conversion_rate,
            ''ZX_LINES''
     FROM invs,
          ap_invoices_all ai,
          zx_lines zl
     WHERE ai.invoice_id = invs.invoice_id
     AND   ai.invoice_id = zl.trx_id
     AND   ai.org_id = zl.internal_organization_id
     AND   zl.application_id = 200
     AND   zl.entity_code = ''AP_INVOICES''
     AND   zl.event_class_code IN (''STANDARD INVOICES'',
             ''PREPAYMENT INVOICES'',''EXPENSE REPORTS'')
     AND   (ai.exchange_date != zl.currency_conversion_date OR
            ai.exchange_rate_type != zl.currency_conversion_type OR
            ai.exchange_rate != zl.currency_conversion_rate)'
  );


  add_signature(g_signatures,
    412,
    'INVOICE',
    'TAX',
    '19916280',
    '1316316.1',
    'zx_hq_estb_reg_num.sql',
    'The HQ Establishment Registration Number is populated with NULL or an incorrect value on tax lines which impacts EMEA VAT Reports',
    'Apply the GDF patch following the instructions provided in [1316316.1] (SECTION 34)',
    'Y',
    'N',
    impact_area_tbl('EBTax'),
    'SELECT DISTINCT
            zl.trx_id,
            zl.trx_number,
            zl.trx_date,
            zl.legal_entity_id,
            zl.application_id
     FROM (
            ##$$IVIEW$$##
          ) invs,
          zx_lines zl
     WHERE zl.trx_id = invs.invoice_id
     AND   zl.application_id = 200
     AND   zl.entity_code = ''AP_INVOICES''
     AND   EXISTS (
             SELECT 1
             FROM zx_registrations reg,
                  xle_etb_profiles etb,
                  zx_party_tax_profile ptp
             WHERE ptp.party_id = etb.party_id
             AND   ptp.party_type_code = ''LEGAL_ESTABLISHMENT''
             AND   etb.main_establishment_flag = ''Y''
             AND   etb.legal_entity_id = zl.legal_entity_id
             AND   (nvl(zl.hq_estb_reg_number,''XX'') <>
                      nvl(ptp.rep_registration_number,reg.registration_number) OR
                    nvl(zl.hq_estb_party_tax_prof_id,-99) <> ptp.party_tax_profile_id)
             AND   reg.party_tax_profile_id (+) = ptp.party_tax_profile_id)'
  );


  add_signature(g_signatures,
    182,
    'PAYMENT',
    '',
    '10399037',
    '',
    'ap_awt_temp_dists_sel.sql',
    'Paid invoices with orphan distribution records in AP_AWT_TEMP_DISTRIBUTIONS_ALL',
    'Generate the APLIST output for affected checks and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT atd.payment_num,
            atd.org_id,
            atd.invoice_id,
            atd.gross_amount,
            atd.withholding_amount,
            atd.accounting_date,
            atd.checkrun_name,
            atd.awt_related_id
     FROM ap_awt_temp_distributions_all atd,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE atd.checkrun_id is not null
     AND   NOT EXISTS  (
             SELECT 1 FROM ap_selected_invoices_all asi
             WHERE  asi.checkrun_id = atd.checkrun_id
             AND    asi.invoice_id = atd.invoice_id)
     AND   NOT EXISTS  (
             SELECT 1 FROM ap_payment_schedules_all ps
             WHERE  ps.checkrun_id = atd.checkrun_id
             AND    ps.invoice_id = atd.invoice_id)
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip
             WHERE aip.reversal_inv_pmt_id is null
             AND   aip.invoice_id = atd.invoice_id
             AND   aip.check_id = chks.check_id)'
  );


  add_signature(g_signatures,
    183,
    'PAYMENT',
    '',
    '',
    '',
    'check_voided_unclearing_missing.sql',
    'Cleared and canceled checks with missing unclearing events',
    'Generate the APLIST output for affected checks and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.payment_type_flag,
            ac.status_lookup_code,
            ac.cleared_date,
            ac.cleared_amount,
            ac.payment_id
     FROM ap_checks_all ac,
          ap_invoice_payments_all aip,
          ap_payment_history_all aph,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.check_id = aip.check_id
     AND   ac.check_id = aph.check_id
     AND   ac.status_lookup_code = ''VOIDED''
     AND   ac.void_date is not null
     AND   aip.reversal_flag = ''Y''
     AND   aip.REVERSAL_INV_PMT_ID is not null
     AND   aph.transaction_type = ''PAYMENT CLEARING''
     AND   EXISTS (
             SELECT ''1'' FROM ap_payment_history_all aph2
             WHERE ac.check_id = aph2.check_id
             AND   aph2.transaction_type = ''PAYMENT CANCELLED'')
     AND   NOT EXISTS (
             SELECT ''1'' FROM ap_payment_history_all aph3
             WHERE ac.check_id = aph3.check_id
             AND   aph3.transaction_type = ''PAYMENT UNCLEARING'')
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    288,
    'PAYMENT',
    '',
    '',
    '',
    'ap_incorrect_future_pay_sel.sql',
    'Checks with payment method not setup for bills payable but which have future_pay_due_date populated causing the payments not to be accounted.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.status_lookup_code,
            ac.org_id,
            ac.amount,
            nvl(ibp.bill_payable_flag,''N''),
            ibp.maturity_date,
            ac.future_pay_due_date,
            aph.payment_history_id,
            aph.accounting_event_id,
            aph.transaction_type,
            aph.posted_flag
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          iby_payments_all ibp
     WHERE ac.check_id = chks.check_id
     AND   aph.check_id = ac.check_id
     AND   ibp.payment_id = ac.payment_id
     AND   ibp.payment_method_code = ac.payment_method_code
     AND   nvl(ibp.bill_payable_flag,''N'')  = ''N''
     AND   ac.future_pay_due_date is not null
     AND   ac.status_lookup_code <> ''ISSUED''
     AND   ac.void_date is null
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all aph2
             WHERE aph2.check_id=aph.check_id
             AND   aph2.transaction_type= ''PAYMENT MATURITY'')'
  );


  add_signature(g_signatures,
    386,
    'PAYMENT',
    '',
    '',
    '',
    'ap_repopulate_le_upgraded_checks_sel.sql',
    'Some upgraded checks have the legal entity populated as 0',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Payment Data'),
    'SELECT ac.check_id,
            ac.bank_account_id,
            ac.legal_entity_id,
            ac.ce_bank_acct_use_id,
            ac.legal_entity_id new_legal_entity_id,
            ac.ce_bank_acct_use_id new_ce_bank_acct_use_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac
     WHERE ac.check_id = chks.check_id
     AND   nvl(ac.legal_entity_id, 0) = 0
     AND   EXISTS (
             SELECT 1 FROM ap_payment_history_all aph
             WHERE aph.check_id = ac.check_id
             AND   aph.transaction_type in (''PAYMENT CREATED'', ''REFUND RECORDED'')
             AND   aph.historical_flag = ''Y'')'
  );


  add_signature(g_signatures,
    389,
    'PAYMENT',
    '',
    '',
    '',
    'ap_invalid_pay_event_sel.sql',
    'Upgraded payments with when_to_account_pmt set to CLEARING ONLY failed to create PAYMENT CREATED events in 11i causing any further accounting processing to fail in R12.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT DISTINCT
            aph.check_id,
            aph.payment_history_id,
            aph.transaction_type,
            aph.accounting_date,
            asp.set_of_books_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph,
          ap_system_parameters_all asp
     WHERE aph.check_id = chks.check_id
     AND aph.org_id = asp.org_id
     AND asp.when_to_account_pmt = ''CLEARING ONLY''
     AND NVL(aph.posted_flag, ''N'') <> ''Y''
     AND NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all aph2
             WHERE aph2.check_id = aph.check_id
             AND   aph2.transaction_type = ''PAYMENT CREATED'')'
  );


  add_signature(g_signatures,
    395,
    'PAYMENT',
    '',
    '',
    '',
    'ap_ce_check_status_mismatch_sel.sql',
    'Checks with incorrect status which are out of sync with data in the Cash Management (CE) tables.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Payment Data', 'Payment Selection'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT ac.check_id,
            ac.check_number,
            ac.check_date,
            ac.amount,
            ac.vendor_name,
            ac.status_lookup_code,
            ac.org_id,
            ac.cleared_amount,
            ac.cleared_date,
            CASE aph.posted_flag
              WHEN ''Y'' THEN
                CASE aph.matched_flag
                  WHEN ''Y'' THEN ''RECONCILED''
                  WHEN ''N'' THEN ''CLEARED''
                END
              WHEN ''N'' THEN
                CASE aph.matched_flag
                  WHEN ''Y'' THEN ''RECONCILED UNACCOUNTED''
                  WHEN ''N'' THEN ''CLEARED BUT UNACCOUNTED''
                END
            END correct_status
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          ap_payment_history_all aph
     WHERE ac.check_id = chks.check_id
     AND   ac.org_id = asp.org_id
     AND   asp.recon_accounting_flag = ''Y''
     AND   ac.status_lookup_code = ''NEGOTIABLE''
     AND   ac.check_id = aph.check_id
     AND   aph.transaction_type = ''PAYMENT CLEARING''
     AND   aph.payment_history_id = (
             SELECT max(aph2.payment_history_id)
             FROM ap_payment_history_all aph2
             WHERE aph2.transaction_type IN (''PAYMENT CLEARING'',''PAYMENT UNCLEARING'')
             AND   ac.check_id = aph2.check_id)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all aph1
             WHERE ac.check_id = aph1.check_id
             AND   aph1.transaction_type = ''PAYMENT CANCELLED'')
     AND   EXISTS (
             SELECT 1
             FROM ce_statement_reconcils_all csr,
                  ce_statement_lines csl
             WHERE csr.statement_line_id = csl.statement_line_id
             AND   csl.status = ''RECONCILED''
             AND   csr.reference_type = ''PAYMENT''
             AND   csr.reference_id = ac.check_id
             AND   csr.status_flag = ''M''
             AND   csr.current_record_flag = ''Y'')
     UNION
     SELECT ac.check_id,
            ac.check_number,
            ac.check_date,
            ac.amount,
            ac.vendor_name,
            ac.status_lookup_code,
            ac.org_id,
            ac.cleared_amount,
            ac.cleared_date,
            ''NEGOTIABLE''
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp
     WHERE ac.check_id = chks.check_id
     AND   ac.org_id = asp.org_id
     AND   asp.recon_accounting_flag = ''Y''
     AND   ac.status_lookup_code IN (''RECONCILED'',''RECONCILED UNACCOUNTED'')
     AND   ac.check_id NOT IN (
             SELECT aph.check_id FROM ap_payment_history_all aph
             WHERE aph.check_id = ac.check_id
             AND   aph.transaction_type = ''PAYMENT CLEARING''
             AND   aph.payment_history_id = (
                     SELECT max(aph2.payment_history_id)
                     FROM ap_payment_history_all aph2
                     WHERE aph2.transaction_type IN (''PAYMENT CLEARING'',
                             ''PAYMENT UNCLEARING'')
                     AND   ac.check_id = aph2.check_id))
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all aph1
              WHERE ac.check_id = aph1.check_id
              AND   aph1.transaction_type IN (''PAYMENT CANCELLED'',
                      ''REFUND CANCELLED'' ))
     AND   NOT EXISTS (
             SELECT 1
             FROM ce_statement_reconcils_all csr,
                  ce_statement_lines csl
             WHERE csr.statement_line_id = csl.statement_line_id
             AND   csl.status = ''RECONCILED''
             AND   csr.reference_type = ''PAYMENT''
             AND   csr.reference_id = ac.check_id
             AND   csr.status_flag = ''M''
             AND   csr.current_record_flag = ''Y'')
     UNION
     SELECT ac.check_id,
            ac.check_number,
            ac.check_date,
            ac.amount,
            ac.vendor_name,
            ac.status_lookup_code,
            ac.org_id,
            ac.cleared_amount,
            ac.cleared_date,
            ''CLEARED''
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp
     WHERE ac.check_id = chks.check_id
     AND   ac.org_id = asp.org_id
     AND   asp.recon_accounting_flag = ''Y''
     AND   ac.status_lookup_code NOT IN (''CLEARED'')
     AND   ac.check_id IN (
             SELECT aph.check_id FROM ap_payment_history_all aph
             WHERE aph.check_id = ac.check_id
             AND   aph.transaction_type = ''PAYMENT CLEARING''
             AND   aph.payment_history_id = (
                     SELECT max(aph2.payment_history_id)
                     FROM ap_payment_history_all aph2
                     WHERE aph2.transaction_type IN (''PAYMENT CLEARING'',
                             ''PAYMENT UNCLEARING'')
                      AND   ac.check_id = aph2.check_id))
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all aph1
             WHERE ac.check_id = aph1.check_id
             AND   aph1.transaction_type IN (''PAYMENT CANCELLED'',
                     ''REFUND CANCELLED'' ))
     AND   NOT EXISTS (
             SELECT 1
             FROM ce_statement_reconcils_all csr,
                  ce_statement_lines csl
             WHERE csr.statement_line_id = csl.statement_line_id
             AND   csl.status = ''RECONCILED''
             AND   csr.reference_type = ''PAYMENT''
             AND   csr.reference_id = ac.check_id
             AND   csr.status_flag = ''M''
             AND   csr.current_record_flag = ''Y'')'
  );


  add_signature(g_signatures,
    407,
    'PAYMENT',
    '',
    '15867522',
    '1174813.1',
    'ap_inv_pmt_insert_sel.sql',
    'Checks for which there is no associated invoice in AP_INVOICE_PAYMENTS.',
    'Apply the root cause fix from bug {15867522} if you have not done so, and log a Service Request to obtain the data fix. AFTER applying the data-fix follow the instructions in [1174813.1] to apply the indicated GDF patch and complete the fix.',
    'N',
    'Y',
    impact_area_tbl('Payment Data'),
    'SELECT ac.check_id,
            ac.status_lookup_code,
            ac.org_id,
            ai.invoice_id,
            aisc.checkrun_name,
            aisc.status,
            ai.invoice_id,
            ai.invoice_num
     FROM  (
              ##$$CVIEW$$##
           ) chks,
           ap_checks_all ac,
           iby_docs_payable_all idp,
           fnd_currencies fc,
           ap_payment_schedules_all ps,
           ap_invoices_all ai,
           ce_gl_accounts_ccid cegl,
           ap_payment_history_all aph,
           ap_inv_selection_criteria_all aisc
     WHERE ac.check_id = chks.check_id
     AND   ac.status_lookup_code NOT IN  (''OVERFLOW'',''SET UP'',
             ''SPOILED'', ''VOIDED'')
     AND   idp.calling_app_doc_unique_ref1 = aisc.checkrun_id
     AND   idp.calling_app_doc_unique_ref2 = ai.invoice_id
     AND   idp.calling_app_doc_unique_ref3 = ps.payment_num
     AND   idp.completed_pmts_group_id = ac.completed_pmts_group_id
     AND   idp.org_type = ''OPERATING_UNIT''
     AND   ac.payment_id = idp.payment_id
     AND   idp.payment_currency_code = fc.currency_code
     AND   ps.invoice_id(+) = ai.invoice_id
     AND   ac.ce_bank_acct_use_id = cegl.bank_acct_use_id
     AND   aph.check_id = ac.check_id
     AND   aph.transaction_type IN (''PAYMENT CREATED'',''REFUND RECORDED'')
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_invoice_payments_all p
             WHERE p.check_id = ac.check_id
             AND   idp.calling_app_doc_unique_ref2 = p.invoice_id
             AND   idp.calling_app_doc_unique_ref3 = p.payment_num)'
  );


  add_signature(g_signatures,
    414,
    'PAYMENT',
    '',
    '',
    '',
    'ap_upg_pay_changed_setup_sel.sql',
    'Payment cancellation events are not getting accounted for upgraded payments when the "When to Account Payment" set up option is changed',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            xte.entity_id,
            xte.source_id_int_1 transaction_id,
            xte.entity_code,
            xte.ledger_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          ap_payment_history_all aph,
          xla_events xe,
          xla_ae_headers xah,
          xla_ae_lines xal,
          ap_payment_history_all aph1,
          xla_transaction_entities_upg xte
     WHERE ac.check_id = chks.check_id
     AND   asp.org_id = ac.org_id
     AND   aph.check_id = ac.check_id
     AND   aph.transaction_type = ''PAYMENT CREATED''
     AND   aph.posted_flag = ''Y''
     AND   nvl(aph.historical_flag, ''N'') = ''Y''
     AND   aph1.check_id = ac.check_id
     AND   aph1.related_event_id = aph.accounting_event_id
     AND   aph1.rev_pmt_hist_id = aph.payment_history_id
     AND   aph1.transaction_type = ''PAYMENT CANCELLED''
     AND   aph1.posted_flag = ''N''
     AND   xe.event_id = aph.accounting_event_id
     AND   xe.event_status_code = ''P''
     AND   nvl(xe.upg_batch_id, -9999) <> -9999
     AND   xah.application_id = 200
     AND   xah.event_id = xe.event_id
     AND   xah.ae_header_id = xal.ae_header_id
     AND   xah.upg_batch_id is not null
     AND   xal.application_id = 200
     AND   ((xal.accounting_class_code = ''CASH'' AND
             asp.recon_accounting_flag = ''Y'') OR
            (xal.accounting_class_code = ''CASH CLEARING'' AND
             asp.recon_accounting_flag = ''N''))
     AND   xte.application_id = 200
     AND   xte.entity_id = xe.entity_id
     AND   xte.entity_id = xah.entity_id
     AND   NOT EXISTS (
             SELECT 1 FROM xla_distribution_links xdl
             WHERE xdl.application_id = 200
             AND   xdl.ae_header_id = xah.ae_header_id)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_hist_dists aphd
             WHERE aphd.accounting_event_id = xe.event_id
             AND   aphd.payment_history_id = aph.payment_history_id)'
  );


  add_signature(g_signatures,
    195,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'pop_business_code.sql',
    'Checks with missing or invalid business class on the accounting lines',
    'Generate the APLIST output for affected checks and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph.check_id,
            aph.org_id,
            aph.accounting_event_id,
            h.ae_header_id,
            l.ae_line_num,
            l.accounting_class_code,
            l.business_class_code,
            h.upg_batch_id
     FROM xla_ae_lines l,
          xla_ae_headers h,
          ap_payment_history_all aph,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.accounting_event_id = h.event_id
     AND   h.application_id = 200
     AND   h.ae_header_id = l.ae_header_id
     AND   l.application_id = 200
     AND   aph.posted_flag = ''Y''
     AND   aph.transaction_type IN(''MANUAL PAYMENT ADJUSTED'', ''PAYMENT CREATED'')
     AND   l.accounting_class_code IN (''CASH_CLEARING'', ''FUTURE_DATED_PMT'')
     AND   (l.business_class_code is null OR
            (l.business_class_code like ''%AP_FUTURE_DTD_PMT%'' AND
             l.business_class_code != ''AP_FUTURE_DTD_PMT''))
     AND   EXISTS (
             SELECT 1 FROM ap_payment_history_all h2
             WHERE h2.check_id = aph.check_id
             AND   h2.transaction_type like ''%CLEARING%''
             AND   nvl(h2.posted_flag,    ''N'') != ''Y'')
     AND   aph.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    196,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'pay_clr_has_x_mcr.sql',
    'incorrect maturity to clearing rounding record in Payment Hist dists',
    'Generate the APLIST output for affected checks and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph.check_id,
            aph.org_id,
            aph.accounting_event_id
     FROM ap_payment_history_all aph,
          ap_payment_hist_dists mcr,
          ap_payment_hist_dists aphd,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.posted_flag = ''Y''
     AND   aph.transaction_type LIKE ''PAYMENT%CLEAR%''
     AND   aph.payment_history_id = mcr.payment_history_id
     AND   mcr.pay_dist_lookup_code = ''MATURITY TO CLEARING ROUNDING''
     AND   mcr.matured_base_amount = -1 * aphd.rounding_amt
     AND   aph.payment_history_id = aphd.payment_history_id
     AND   mcr.invoice_distribution_id = aphd.invoice_distribution_id
     AND   aphd.pay_dist_lookup_code = ''CASH''
     AND   aphd.amount != 0
     AND   aph.historical_flag is null
     AND   aphd.matured_base_amount = 0
     AND   aph.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    197,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'pay_has_dup_adj.sql',
    'Checks with duplicate adjustment events for a single invoice adjustment',
    'Generate the APLIST output for affected checks and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph.check_id,
            aph.invoice_adjustment_event_id,
            count(*) cnt
     FROM ap_payment_history_all aph,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.transaction_type in (''PAYMENT CLEARING ADJUSTED'',
             ''PAYMENT MATURITY ADJUSTED'')
     AND   nvl(aph.historical_flag, ''N'') != ''Y''
     AND   aph.check_id = chks.check_id
     GROUP BY aph.check_id, aph.transaction_type, aph.invoice_adjustment_event_id
     HAVING   count(*) > 1'
  );


  add_signature(g_signatures,
    199,
    'PAYMENT',
    'ACCOUNTING',
    '9784405',
    '',
    'ap_event_x_seq_sel.sql',
    'Unable to account Payment/Refund Cancelled or Payment Unclearing events when the Payment/Refund Cancelled event_id is less than the Payment Created event_id or the Payment Unclearing event_id is less than the Payment Clearing event_id causing the events to be processed in the wrong order.',
    'Apply the root cause fix from bug {9784405} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT
            aph.check_id,
            aph.org_id,
            aph.transaction_type,
            aph.accounting_event_id,
            aph.related_event_id,
            xe.entity_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph,
          xla_events xe
     WHERE aph.check_id = chks.check_id
     AND   aph.accounting_event_id < aph.related_event_id
     AND   aph.posted_flag <> ''Y''
     AND   aph.accounting_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   ((aph.transaction_type in (''PAYMENT CANCELLED'', ''REFUND CANCELLED'') AND
             NOT EXISTS (
               SELECT 1 FROM xla_events xe2
               WHERE xe2.entity_id = xe.entity_id
               AND   xe2.process_status_code = ''P''
               AND   xe2.application_id = 200)) OR
            (aph.transaction_type IN (''PAYMENT UNCLEARING'') AND
             NOT EXISTS (
               SELECT 1 FROM xla_events xe2
               WHERE xe2.event_id = aph.related_event_id
               AND   xe2.process_status_code = ''P''
               AND   xe2.application_id = 200)))'
  );


  add_signature(g_signatures,
    200,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'pay_tech_round_bca.sql',
    'Incorrect rounding for the bank currency amount resulting in errors in accounting of the Payment Clearing Adjusted event',
    'Generate the APLIST output for affected checks and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph.check_id,
            aph.org_id,
            aph.accounting_event_id,
            aph.related_event_id
     FROM ap_payment_history_all aph,
          ap_payment_hist_dists aphd,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.payment_history_id = aphd.payment_history_id
     AND   aph.transaction_type = ''PAYMENT CLEARING ADJUSTED''
     AND   aph.posted_flag = ''Y''
     AND   aphd.pay_dist_lookup_code = ''CASH''
     AND   aph.historical_flag is null
     AND   aph.bank_currency_code = aph.pmt_currency_code
     AND   aphd.amount != aphd.bank_curr_amount
     AND   aph.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    201,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    '11i_awt_issue.sql',
    'Withholding (AWT) distributions with a null awt_related_id, resulting in a business flow error when accounting the payment',
    'Generate the APLIST output for affected checks and log a Service Request',
    'N',
    'N',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id
     FROM ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE EXISTS (
             SELECT 1
             FROM ap_invoice_distributions_all aid,
                  ap_invoice_payments_all aip
             WHERE aip.invoice_id = aid.invoice_id
             AND   aid.line_type_lookup_code = ''AWT''
             AND   aid.awt_related_id is null
             AND   aid.awt_invoice_payment_id is not null
             AND   aid.historical_flag = ''Y''
             AND   ac.check_id = aip.check_id)
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    202,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '751160.1',
    'Check_Migration_Status.sql',
    'Periods containing selected transactions for which the XLA hot patch has not been run, potentially resulting in the accounting error ''Error 0 - This line cannot be Accounted till the line it references has been Accounted''',
    'If your selected transactions or related transactions are encountering the error described, please review [751160.1] and implement the solution option that best meets your needs.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT glps.period_name,
            glps.start_date,
            glps.end_date,
            asp.set_of_books_id,
            glps.application_id,
            glps.adjustment_period_flag
     FROM ap_checks_all ac,
          ap_system_parameters_all asp,
          gl_period_statuses glps,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.org_id = asp.org_id
     AND   EXISTS (
             SELECT 1
             FROM ap_payment_history_all aph,
                  xla_ae_headers xah
             WHERE aph.check_id = ac.check_id
             AND   aph.historical_flag = ''Y''
             AND   aph.accounting_event_id = xah.event_id
             AND   xah.accounting_entry_status_code = ''F''
             AND   xah.application_id = 200
             AND   xah.upg_batch_id is not null
             AND   xah.upg_batch_id <> -9999)
     AND   ac.check_date BETWEEN glps.start_date AND glps.end_date
     AND   glps.set_of_books_id = asp.set_of_books_id
     AND   nvl(glps.adjustment_period_flag, ''N'') = ''N''
     AND   glps.application_id = 200
     AND   glps.migration_status_code is null
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    203,
    'PAYMENT',
    'ACCOUNTING',
    '10012304',
    '',
    'ap_manual_pay_adj_sel.sql',
    'Invalid manual payment adjusted events resulting in incorrect accounting',
    'Generate the APLIST output for affected checks and log a Service Request',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aph.payment_history_id,
            aph.transaction_type,
            aip.invoice_payment_id,
            ac.check_date,
            ac.void_date,
            ac.bank_account_num,
            ac.vendor_name,
            aph.accounting_event_id event_id
     FROM ap_payment_history_all aph,
          ap_invoice_payments_all aip,
          ap_invoice_payments_all aip2,
          ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.transaction_type = ''MANUAL PAYMENT ADJUSTED''
     AND   aph.accounting_event_id = aip.accounting_event_id
     AND   aph.check_id = aip.check_id
     AND   aph.check_id = ac.check_id
     AND   aip.reversal_inv_pmt_id = aip2.invoice_payment_id
     AND   aip2.check_id = aip.check_id
     AND   aip.posted_flag = ''Y''
     AND   aph.posted_flag = ''Y''
     AND   aip2.posted_flag = ''Y''
     AND   aph.check_id IN (
             SELECT aph2.check_id FROM ap_payment_history_all aph2
             WHERE posted_flag = ''N'')
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip3
             WHERE aip3.check_id = aip.check_id
             AND   aip3.accounting_event_id = aip.accounting_event_id
             AND   aip3.invoice_id <> aip.invoice_id)
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    285,
    'PAYMENT',
    'ACCOUNTING',
    '10623466',
    '',
    'ap_clr_adj_bank_amt_null.sql',
    'Payment clearing events are not accounting because the related invoice has a prior payment clearing adjusted event which is incorrectly accounted. The failure message is "The subledger journal entry does not balance in the entered currency."',
    'Apply the root cause fix from bug {10623466} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT aph1.check_id clr_check_id,
            aph1.transaction_type,
            aip1.invoice_id,
            aph2.check_id clr_adj_check_id,
            aph2.bank_currency_code,
            aph2.accounting_event_id adj_event_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph1,
          ap_payment_history_all aph2,
          ap_invoice_payments_all aip1,
          ap_invoice_payments_all aip2
     WHERE aph1.check_id = chks.check_id
     AND   aph1.posted_flag = ''N''
     AND   aph1.transaction_type like ''PAYMENT%CLEARING%''
     AND   aph1.check_id = aip1.check_id
     AND   aip1.invoice_id = aip2.invoice_id
     AND   aip2.check_id = aph2.check_id
     AND   aph2.transaction_type = ''PAYMENT CLEARING ADJUSTED''
     AND   aph2.bank_currency_code is not null
     AND   aph2.posted_flag = ''Y''
     AND   nvl (aph2.historical_flag, ''N'') = ''N''
     AND   EXISTS (
             SELECT 1 FROM ap_payment_hist_dists aphd
             WHERE aphd.accounting_event_id = aph2.accounting_event_id
             AND   aphd.pay_dist_lookup_code= ''DISCOUNT''
             AND   aphd.bank_curr_amount is null)'
  );


  add_signature(g_signatures,
    286,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_del_clr_adj_recon_n_sel.sql',
    'Payment clearing adjustment will not account because the corresponding payment adjustment event is acounted with CASH instead of CASH_CLEARING.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph.payment_history_id,
            aph.accounting_event_id,
            aph.check_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph,
          xla_events xe
     WHERE aph.check_id = chks.check_id
     AND   xe.event_id = aph.accounting_event_id
     AND   aph.posted_flag <> ''Y''
     AND   aph.transaction_type like ''%CLEARING%ADJ%''
     AND   xe.event_status_code <> ''P''
     AND   xe.application_id = 200
     AND   EXISTS (
             SELECT 1
             FROM  ap_payment_history_all h2,
                   xla_ae_headers xh,
                   xla_ae_lines xl
             WHERE h2.check_id = aph.check_id
             AND   aph.invoice_adjustment_event_id = h2.invoice_adjustment_event_id
             AND   h2.transaction_type = ''PAYMENT ADJUSTED''
             AND   h2.posted_flag = ''Y''
             AND   xh.event_id = h2.accounting_event_id
             AND   xl.ae_header_id = xh.ae_header_id
             AND   xl.application_id = 200
             AND   xh.application_id = 200
             AND   xl.accounting_class_code = ''CASH'')'
  );


  add_signature(g_signatures,
    287,
    'PAYMENT',
    'ACCOUNTING',
    '13043111',
    '1453591.1',
    'ap_fpr_erv_for_ipv.sql',
    'Payment accounting is incorrect due to incorrect final pay rounding when there exsists an exchange rate variance (ERV) for an invoice price variance (IPV). This can cause fully paid invoices to appear on the trial balance',
    'Apply the root cause fix from bug {13043111} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'Trial Balance'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aip.accounting_event_id,
            aip.accounting_date,
            aip.amount,
            aip.invoice_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_invoice_payments_all aip,
          ap_payment_hist_dists aphd,
          ap_invoice_distributions_all aid_item,
          ap_invoice_distributions_all aid_erv,
          xla_ae_headers xah
     WHERE ac.check_id = chks.check_id
     AND   aip.check_id = ac.check_id
     AND   aip.invoice_base_amount <> 0
     AND   aip.accounting_event_id = aphd.accounting_event_id
     AND   xah.event_id = aphd.accounting_event_id
     AND   xah.upg_batch_id is null
     AND   aphd.invoice_payment_id  = aip.invoice_payment_id
     AND   aphd.accounting_event_id = aip.accounting_event_id
     AND   aphd.pay_dist_lookup_code = ''FINAL PAYMENT ROUNDING''
     AND   aphd.invoice_distribution_id = aid_item.invoice_distribution_id
     AND   aid_item.invoice_id = aid_erv.invoice_id
     AND   aid_item.line_type_lookup_code = ''IPV''
     AND   aid_erv.line_type_lookup_code = ''ERV''
     AND   aid_erv.related_id = aid_item.invoice_distribution_id
     AND   aphd.invoice_dist_base_amount = (-1 * aid_erv.base_amount)'
  );


  add_signature(g_signatures,
    291,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_paycreate_np_to_ui_sel.sql',
    'Payment created events with event_status_code/process_status_code of N/P (No Action/Processed) cause successive events to fail accounting. This can occur if payment accounting setup has been changed from "Clearing Only" to "Always"',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aph.accounting_event_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          ap_payment_history_all aph,
          xla_events xe
     WHERE ac.check_id = chks.check_id
     AND   ac.void_date is null
     AND   asp.org_id = ac.org_id
     AND   aph.check_id = ac.check_id
     AND   nvl(asp.when_to_account_pmt, ''X'') != ''CLEARING ONLY''
     AND   aph.transaction_type = ''PAYMENT CREATED''
     AND   aph.posted_flag = ''Y''
     AND   xe.event_id = aph.accounting_event_id
     AND   xe.event_status_code = ''N''
     AND   EXISTS (
             SELECT 1
             FROM ap_payment_history_all aph1,
                  xla_events xe1
             WHERE aph1.check_id = ac.check_id
             AND   xe1.event_id = aph1.accounting_event_id
             AND   aph1.transaction_type = ''PAYMENT CLEARING''
             AND   aph1.posted_flag = ''N''
             AND   xe1.event_id = aph1.accounting_event_id
             AND   xe1.event_status_code = ''U'')
     UNION  -- Setup was changed after accounting of pay created.
     SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aph.accounting_event_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          ap_payment_history_all aph,
          xla_events xe
     WHERE ac.check_id = chks.check_id
     AND   ac.void_date is not null
     AND   asp.org_id = ac.org_id
     AND   aph.check_id = ac.check_id
     AND   nvl(asp.when_to_account_pmt, ''X'') = ''CLEARING ONLY''
     AND   aph.transaction_type IN (''PAYMENT CANCELLED'' ,
             ''REFUND CANCELLED'')
     AND   aph.posted_flag = ''Y''
     AND   xe.event_id = aph.accounting_event_id
     AND   xe.event_status_code = ''N''
     AND   EXISTS (
             SELECT 1
             FROM ap_payment_history_all aph1,
                  xla_events xe1
             WHERE aph1.check_id = ac.check_id
             AND   xe1.event_id = aph1.accounting_event_id
             AND   aph1.transaction_type IN (''PAYMENT CREATED'',
                     ''REFUND RECORDED'')
             AND   aph1.posted_flag = ''Y''
             AND   aph.related_event_id = aph1.accounting_event_id
             AND   xe1.event_status_code = ''P''
             AND   xe1.application_id = 200)'
  );


  add_signature(g_signatures,
    299,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_r12_with_upg_xdl_sel.sql',
    'Incorrect accounting for upgraded payments due to duplicate distribution links records in the xla_distribution_links table: one where rounding_class_code populated and one where it is not.',
    'Apply the root cause fix from bug <BUG> if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph.check_id,
            aph.org_id,
            xah.ae_header_id,
            xah.ledger_id,
            xah.entity_id,
            xah.event_id,
            xah.event_type_code,
            xah.accounting_date,
            xah.gl_transfer_status_code,
            xah.accounting_entry_status_code,
            xah.description,
            xah.encumbrance_type_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
         ap_payment_history_all aph,
         xla_events xe,
         xla_ae_headers xah
     WHERE aph.check_id = chks.check_id
     AND   aph.posted_flag = ''Y''
     AND   aph.historical_flag = ''Y''
     AND   aph.accounting_event_id = xe.event_id
     AND   xe.upg_batch_id is not null
     AND   xe.upg_batch_id <> -9999
     AND   xe.application_id = 200
     AND   xah.event_id = xe.event_id
     AND   xah.application_id = 200
     AND   xah.upg_batch_id is null
     AND   EXISTS (
             SELECT 1 FROM ap_payment_hist_dists aphd
             WHERE aphd.accounting_event_id = aph.accounting_event_id
             AND   nvl(aphd.historical_flag, ''N'') != ''Y'')
     AND   EXISTS (
             SELECT 1 FROM xla_distribution_links xdl1
             WHERE xdl1.ae_header_id = xah.ae_header_id
             AND   xdl1.rounding_class_code is not null
             AND   xdl1.upg_batch_id is null
             AND   xdl1.application_id = 200
             AND   EXISTS (
                     SELECT 1
                     FROM xla_distribution_links xdl2
                     WHERE xdl2.ae_header_id = xdl1.ae_header_id
                     AND   xdl2.ae_line_num = xdl1.ae_line_num
                     AND   xdl2.source_distribution_id_num_1 =
                             xdl1.source_distribution_id_num_1
                     AND   xdl2.source_distribution_type = xdl1.source_distribution_type
                     AND   xdl2.rounding_class_code is null
                     AND   xdl2.upg_batch_id is null
                     AND   xdl2.application_id = 200))'
  );


  add_signature(g_signatures,
    301,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_ref_adj_x_evt_type_sel.sql',
    'Adjustments made to manual refunds cannot be accounted because they have an incorrect event type.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac.check_id,
            aph.payment_history_id,
            aph.accounting_event_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph
     WHERE ac.check_id = chks.check_id
     AND   aph.check_id = ac.check_id
     AND   ac.payment_type_flag = ''R''
     AND   aph.transaction_type = ''MANUAL PAYMENT ADJUSTED''
     AND   aph.posted_flag = ''N'''
  );


  add_signature(g_signatures,
    304,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_unclrg_ui_paycncl_np_sel.sql',
    'Payment unclearing for a voided payment will not account because its event status/process status are set to N/P (No Action/Processed). These need to be reset when using a payment accounting setup of "Clearing Only".',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aph.accounting_event_id
     FROM
          (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          ap_payment_history_all aph,
          xla_events xe
     WHERE ac.check_id = chks.check_id
     AND   ac.void_date is not null
     AND   asp.org_id = ac.org_id
     AND   aph.check_id = ac.check_id
     AND   asp.when_to_account_pmt = ''CLEARING ONLY''
     AND   aph.transaction_type = ''PAYMENT UNCLEARING''
     AND   aph.posted_flag = ''Y''
     AND   xe.event_id = aph.accounting_event_id
     AND   xe.event_status_code = ''N''
     AND   EXISTS (
             SELECT 1
             FROM ap_payment_history_all aph1,
                  xla_events xe1
             WHERE aph1.check_id = ac.check_id
             AND   xe1.event_id = aph1.accounting_event_id
             AND   aph1.transaction_type = ''PAYMENT CLEARING''
             AND   aph.posted_flag = ''Y''
             AND   aph1.payment_history_id = aph.rev_pmt_hist_id
             AND   xe1.event_id = aph1.accounting_event_id
             AND   xe1.event_status_code = ''P'')
     AND   EXISTS (
             SELECT 1
             FROM ap_payment_history_all aph1,
                  xla_events xe1
             WHERE aph1.check_id = ac.check_id
             AND   xe1.event_id = aph1.accounting_event_id
             AND   aph1.transaction_type IN (''PAYMENT CANCELLED'',
                     ''REFUND CANCELLED'')
             AND   aph.posted_flag = ''Y''
             AND   xe1.event_id = aph1.accounting_event_id
             AND   xe1.event_status_code = ''N'')'
  );


  add_signature(g_signatures,
    306,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_x_pay_clr_adj_sel.sql',
    'Payment clearing adjusted events will not account because the corresponding payment adjusted event is missing.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT h1.check_id,
            h1.org_id,
            h1.accounting_event_id,
            h1.payment_history_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all h1,
          xla_events xe
     WHERE h1.check_id = chks.check_id
     AND   h1.transaction_type like ''%CLEARING%ADJUSTED''
     AND   nvl(h1.posted_flag,''N'') != ''Y''
     AND   xe.event_id = h1.accounting_event_id
     AND   xe.event_status_code != ''P''
     AND   xe.application_id =200
     AND   EXISTS (
             SELECT 1 from ap_payment_history_all h2
             WHERE h1.check_id = h2.check_id
             AND   h2.transaction_type like ''%CANCELLED''
             AND   h2.posted_flag = ''Y'')
     AND   NOT EXISTS (
             SELECT 1 from ap_payment_history_all h3
             WHERE h3.check_id = h1.check_id
             AND   h3.transaction_type = ''PAYMENT ADJUSTED''
             AND   h3.invoice_adjustment_event_id = h1.invoice_adjustment_event_id)'
  );


  add_signature(g_signatures,
    335,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_pay_adj_gl_date_sel.sql',
    'Payment Adjusted events have accounting date prior to the Payment Creation accounting date.',
    'Apply the root cause fix from bug {10126192} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph1.check_id,
            aph1.accounting_date adj_accounting_date,
            aph2.accounting_date cr_accounting_date
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph1,
          ap_payment_history_all aph2
     WHERE aph1.check_id = chks.check_id
     AND   aph1.transaction_type = ''PAYMENT ADJUSTED''
     AND   aph1.posted_flag = ''Y''
     AND   aph1.check_id = aph2.check_id
     AND   aph1.org_id = aph2.org_id
     AND   aph2.transaction_type = ''PAYMENT CREATED''
     AND   aph2.posted_flag = ''Y''
     AND aph2.accounting_date > aph1.accounting_date'
  );


  add_signature(g_signatures,
    336,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '1273087.1',
    'ap_pay_adj_undo_canc_sel.sql',
    'Payments accounted incorrectly if the accounting for the Payment Adjusted event was undone after the Payment Cancelled event is accounted.',
    'Apply the root cause fix from bug {12914702} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph.check_id,
            ac.check_number,
            ac.org_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph,
          ap_payment_history_all aph1,
          ap_checks_all ac,
          xla_events xe,
          xla_ae_headers xah,
          xla_ae_headers xah1,
          ap_system_parameters_all asp
     WHERE ac.check_id = chks.check_id
     AND   aph.transaction_type IN (''PAYMENT ADJUSTED'')
     AND   aph.posted_flag = ''Y''
     AND   aph1.transaction_type IN (''PAYMENT CANCELLED'')
     AND   aph1.POSTED_FLAG = ''Y''
     AND   aph.check_id = ac.check_id
     AND   aph1.check_id = ac.check_id
     AND   ac.status_lookup_code = ''VOIDED''
     AND   ac.void_date is not null
     AND   nvl(aph.historical_flag, ''N'') = ''N''
     AND   nvl(aph1.historical_flag, ''N'') = ''N''
     AND   xe.event_id = aph.accounting_event_id
     AND   xah.event_id = xe.event_id
     AND   xe.application_id = 200
     AND   aph1.accounting_event_id = xah1.event_id
     AND   xah.ae_header_id > xah1.ae_header_id
     AND   xe.event_type_code = ''PAYMENT ADJUSTED''
     AND   xe.upg_batch_id = -9999
     AND   asp.org_id = aph.org_id
     AND   asp.set_of_books_id = xah.ledger_id
     AND   asp.set_of_books_id = xah1.ledger_id'
  );


  add_signature(g_signatures,
    337,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '1323394.1',
    'ap_pay_clr_x_bank_charge_sel.sql',
    'Payment Clearing events for payments with bank charge are incorrectly accounted.',
    'Apply the root cause fix from bug {10409166} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT aph.check_id,
            aph.org_id,
            aph.bank_currency_code,
            aph.transaction_type,
            aph.accounting_event_id
     FROM chks,
          ap_payment_history_all aph,
          ap_payment_hist_dists aphd
     WHERE aph.check_id = chks.check_id
     AND   aph.payment_history_id = aphd.payment_history_id
     AND   aph.transaction_type like ''PAYMENT CLEARING%''
     AND   aph.posted_flag = ''Y''
     AND   aphd.pay_dist_lookup_code = ''BANK CHARGE''
     AND   aph.bank_currency_code = aph.pmt_currency_code
     AND   nvl(aph.historical_flag, ''N'') != ''Y''
     AND   aphd.amount != aphd.bank_curr_amount
     UNION
     SELECT aph.check_id,
            aph.org_id,
            aph.bank_currency_code,
            aph.transaction_type,
            aph.accounting_event_id
     FROM chks,
          ap_payment_history_all aph,
          ap_payment_hist_dists aphd,
          ap_system_parameters_all asp
     WHERE aph.check_id = chks.check_id
     AND   aph.payment_history_id = aphd.payment_history_id
     AND   aph.transaction_type like ''PAYMENT CLEARING%''
     AND   aph.posted_flag = ''Y''
     AND   aphd.pay_dist_lookup_code = ''BANK CHARGE''
     AND   aph.bank_currency_code != aph.pmt_currency_code
     AND   asp.base_currency_code = aph.bank_currency_code
     AND   nvl(aph.historical_flag, ''N'') != ''Y''
     AND   aphd.cleared_base_amount != aphd.bank_curr_amount'
  );


  add_signature(g_signatures,
    338,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_pay_upg_cancel_x_event_num_sel.sql',
    'Upgraded Payment Cancellation events have incorrec event numbers impacting cash reconciliation reports.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph1.check_id,
            aph2.PAYMENT_HISTORY_ID,
            aph2.ACCOUNTING_EVENT_ID
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph1,
          ap_payment_history_all aph2,
          xla_events xe1,
          xla_events xe2
     WHERE aph1.check_id = chks.check_id
     AND   aph1.check_id = aph2.check_id
     AND   aph1.historical_flag = ''Y''
     AND   aph2.historical_flag = ''Y''
     AND   aph1.posted_flag = ''Y''
     AND   aph2.posted_flag = ''Y''
     AND   aph1.transaction_type IN (''PAYMENT CREATED'', ''REFUND RECORDED'')
     AND   aph2.transaction_Type IN (''PAYMENT CANCELLED'', ''REFUND CANCELLED'')
     AND   xe1.application_id = 200
     AND   xe2.application_id = 200
     AND   xe1.event_id = aph1.accounting_event_id
     AND   xe2.event_id = aph2.accounting_event_id
     AND   xe1.upg_batch_id > 0
     AND   xe2.upg_batch_id > 0
     AND   xe1.event_number > xe2.event_number'
  );


  add_signature(g_signatures,
    345,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '1540013.1',
    'ap_upgevt_msng_doc_seq_sel.sql Payments',
    'Document sequence and value are null on upgraded events which had these values populated in 11i.',
    'Apply the root cause fix from bug {16711745} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ ordered */
            ac.check_id,
            ac.check_number,
            ac.org_id,
            aeh.accounting_event_id,
            aeh.ae_header_id,
            xah.doc_sequence_id,
            xah.doc_sequence_value,
            max(subledger_doc_sequence_id) subledger_doc_sequence_id,
            max(subledger_doc_sequence_value) subledger_doc_sequence_value
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          ap_ae_headers_all aeh,
          ap_ae_lines_all ael
     WHERE ac.check_id = chks.check_id
     AND   nvl(xte.source_id_int_1,-99) = ac.check_id
     AND   asp.org_id = ac.org_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   xte.ledger_id = asp.set_of_books_id
     AND   (ael.subledger_doc_sequence_id is not null OR
            ael.subledger_doc_sequence_value is not null)
     AND   aeh.ae_header_id = ael.ae_header_id
     AND   xah.completion_acct_seq_value = aeh.ae_header_id
     AND   xah.event_id = aeh.accounting_event_id
     AND   xah.upg_batch_id is not null
     AND   xah.upg_batch_id <> -9999
     AND   (xah.doc_sequence_id is null OR
            xah.doc_sequence_value is null)
     AND   xte.application_id = xah.application_id
     AND   xte.entity_id = xah.entity_id
     GROUP BY ac.check_id, ac.check_number, ac.org_id,
              aeh.accounting_event_id, aeh.ae_header_id,
              xah.doc_sequence_id, xah.doc_sequence_value'
  );


  add_signature(g_signatures,
    367,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_pay_upg_clr_x_event_num_sel.sql',
    'Upgraded Payment Clearing events have incorrect event numbers from 11i resulting in issues with cash reconciliation reports.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ leading chks */
            aph1.check_id,
            aph1.payment_history_id payment_history_id1,
            aph1.transaction_type trx_type1,
            aph2.accounting_event_id acctg_event_id1,
            aph2.payment_history_id payment_history_id2,
            aph2.transaction_type trx_type2,
            aph2.accounting_event_id acctg_event_id2
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph1,
          ap_payment_history_all aph2,
          xla_events xe1,
          xla_events xe2
     WHERE aph1.check_id = chks.check_id
     AND   aph1.check_id = aph2.check_id
     AND   aph1.historical_flag = ''Y''
     AND   aph2.historical_flag = ''Y''
     AND   aph1.posted_flag = ''Y''
     AND   aph2.Posted_Flag = ''Y''
     AND   aph1.transaction_type IN( ''PAYMENT CREATED'',
             ''REFUND RECORDED'', ''PAYMENT MATURITY'',
             ''PAYMENT UNCLEARING'' )
     AND   aph2.Transaction_Type = ''PAYMENT CLEARING''
     AND   xe1.application_id = 200
     AND   xe2.application_id = 200
     AND   xe1.event_id = aph1.accounting_event_id
     AND   xe2.event_id = aph2.accounting_event_id
     AND   xe1.event_number > xe2.event_number
     AND   NOT EXISTS (
             SELECT ''no unclearing'' FROM ap_payment_history_all aph3
             WHERE aph3.transaction_type = ''PAYMENT UNCLEARING''
             AND   aph3.rev_pmt_hist_id = aph2.payment_history_id
             AND   aph3.check_id = aph2.check_id)'
  );


  add_signature(g_signatures,
    385,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_insert_missing_cancel_aip_sel.sql',
    'Payment cancellations are not being accounted due to missing invoice payment rows for the cancelled check',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT aph.check_id,
            aph.org_id,
            aip.invoice_id,
            aip.invoice_payment_id,
            aph.accounting_event_id,
            aph.transaction_type,
            aph.accounting_date,
            aph.posted_flag,
            ac.attribute15 comments
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          ap_invoice_payments_all aip
     WHERE ac.check_id = chks.check_id
     AND   aph.check_id = ac.check_id
     AND   aph.transaction_type IN (''PAYMENT CANCELLED'', ''REFUND CANCELLED'')
     AND   ac.check_id = aip.check_id
     AND   aip.reversal_inv_pmt_id is null
     AND NOT EXISTS (
                  SELECT 1 FROM ap_invoice_payments_all rev
                  WHERE rev.check_id = ac.check_id
                  AND   aip.invoice_id = rev.invoice_id
                  AND   aip.amount = (-1) * rev.amount
                  AND   rev.reversal_flag = ''Y''
                  AND   rev.reversal_inv_pmt_id = aip.invoice_payment_id)
     AND NOT EXISTS (
                  SELECT 1 FROM ap_invoice_distributions_all aid
                  WHERE aid.invoice_id = aip.invoice_id
                  AND   aid.line_type_lookup_code = ''AWT''
                  AND   aid.awt_invoice_payment_id = aip.invoice_payment_id)'
  );


  add_signature(g_signatures,
    391,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'sla_hotpatch_err_diag_pay.sql',
    'The SLA hotpatch is failing on apxlapay.sql with either "ORA-00001: unique constraint (XLA.XLA_DISTRIBUTION_LINKS_U1) violated" OR "cannot insert NULL into AP.AP_APYMENT_HIST_DISTS.INVOICE_DISTRIBUTION_ID" OR cannnot insert NULL into AP.AP_PAYMENT_HIST_DISTS.AMOUNT"',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.check_date,
            asp.set_of_books_id,
            dbms_rowid.rowid_create(
              1, u.data_object_id, u.relative_fno, u.start_block, 0) start_rowid ,
            dbms_rowid.rowid_create(
              1, u.data_object_id, u.relative_fno, u.end_block, 9999) end_rowid
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ad_parallel_update_units u,
          xla_upgrade_dates upg,
          ap_system_parameters_all asp
     WHERE ac.check_id = chks.check_id
     AND   ac.rowid BETWEEN
             dbms_rowid.rowid_create(
               1, u.data_object_id, u.relative_fno, u.start_block, 0) AND
             dbms_rowid.rowid_create(
               1, u.data_object_id, u.relative_fno, u.end_block, 9999)
     AND   asp.org_id = ac.org_id
     AND   upg.ledger_id = asp.set_of_books_id
     AND   trunc(ac.check_date) BETWEEN upg.start_date AND upg.end_date
     AND   u.update_id IN (
             SELECT ad_par.update_id FROM ad_parallel_updates ad_par
             WHERE ad_par.table_name = ''AP_CHECKS_ALL''
             AND ad_par.script_name LIKE ''apxlapay.sql%'')
     AND u.status != ''P'''
  );


  add_signature(g_signatures,
    393,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'sla_ondemand_upg_err_diag_pay.sql',
    'The Upgrade Historical Subledger Transaction Accounting Program errors with "ORA-00001: unique constraint (XLA.XLA_DISTRIBUTION_LINKS_U1) violated" OR "cannot insert NULL into (AP.AP_PAYMENT_HIST_DISTS.INVOICE_DISTRIBUTION_ID)" OR cannot insert NULL into (AP.AP_PAYMENT_HIST_DISTS.AMOUNT)"',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.check_date,
            asp.set_of_books_id,
            dbms_rowid.rowid_create(
              1, u.data_object_id, u.relative_fno, u.start_block, 0) start_rowid ,
            dbms_rowid.rowid_create(
              1, u.data_object_id, u.relative_fno, u.end_block, 9999) end_rowid
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_upgrade_dates upg,
          ad_parallel_update_units u
     WHERE ac.check_id = chks.check_id
     AND   ac.rowid BETWEEN
             dbms_rowid.rowid_create(
               1, u.data_object_id, u.relative_fno, u.start_block, 0) AND
             dbms_rowid.rowid_create(
               1, u.data_object_id, u.relative_fno, u.end_block, 9999)
     AND   asp.org_id = ac.org_id
     AND   upg.ledger_id = asp.set_of_books_id
     AND   trunc(ac.check_date) BETWEEN upg.start_date AND upg.end_date
     AND   u.update_id IN (
             SELECT ad_par.update_id FROM ad_parallel_updates ad_par
             WHERE ad_par.table_name = ''AP_CHECKS_ALL''
             AND ad_par.script_name LIKE ''appdstln.sql%'')
             AND u.status != ''P'''
  );


  add_signature(g_signatures,
    397,
    'PAYMENT',
    'ACCOUNTING',
    '19941321',
    '',
    'ap_pay_cr_has_x_ida.sql',
    'When there are multiple invoices payments may be accounted with incorrect amounts causing small rounding amount differences in CASH or CASH CLEARING.',
    'Apply the root cause fix from bug {19941321} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph.check_id,
            aip.invoice_id,
            aip.invoice_payment_id,
            aip.invoice_base_amount,
            aip.accounting_event_id,
            aip.amount,
            sum(nvl(aphd.invoice_dist_base_amount, invoice_dist_amount)) -
              nvl(aip.invoice_base_amount, aip.amount) difference
     FROM (
            ##$$CVIEW$$##
          ) chks,
           ap_invoice_payments_all aip,
           ap_payment_history_all aph,
           ap_payment_hist_dists aphd
     WHERE aph.check_id = chks.check_id
     AND   aip.check_id = aph.check_id
     AND   aphd.invoice_payment_id = aip.invoice_payment_id
     AND   aphd.pay_dist_lookup_code = ''CASH''
     AND   aip.accounting_event_id = aphd.accounting_event_id
     AND   aip.accounting_event_id = aph.accounting_event_id
     AND   aph.payment_history_id = aphd.payment_history_id
     AND   aph.historical_flag is null
     AND   aph.transaction_type IN (''PAYMENT CREATED'', ''REFUND RECORDED'')
     AND   aph.posted_flag = ''Y''
     GROUP BY aph.check_id, aip.invoice_id, aip.invoice_payment_id,
           aip.invoice_base_amount, aip.accounting_event_id, aip.amount
     HAVING sum(nvl(aphd.invoice_dist_base_amount, invoice_dist_amount)) !=
              nvl(aip.invoice_base_amount, aip.amount)'
  );


  add_signature(g_signatures,
    398,
    'PAYMENT',
    'ACCOUNTING',
    '16723807',
    '1559565.1',
    'ap_pay_adj_x_discount.sql',
    'Payment adjustment events are accounted with incorrect amounts when there is a discount, resulting in trial balance issues due to small rounding differences.',
    'Apply the root cause fix from bug {19941321} or {16723807} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'Trial Balance'),
    'SELECT aph.check_id,
            l.accounting_class_code,
            sum(nvl(entered_dr, 0) - nvl(entered_cr, 0)) acct_amt
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph,
          xla_ae_headers h,
          xla_ae_lines l,
          ap_system_parameters_all asp
     WHERE aph.check_id = chks.check_id
     AND   h.event_id = aph.accounting_event_id
     AND   h.application_id = 200
     AND   aph.transaction_type like ''%ADJUSTED''
     AND   aph.transaction_type not like ''MAN%''
     AND   l.accounting_class_code IN (''CASH'', ''LIABILITY'', ''CASH_CLEARING'')
     AND   nvl(aph.historical_flag, ''N'') != ''Y''
     AND   h.ae_header_id = l.ae_header_id
     AND   l.application_id = 200
     AND   aph.org_id = asp.org_id
     AND   asp.set_of_books_id = h.ledger_id
     AND   aph.posted_flag = ''Y''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all h2
             WHERE h2.check_id = aph.check_id
             AND   h2.transaction_type like ''%ADJUSTED''
             AND   h2.related_event_id = aph.related_event_id
             AND   h2.transaction_type not like ''MAN%''
             AND   h2.posted_flag != ''Y'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_payments_all p1
             WHERE p1.check_id = aph.check_id
             AND   p1.discount_Taken != 0)
     GROUP BY aph.check_id, l.accounting_class_code
     HAVING sum(nvl(entered_dr, 0) - nvl(entered_cr, 0)) != 0'
  );


  add_signature(g_signatures,
    401,
    'PAYMENT',
    'ACCOUNTING',
    '16674834',
    '1589559.1',
    'ap_x_pay_adj_acctg.txt',
    'Payment adjustment events are accounted with incorrect amounts resulting in issues with the trial balance.',
    'Apply the root cause fix from bug {16674834} and patch {19941321} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'Trial Balance'),
    'SELECT /*+ leading(chks) */ DISTINCT
            aph.check_id,
            aph.related_event_id,
            aip.invoice_id,
            aip.invoice_payment_id,
            aphd.all_inv_dist_base_sum,
            aip.invoice_base_amount,
            aip.amount,
            nvl( aip.invoice_base_amount, aip.amount ) -
              aphd.all_inv_dist_base_sum trx_amt_different,
            aph.posted_flag
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          ap_invoice_payments_all aip,
          (
            SELECT sum(nvl(aphd1.invoice_dist_base_amount,
                     aphd1.invoice_dist_amount)) all_inv_dist_base_sum,
                   sum(decode(aph1.accounting_event_id,
                         aph1.related_event_id, nvl(aphd1.invoice_dist_base_amount,
                           aphd1.invoice_dist_amount ),
                         0)) pay_cr_inv_dist_sum,
                   aph1.check_id,
                   aph1.related_event_id,
                   aphd1.invoice_payment_id
            FROM ap_payment_hist_dists aphd1,
                 ap_payment_history_all aph1
            WHERE aph1.accounting_event_id = aphd1.accounting_event_id
            AND   aphd1.payment_history_id = aph1.payment_history_id
            AND   aph1.transaction_type NOT IN (''MANUAL PAYMENT ADJUSTED'',
                      ''MANUAL REFUND ADJUSTED'')
            AND   aphd1.pay_dist_lookup_code IN (''CASH'')
            GROUP BY aph1.check_id, aph1.related_event_id, aphd1.invoice_payment_id
          ) aphd
     WHERE ac.check_id = chks.check_id
     AND   ac.check_id = aph.check_id
     AND   aph.check_id = aip.check_id
     AND   ac.void_date is null
     AND   aph.transaction_type IN (''PAYMENT ADJUSTED'', ''REFUND ADJUSTED'')
     AND   nvl(aph.historical_flag, ''N'') <> ''Y''
     AND   aph.posted_flag = ''Y''
     AND   aip.posted_flag = ''Y''
     AND   aph.check_id = aphd.check_id
     AND   aph.related_event_id = aphd.related_event_id
     AND   aip.invoice_payment_id = aphd.invoice_payment_id
     AND   aphd.all_inv_dist_base_sum <> nvl(aip.invoice_base_amount, aip.amount)
     AND   aphd.pay_cr_inv_dist_sum = nvl(aip.invoice_base_amount, aip.amount)
     AND   NOT EXISTS (
             SELECT ''unacct pay adj event'' FROM ap_payment_history_all aph2
             WHERE aph2.related_event_id = aph.related_event_id
             AND   aph2.check_id = aph.check_id
             AND   (aph2.posted_flag = ''N'' OR
                    nvl(aph2.historical_flag, ''x'') = ''Y''))
     AND   NOT EXISTS (
             SELECT ''unaccounted dist'' FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = aip.invoice_id
             AND   nvl(aid.posted_flag, ''N'') = ''N'')
     AND   NOT EXISTS (
             SELECT ''payment voided'' FROM ap_checks_all ac1
             WHERE ac1.check_id = aph.check_id
             AND   ac1.void_date is not null)
     AND   NOT EXISTS (
             SELECT ''inv payment reversed'' FROM ap_invoice_payments_all aip1
             WHERE aip1.invoice_payment_id = aip.invoice_payment_id
             AND nvl(aip1.reversal_flag,''N'') = ''Y'')'
  );


  add_signature(g_signatures,
    402,
    'PAYMENT',
    'ACCOUNTING',
    '16674834',
    '',
    'ap_x_cash_pay_clr.txt',
    'Payment clearing events are accounted with incorrect amounts, causing differences between the cleared base amount and the accounted cash amount.',
    'Apply the root cause fix from bug {16674834} and patch {19941321} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.cleared_base_amount,
            aphd.clr_base_amt
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          (
            SELECT sum(aphd.cleared_base_amount) clr_base_amt,
                   aph.check_id
            FROM ap_payment_hist_dists aphd,
                 ap_payment_history_all aph
            WHERE aphd.accounting_event_id = aph.accounting_event_id
            AND   aphd.payment_history_id = aph.payment_history_id
            AND   aph.transaction_type IN (''PAYMENT CLEARING'',
                    ''PAYMENT CLEARING ADJUSTED'')
            AND   NOT EXISTS (
                    SELECT ''unaccounted payment''
                    FROM ap_payment_history_all aph1
                    WHERE aph1.check_id = aph.check_id
                    AND aph1.related_event_id = aph.related_event_id
                    AND aph1.transaction_type = ''PAYMENT UNCLEARING'')
            AND   aphd.pay_dist_lookup_code IN (''CASH'', ''FINAL CASH ROUNDING'',
                    ''BANK CHARGE'', ''BANK ERROR'')
            GROUP BY aph.check_id
          ) aphd
     WHERE ac.check_id = chks.check_id
     AND   ac.void_date is null
     AND   ac.check_id = aph.check_id
     AND   ac.cleared_base_amount is not null
     AND   NOT EXISTS (
             SELECT ''unaccounted payment'' FROM ap_payment_history_all aph1
             WHERE aph1.check_id = ac.check_id
             AND  (nvl( aph1.historical_flag, ''N'') = ''Y'' OR
                   aph1.posted_flag = ''N''))
     AND   ac.cleared_base_amount <> aphd.clr_base_amt
     AND   ac.check_id = aphd.check_id'
  );


  add_signature(g_signatures,
    413,
    'PAYMENT',
    'ACCOUNTING',
    '20657733',
    '',
    'ap_pay_adj_after_void_sel.txt',
    'Payment events are accounted on a date later than the Payment Cancellation event which causes issues with the Trial Balance',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'Trial Balance'),
    'SELECT ac.check_id,
         ac.check_number,
         ac.org_id,
         aph.posted_flag,
         aph.accounting_date
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph
     WHERE ac.check_id = chks.check_id
     AND   ac.void_date is not null
     AND   aph.check_id = ac.check_id
     AND   aph.transaction_type = ''PAYMENT CANCELLED''
     AND   nvl(aph.historical_flag, ''N'') <> ''Y''
     AND   EXISTS (
             SELECT 1
             FROM ap_payment_history_all aph2,
                  ap_payment_hist_dists aphd
             WHERE aph2.check_id = aph.check_id
             AND   aph2.transaction_type = ''PAYMENT ADJUSTED''
             AND   aphd.accounting_event_id = aph2.accounting_event_id
             AND   aphd.payment_history_id = aph2.payment_history_id
             AND   aph2.creation_date <= aph.creation_date
             AND   aph2.accounting_date > aph.accounting_date
             GROUP BY aph2.check_id, aph2.accounting_event_id
             HAVING sum(nvl(aphd.invoice_dist_base_amount, aphd.invoice_dist_amount)) <> 0)'
  );


  add_signature(g_signatures,
    415,
    'PAYMENT',
    'ACCOUNTING',
    '19775384',
    '',
    'ap_x_disc_pay_acctg_all.txt',
    'Incorrect accounted amount calculated for discount lines results in incorrect accounting entries',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aphd.check_id,
            ai.invoice_id,
            ai.invoice_num,
            aphd.sum_disc_amt - nvl(aip.discount_taken, 0) disc_amt_diff,
            abs(aphd.sum_disc_base_amt -
              (aip.discount_taken * ai.exchange_rate)) disc_base_amt_diff
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks ac,
          ap_invoice_payments_all aip,
          (
            SELECT sum(nvl(aphd1.amount, 0)) sum_disc_amt,
                   sum(nvl(aphd1.invoice_dist_base_amount, 0)) sum_disc_base_amt,
                   aph1.check_id,
                   aphd1.invoice_payment_id,
                   aphd1.accounting_event_id
            FROM ap_payment_hist_dists aphd1,
                 ap_payment_history_all aph1
            WHERE (aph1.transaction_type IN (''PAYMENT CREATED'', ''REFUND RECORDED'') OR
                   (aph1.transaction_type LIKE ''%ADJUSTED'' AND
                    aph1.transaction_type NOT LIKE ''MAN%''))
            AND   aphd1.payment_history_id = aph1.payment_history_id
            AND   aphd1.accounting_event_id = aph1.accounting_event_id
            AND   aphd1.pay_dist_lookup_code = ''DISCOUNT''
            GROUP BY aph1.check_id, aphd1.invoice_payment_id, aphd1.accounting_event_id
          ) aphd,
          xla_ae_headers xah,
          ap_invoices_all ai
     WHERE ac.check_id = chks.check_id
     AND   aphd.check_id = ac.check_id
     AND   aip.posted_flag = ''Y''
     AND   aip.check_id = aphd.check_id
     AND   aip.invoice_payment_id = aphd.invoice_payment_id
     AND   aip.accounting_event_id = aphd.accounting_event_id
     AND   aip.discount_taken is not null
     AND   aip.exchange_rate is not null
     AND   xah.ledger_id = aip.set_of_books_id
     AND   xah.event_id = aip.accounting_event_id
     AND   xah.upg_batch_id is null
     AND   aphd.sum_disc_amt = aip.discount_taken
     AND   ai.invoice_id = aip.invoice_id
     AND   abs(aphd.sum_disc_base_amt - (aip.discount_taken * ai.exchange_rate)) > 5'
  );


  add_signature(g_signatures,
    416,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '',
    'ap_no_cash_clr_man_pay_adj.sql',
    'Payment clearing events are not accounted for upgraded payments when there is a manual payment adjusted event present',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_number,
            ac.check_id,
            ac.org_id,
            xe.event_id,
            aip.invoice_payment_id,
            xte.entity_id,
            xah.ae_header_id,
            xte.source_id_int_1 transaction_id,
            xte.transaction_number,
            xte.entity_code,
            xte.ledger_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_invoice_payments_all aip,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_events xe,
          gl_period_statuses upg,
          xla_ae_headers xah,
          xla_ae_lines xal
     WHERE ac.check_id = chks.check_id
     AND   EXISTS (
             SELECT aph.check_id
             FROM ap_payment_history_all aph
             WHERE aph.check_id = ac.check_id
             AND   aph.posted_flag = ''N'')
     AND   aip.check_id = ac.check_id
     AND   xe.application_id = 200
     AND   xah.application_id = 200
     AND   xal.application_id = 200
     AND   xte.application_id = 200
     AND   asp.org_id = ac.org_id
     AND   xte.ledger_id = asp.set_of_books_id
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   nvl(xte.source_id_int_1, -99) = ac.check_id
     AND   xte.entity_id = xe.entity_id
     AND   xe.event_status_code = ''P''
     AND   xe.upg_batch_id is not null
     AND   xe.upg_batch_id <> - 9999
     AND   upg.application_id = xte.application_id
     AND   upg.ledger_id = xte.ledger_id
     AND   upg.set_of_books_id = xte.ledger_id
     AND   upg.migration_status_code = ''U''
     AND   upg.closing_status IN( ''O'', ''C'', ''P'' )
     AND   ac.check_date BETWEEN upg.start_date AND upg.end_date
     AND   trunc(upg.start_date) < (
             SELECT min(trunc(creation_date)) FROM ad_applied_patches
             WHERE patch_type = ''MAINTENANCE-PACK''
             AND   maint_pack_level LIKE ''12.%'')
     AND   xah.ledger_id = xte.ledger_id
     AND   xah.event_id = xe.event_id
     AND   xah.event_type_code = ''MANUAL PAYMENT ADJUSTED''
     AND   xah.upg_batch_id is not null
     AND   xah.ae_header_id = xal.ae_header_id
     AND   NOT EXISTS (
             SELECT 1 FROM xla_ae_lines xal1
             WHERE xal1.ae_header_id = xal.ae_header_id
             AND   xal1.application_id = 200
             AND   xal1.accounting_class_code IN (''CASH_CLEARING'', ''CASH'')
             AND  ((xal1.source_table = ''AP_INVOICE_PAYMENTS'' AND
                    xal1.source_id = aip.invoice_payment_id) OR
                   xal1.source_table = ''AP_CHECKS''))
     AND   NOT EXISTS (
             SELECT 1 FROM xla_distribution_links xdl
             WHERE xdl.application_id = 200
             AND   xdl.ae_header_id = xah.ae_header_id
             AND   xdl.ae_line_num = xal.ae_line_num)'
  );


  add_signature(g_signatures,
    431,
    'PAYMENT',
    'ACCOUNTING',
    '19941321',
    '',
    'ap_dup_xdl_retainage_pay.txt',
    'Payments for retainage invoices have incorrect amounts dut to duplicate entries in XLA_DISTRIBUTION_LINKS.',
    'Apply the root cause fix from bug {19941321} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl(),
    'SELECT /*+ ordered */
            ac.check_id,
            ac.check_number,
            aip.invoice_id,
            ai.invoice_num,
            aph.payment_history_id,
            aph.transaction_type,
            aph.accounting_event_id,
            xdl.ae_header_id,
            xdl.ae_line_num,
            xdl.source_distribution_type,
            xdl.source_distribution_id_num_1,
            xdl.accounting_line_code,
            aphd.payment_hist_dist_id,
            aphd.pay_dist_lookup_code
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          ap_payment_hist_dists aphd,
          ap_invoice_payments_all aip,
          ap_invoices_all ai,
          xla_distribution_links xdl
     WHERE ac.check_id = chks.check_id
     AND   ac.void_date is null
     AND   aphd.payment_history_id = aph.payment_history_id
     AND   aph.check_id = ac.check_id
     AND   aph.transaction_type IN (''PAYMENT CREATED'', ''PAYMENT ADJUSTED'',
             ''PAYMENT CANCELLED'', ''REFUND RECORDED'', ''REFUND CANCELLED'',
             ''MANUAL PAYMENT ADJUSTED'', ''MANUAL REFUND ADJUSTED'',
             ''PAYMENT CLEARING'', ''PAYMENT CLEARING ADJUSTED'')
     AND   aphd.pay_dist_lookup_code = ''CASH''
     AND   aphd.invoice_payment_id = aip.invoice_payment_id
     AND   aip.invoice_id = ai.invoice_id
     AND   ai.invoice_type_lookup_code = ''RETAINAGE RELEASE''
     AND   xdl.application_id = 200
     AND   xdl.source_distribution_type = ''AP_PMT_DIST''
     AND   xdl.source_distribution_id_num_1 = aphd.payment_hist_dist_id
     GROUP BY ac.check_id, ac.check_number, aip.invoice_id, ai.invoice_num,
              aph.payment_history_id, aph.transaction_type, aph.accounting_event_id,
              xdl.ae_header_id, xdl.ae_line_num, xdl.source_distribution_type,
              xdl.source_distribution_id_num_1, xdl.accounting_line_code,
              aphd.payment_hist_dist_id, aphd.pay_dist_lookup_code
     HAVING COUNT( * ) > 1'
  );


  add_signature(g_signatures,
    436,
    'PAYMENT',
    'ACCOUNTING',
    '22297087',
    '',
    'ap_cancel_pay_sel.sql',
    'Cancelled payments have a null value in REV_PMT_HIST_ID resulting in incorrect accounting as the reversal entry does not point to the corresponding payment created event.',
    'Generate the APList output for the affected payment invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'Payment Data'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.status_lookup_code,
            aph.payment_history_id,
            aph.accounting_date,
            aph.transaction_type,
            aph.posted_flag,
            aph.matched_flag,
            aph.accounting_event_id,
            aph.org_id,
            aph.rev_pmt_hist_id,
            aph.related_event_id,
            ac.attribute15 comments
     FROM   (
              ##$$CVIEW$$##
            ) chks,
            ap_checks_all ac,
            ap_payment_history_all aph
     WHERE ac.check_id = chks.check_id
     AND   ac.check_id = aph.check_id
     AND   ac.status_lookup_code = ''VOIDED''
     AND   aph.transaction_type = ''PAYMENT CANCELLED''
     AND   aph.rev_pmt_hist_id is null'
  );


  add_signature(g_signatures,
    437,
    'PAYMENT',
    'ACCOUNTING',
    '22106910',
    '1550238.1',
    'ap_invalid_bank_charges_sel.sql',
    'Payment accounting is incorrect because bank charges are applied even though the bank and payment currencies are the same. Result is a 95353 error during accounting.',
    'Generate the APList output for the affected payment invoices and log a Service Request to obtain the data fix.',
    'N',
    'Y',
    impact_area_tbl('Accounting Failure', 'Accounting Incorrect', 'Payment Data'),
    'SELECT aph.check_id,
            aph.payment_history_id,
            aph.accounting_event_id,
            aph.transaction_type,
            aph.accounting_date,
            aph.posted_flag,
            aph.org_id,
            aph.charges_bank_amount,
            aph.trx_bank_amount,
            aph.trx_pmt_amount,
            aph.bank_currency_code,
            aph.pmt_currency_code
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph,
          ap_system_parameters_all asp
     WHERE aph.check_id = chks.check_id
     AND   aph.transaction_type IN (''PAYMENT CLEARING'', ''PAYMENT UNCLEARING'')
     AND   aph.bank_currency_code = aph.pmt_currency_code
     AND   aph.org_id = asp.org_id
     AND   aph.bank_currency_code = asp.base_currency_code
     AND   nvl(CHARGES_BANK_AMOUNT,0) ! = 0'
  );


  add_signature(g_signatures,
    439,
    'PAYMENT',
    'ACCOUNTING',
    '',
    '1359966.1',
    'ap_custom_prc_jld_jlt.sql Payment',
    'Custom subledger accounting method components have been detected.',
    'Review your modifications/customizations.  See [1359966.1] to determine if there was a bug fix or change implemented for your component, and correct your customized component accordingly. Also verify in a test instance whether using the seeded application accounting definition (AAD) results in the same issue to confirm the cause.',
    'N',
    'N',
    impact_area_tbl('Accounting Failure', 'Accounting Incorrect', 'Trial Balance'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT ''Product Rule Code'' component_type,
            xah.product_rule_code "Code",
            xah.ledger_id
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah
     WHERE ac.check_id = chks.check_id
     AND   xte.application_id = 200
     AND   ac.org_id = asp.org_id
     AND   xte.ledger_id = asp.set_of_books_id
     AND   nvl( xte.source_id_int_1, - 99 ) = ac.check_id
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   xte.entity_id = xah.entity_id
     AND   xah.application_id = 200
     AND   xah.product_rule_type_code = ''C''
     UNION
     SELECT ''Journal Line Definition'',
            xdl.line_definition_code,
            xah.ledger_id
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          xla_distribution_links xdl
     WHERE ac.check_id = chks.check_id
     AND   xte.application_id = 200
     AND   ac.org_id = asp.org_id
     AND   xte.ledger_id = asp.set_of_books_id
     AND   nvl( xte.source_id_int_1, - 99 ) = ac.check_id
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   xte.entity_id = xah.entity_id
     AND   xah.application_id = 200
     AND   xdl.ae_header_id = xah.ae_header_id
     AND   xdl.line_definition_owner_code = ''C''
     AND   xdl.application_id = 200
     UNION
     SELECT ''Journal Line Type'',
            xdl.accounting_line_code,
            xah.ledger_id
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          xla_distribution_links xdl
     WHERE ac.check_id = chks.check_id
     AND   xte.application_id = 200
     AND   ac.org_id = asp.org_id
     AND   xte.ledger_id = asp.set_of_books_id
     AND   nvl( xte.source_id_int_1, - 99 ) = ac.check_id
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   xte.entity_id = xah.entity_id
     AND   xah.application_id = 200
     AND   xdl.ae_header_id = xah.ae_header_id
     AND   xdl.accounting_line_type_code = ''C''
     AND   xdl.application_id = 200'
  );


  add_signature(g_signatures,
    46,
    'PAYMENT',
    '',
    '22873624',
    '2115968.1',
    'ap_incorrect_checks_sel.sql Case 2 - AIP',
    'Checks with check_id out of sync between ap_checks_all and ap_invoice_payments_all',
    'Apply the GDF patch following the instructions provided in [2115968.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT /*+ ordered use_nl(aip, ai) */
            aip.check_id             correct_check_id,
            aip.org_id               org_id,
            aip.accounting_event_id  inv_pmt_acctg_event_id,
            aip.posted_flag          inv_pmt_posted_flag,
            ac.vendor_name           vendor_name,
            ai.vendor_id             vendor_id,
            ac.vendor_site_code      vendor_site_code,
            ai.vendor_site_id        vendor_site_id,
            ac.check_id              wrong_check_id,
            ac.check_number          wrong_check_number,
            ac.amount                wrong_chk_amount,
            ac.payment_id            wrong_chk_payment_id,
            ac.status_lookup_code    wrong_chk_status,
            ac.currency_code         wrong_chk_currency,
            aph.transaction_type    wrong_pmt_hist_trx_type,
            aph.posted_flag         wrong_pmt_hist_posted_flag,
            aph.accounting_event_id wrong_ph_acctg_event_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_invoice_payments_all aip,
          ap_invoices_all ai,
          all_sequences seq,
          ap_checks_all ac,
          ap_payment_history_all aph
     WHERE aip.check_id = chks.check_id
     AND   ai.invoice_id = aip.invoice_id
     AND   ai.org_id = aip.org_id
     AND   nvl(aip.reversal_flag,''N'') <> ''Y''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_checks_all ac1
             WHERE ac1.check_id = aip.check_id)
     AND   ac.check_id = aph.check_id(+)
     AND   ac.status_lookup_code NOT IN (''OVERFLOW'',''SET UP'',''SPOILED'')
     AND   nvl(aph.historical_flag,''N'') <> ''Y''
     AND   ac.check_id BETWEEN (aip.check_id - (seq.cache_size + 1)) AND
                               (aip.check_id + (seq.cache_size + 1))
     AND   ac.org_id = aip.org_id
     AND   ac.vendor_id = ai.vendor_id
     AND   ac.vendor_site_id = ai.vendor_site_id
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_payments_all aip1
             WHERE ac.check_id = aip1.check_id)
     AND   ac.creation_date > (
             SELECT MIN(creation_date) FROM ad_bugs
             WHERE aru_release_name = ''R12'')
     AND   seq.sequence_name = ''AP_CHECKS_S''
     AND   seq.sequence_owner = ''AP'''
  );


  add_signature(g_signatures,
    47,
    'PAYMENT',
    '',
    '17878280',
    '985615.1',
    'ap_payment_method_null_sel.sql',
    'Checks having NULL payment_method_code in ap_checks_all and thus out of sync with IBY (results in FRM-40735 errors)',
    'Apply the GDF patch following the instructions provided in [985615.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.vendor_name,
            ac.amount,
            ac.check_date,
            ac.checkrun_name,
            ac.status_lookup_code,
            ac.payment_id,
            ac.payment_method_code
     FROM ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.payment_method_code IS NULL
     AND   ac.payment_id IS NOT NULL
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    48,
    'PAYMENT',
    '',
    '18491045',
    '1125533.1',
    'ap_rate_miss_sel.sql',
    'Foreign currency checks that are missing exchange rates, maturity exchange rates, or clearing exchange rates.',
    'Apply the GDF patch following the instructions provided in [1125533.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.vendor_name,
            ac.check_date,
            ac.amount,
            ac.org_id
     FROM ap_checks_all ac,
          ap_system_parameters_all asp,
          ap_payment_history_all ph,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.org_id = asp.org_id
     AND   ac.currency_code <> asp.base_currency_code
     AND   ph.check_id = ac.check_id
     AND   nvl(ph.historical_flag, ''N'') <> ''Y''
     AND   /* pmt created exchange rate */
           ((ph.transaction_type in (''PAYMENT CREATED'', ''REFUND RECORDED'',
                   ''MANUAL PAYMENT ADJUSTED'',
                   ''PAYMENT ADJUSTED'', ''REFUND ADJUSTED'',
                   ''PAYMENT CANCELLED'', ''REFUND CANCELLED'') AND
             ph.pmt_to_base_xrate is null AND
             ((nvl(ph.posted_flag,''N'') <> ''Y'' AND
               (decode(ph.pmt_to_base_xrate_type,
                  ''User'', null,
                  ph.pmt_to_base_xrate_type) is null OR
               ph.pmt_to_base_xrate_date is null OR
               EXISTS (
                 /*autorate will not pick it up if aip rate and base are populated */
                 SELECT 1 FROM ap_invoice_payments_all aip
                 WHERE aip.check_id = ph.check_id
                 AND   aip.posted_flag = ''N''
                 AND   aip.accounting_event_id = ph.accounting_event_id
                 AND   aip.invoice_base_amount is not null
                 AND   aip.exchange_rate is not null))) OR
              (ph.posted_flag = ''Y'' AND
               (ac.exchange_rate is null OR
                ph.trx_base_amount is null OR
                ap_utilities_pkg.ap_round_currency(
                  ph.trx_pmt_amount * ac.exchange_rate,
                  ph.pmt_currency_code) <> ph.trx_base_amount)))) OR
            /* pmt maturity exchange rate */
            (ph.transaction_type in (''PAYMENT MATURITY'',
                ''PAYMENT MATURITY ADJUSTED'', ''PAYMENT MATURITY REVERSAL'') AND
             ph.pmt_to_base_xrate is null AND
             (nvl(ph.posted_flag,''N'') <> ''Y'' AND
              (decode(ph.pmt_to_base_xrate_type,
                 ''User'', null,
                 ph.pmt_to_base_xrate_type) is null OR
               ph.pmt_to_base_xrate_date is null) OR
              (ph.posted_flag = ''Y'' AND
               (ac.maturity_exchange_rate is null OR
                ph.trx_base_amount is null OR
                ap_utilities_pkg.ap_round_currency(
                  ph.trx_pmt_amount * ac.maturity_exchange_rate,
                  ph.pmt_currency_code) <> ph.trx_base_amount)))) OR
            /* pmt clearing exchange rate */
            (ph.transaction_type in (''PAYMENT CLEARING'',
               ''PAYMENT CLEARING ADJUSTED'', ''PAYMENT UNCLEARING'') AND
             (ph.pmt_to_base_xrate is null AND
              (nvl(ph.posted_flag,''N'') <> ''Y'' OR
               (ph.posted_flag = ''Y'' AND
                (ac.cleared_exchange_rate is null OR
                 ph.trx_base_amount is null OR
                 ap_utilities_pkg.ap_round_currency(
                   ph.trx_pmt_amount * ac.cleared_exchange_rate,
                   ph.pmt_currency_code) <> ph.trx_base_amount)))) OR
                 (ph.bank_to_base_xrate is null AND
                  ph.bank_currency_code <> asp.base_currency_code)))
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    49,
    'PAYMENT',
    '',
    '17918701',
    '1154813.1',
    'ap_wrgchksts_sel.sql',
    'Incorrect check statuses when Payables accounting option ''Account for Payment When Payment Clears'' is disabled. Payments are accounted but appear as unreconciled',
    'Apply the GDF patch following the instructions provided in [1154813.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT /*+ leading(chks) */
            ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.check_date,
            ac.payment_method_lookup_code,
            ac.checkrun_name,
            ac.vendor_id,
            ac.vendor_site_id,
            ac.amount,
            ac.currency_code,
            ac.payment_type_flag,
            ac.cleared_amount,
            ac.status_lookup_code
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac
     WHERE ac.check_id = chks.check_id
     AND   ac.status_lookup_code IN (
             ''CLEARED BUT UNACCOUNTED'',''RECONCILED UNACCOUNTED'')
     AND   NOT EXISTS (
             SELECT ''Check has no clearing event or accounted clearing ''||
                    ''event but check status is wrong''
             FROM ap_payment_history_all aph
             WHERE transaction_type   IN (
                    ''PAYMENT CLEARING'', ''PAYMENT UNCLEARING'',
                    ''PAYMENT CLEARING ADJUSTED'', ''PAYMENT UNCLEARING ADJUSTED'')
             AND   aph.check_id = ac.check_id
             AND   nvl(aph.posted_flag,''N'') ! = ''Y'')'
  );


  add_signature(g_signatures,
    50,
    'PAYMENT',
    '',
    '17870000',
    '1206075.1',
    'ap_negotiable_iby_void_sel.sql',
    'Checks voided in Payments but still negotiable in Payables',
    'Apply the GDF patch following the instructions provided in [1206075.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.vendor_name,
            ac.bank_account_name,
            ac.amount,
            ac.check_date,
            ac.checkrun_name,
            ac.status_lookup_code,
            ac.payment_id,
            pay.void_date
     FROM ap_checks_all ac,
          iby_payments_all pay,
          ap_invoice_payments_all ip,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ip.check_id = ac.check_id
     AND   nvl(ip.reversal_flag, ''N'') ! = ''Y''
     AND   pay.payment_status = ''VOID''
     AND   ac.status_lookup_code in (''NEGOTIABLE'', ''ISSUED'')
     AND   ac.void_date is null
     AND   pay.payment_id = ac.payment_id
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all ph
             WHERE  ph.check_id = ac.check_id
             AND    ph.transaction_type = ''PAYMENT CANCELLED'')
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    51,
    'PAYMENT',
    '',
    '17862385',
    '1264221.1',
    'ap_checks_misc_sel.sql check 1',
    'Checks in functional currency with exchange rate information populated in ap_checks_all or  ap_payment_history_all',
    'Apply the GDF patch following the instructions provided in [1264221.1]',
    'Y',
    'Y',
    impact_area_tbl('Payment Selection'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.currency_code,
            aph.payment_history_id,
            aph.transaction_type,
            aph.trx_base_amount,
            aph.accounting_event_id,
            aph.pmt_to_base_xrate_type,
            aph.pmt_to_base_xrate_date,
            aph.pmt_to_base_xrate
     FROM ap_checks_all ac,
          ap_payment_history_all aph,
          ap_system_parameters_all asp,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.check_id = aph.check_id
     AND   asp.org_id = ac.org_id
     AND   asp.base_currency_code = ac.currency_code
     AND   (aph.pmt_to_base_xrate is not null OR
            ac.exchange_rate is not null)
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    52,
    'PAYMENT',
    '',
    '17862385',
    '1264221.1',
    'ap_checks_misc_sel.sql check 2',
    'Voided checks with incorrect statuses in ap_checks_all',
    'Apply the GDF patch following the instructions provided in [1264221.1]',
    'Y',
    'Y',
    impact_area_tbl('Payment Selection'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.status_lookup_code,
            ac.void_date
     FROM ap_checks_all ac,
          ap_payment_history_all aph,
          ap_invoice_payments_all aip,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.status_lookup_code NOT IN (''VOIDED'',''OVERFLOW'')
     AND   ac.check_id = aph.check_id
     AND   aph.transaction_type = ''PAYMENT CANCELLED''
     AND   aip.accounting_event_id = aph.accounting_event_id
     AND   aip.check_id = ac.check_id
     AND   aip.reversal_inv_pmt_id IS NOT NULL
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    53,
    'PAYMENT',
    '',
    '17862385',
    '1264221.1',
    'ap_checks_misc_sel.sql check 3',
    'Refund checks with maturity rate information populated',
    'Apply the GDF patch following the instructions provided in [1264221.1]',
    'Y',
    'Y',
    impact_area_tbl('Payment Selection'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.status_lookup_code,
            ac.payment_type_flag,
            ac.maturity_exchange_date,
            ac.maturity_exchange_rate_type,
            ac.maturity_exchange_rate,
            ac.future_pay_due_date
     FROM ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE payment_type_flag = ''R''
     AND   (maturity_exchange_date is not null OR
            maturity_exchange_rate_type is not null OR
            maturity_exchange_rate is not null OR
            future_pay_due_date is not null OR
            EXISTS (
              SELECT 1 FROM ap_payment_history_all aph
              WHERE aph.check_id = ac.check_id
              AND   aph.transaction_type = ''PAYMENT MATURITY''))
     AND   EXISTS (
             SELECT 1 FROM ap_payment_history_all aph
             WHERE aph.check_id = ac.check_id
             AND   aph.transaction_type = ''REFUND RECORDED'')
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    54,
    'PAYMENT',
    '',
    '17855319',
    '1315138.1',
    'ap_check_stat_incorrect_sel.sql',
    'Checks which have been reconciled but which have a status of NEGOTIABLE in ap_checks_all',
    'Apply the GDF patch following the instructions provided in [1315138.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.check_date,
            ac.amount,
            ac.vendor_name,
            ac.status_lookup_code,
            ac.org_id,
            ac.cleared_amount,
            ac.cleared_date
     FROM ap_checks_all ac,
          ap_system_parameters_all asp,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.org_id = asp.org_id
     AND   asp.recon_accounting_flag = ''Y''
     AND   ac.status_lookup_code = ''NEGOTIABLE''
     AND   ac.check_id IN (
             SELECT aph.check_id FROM ap_payment_history_all aph
             WHERE aph.check_id = ac.check_id
             AND   aph.transaction_type = ''PAYMENT CLEARING''
             AND   aph.payment_history_id = (
                     SELECT max(aph2.payment_history_id) FROM ap_payment_history_all aph2
                     WHERE aph2.transaction_type in
                             (''PAYMENT CLEARING'',''PAYMENT UNCLEARING'')
                     AND   ac.check_id = aph2.check_id))
     AND   NOT EXISTS (
             SELECT ''1'' FROM ap_payment_history_all aph1
             WHERE ac.check_id = aph1.check_id
             AND   aph1.transaction_type = ''PAYMENT CANCELLED'')
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    55,
    'PAYMENT',
    '',
    '17926779',
    '1309501.1',
    'ap_missing_mat_event_sel.sql',
    'Checks with bills payable but missing payment maturity event',
    'Apply the GDF patch following the instructions provided in [1309501.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT ac.check_id ,
            ac.check_number,
            ac.org_id,
            ac.status_lookup_code,
            ac.payment_type_flag,
            ac.maturity_exchange_date,
            ac.maturity_exchange_rate_type,
            ac.maturity_exchange_rate,
            ac.future_pay_due_date,
            ac.cleared_date,
            ac.actual_value_date
     FROM ap_payment_history_all aph,
          ap_checks_all ac,
          iby_payments_all ibp,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.check_id = ac.check_id
     AND   ibp.payment_id = ac.payment_id
     AND   ibp.payment_method_code = ac.payment_method_code
     AND   nvl(ibp.bill_payable_flag,''N'')  = ''Y''
     AND   ac.future_pay_due_date is not null
     AND   ac.status_lookup_code <> ''ISSUED''
     AND   ac.void_date is null
     AND   aph.transaction_type = ''PAYMENT CREATED''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all aph3
             WHERE aph.check_id = aph3.check_id
             AND aph3.transaction_type = ''PAYMENT MATURITY'')
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    56,
    'PAYMENT',
    '',
    '17965275',
    '982802.1',
    'ap_sup_merge_remit_cols_sel.sql',
    'Remit to columns are incorrect in ap_checks_all and ap_recurring_payments all after supplier merge',
    'Apply the GDF patch following the instructions provided in [982802.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.vendor_id,
            ac.vendor_site_id,
            ac.remit_to_supplier_id,
            ac.remit_to_supplier_site_id,
            ac.relationship_id
     FROM ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.relationship_id is not null
     AND ac.remit_to_supplier_id is not null
     AND ac.remit_to_supplier_site_id is not null
     AND ac.relationship_id = -1
     AND CASE
           WHEN nullif(ac.remit_to_supplier_id, ac.vendor_id) is not null THEN 1
           WHEN nullif(ac.remit_to_supplier_site_id, ac.vendor_site_id) is not null THEN 1
           ELSE 0
         END = 1
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    270,
    'PAYMENT',
    '',
    '17500004',
    '1536344.1',
    'ap_upg_incor_lstupddate_sel.sql',
    'Invoice line and accounting data from 11i have last updated dates marked with the upgrade date preventing the purge of information based on dates prior to the upgrade.',
    'Apply the GDF patch following the instructions provided in [1536344.1]',
    'Y',
    'N',
    impact_area_tbl('Archive/Purge'),
    'SELECT /*+ ordered use_nl(aph, xe, aae) */
            ''Event'',
            xe.event_id,
            null,
            xe.entity_id,
            xe.last_update_date,
            aae.last_update_date
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph,
          xla_events xe,
          ap_accounting_events_all aae
     WHERE aph.check_id = chks.check_id
     AND   xe.event_id = aph.accounting_event_id
     AND   xe.application_id = 200
     AND   nvl(xe.upg_batch_id,-9999) <> -9999
     AND   xe.event_id = aae.accounting_event_id
     AND   xe.last_update_date <> aae.last_update_date'
  );


  add_signature(g_signatures,
    272,
    'PAYMENT',
    '',
    '17848175',
    '1540095.1',
    'ap_pay_acctng_event_id_null_sel.sql',
    'Checks with null accounting_event_id in ap_invoice_payments_all',
    'Apply the GDF patch following the instructions provided in [1540095.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure', 'Accounting Incorrect', 'Trial Balance'),
    'SELECT /*+ ordered use_nl(ac, aph, aip) */
            ac.check_id,
            ac.check_number,
            ac.org_id,
            aip.accounting_event_id,
            aip.accounting_date
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          ap_invoice_payments_all aip
     WHERE aph.check_id = ac.check_id
     AND   aip.check_id = aph.check_id
     AND   aip.accounting_event_id is not null
     AND   aip.accounting_event_id = aph.accounting_event_id
     AND   aph.transaction_type = ''PAYMENT CREATED''
     AND   ac.check_id = chks.check_id
     AND   aip.reversal_inv_pmt_id is null
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_payments_all aip1
             WHERE  aip.check_id = aip1.check_id
             AND   aip1.accounting_event_id is null)'
  );


  add_signature(g_signatures,
    273,
    'PAYMENT',
    '',
    '11811343',
    '1315801.1',
    'IBY_PMT_STK_MOD_SEL.sql',
    'Payments stuck in MODIFIED status.',
    'Apply the GDF patch following the instructions provided in [1315801.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT /*+ ordered use_nl(ac, pmt, req) */
            req.call_app_pay_service_req_code,
            pmt.payment_service_request_id,
            pmt.payment_id,
            pmt.payment_status
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          iby_payments_all pmt,
          iby_pay_service_requests req
     WHERE pmt.payment_service_request_id = req.payment_service_request_id
     AND   pmt.payment_status LIKE ''MODIFIED%''
     AND   pmt.payment_instruction_id is null
     AND   req.payment_service_request_status IN (''COMPLETED'',''PAYMENTS_CREATED'')
     AND   pmt.payment_id = ac.payment_id
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    284,
    'PAYMENT',
    '',
    '18846634',
    '1924630.1',
    'ap_check_amt_out_of_sync_sel.sql',
    'Checks which have different amounts in ap_checks and iby_payments_all.',
    'Follow the instructions provided in [1924630.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'Payment Data'),
    'SELECT ac.check_id,
            ac.amount,
            pay.payment_amount,
            pay.payment_id,
            ac.status_lookup_code
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          iby_payments_all pay
     WHERE ac.check_id = chks.check_id
     AND   pay.payment_function = ''PAYABLES_DISB''
     AND   pay.payments_complete_flag = ''Y''
     AND   ac.payment_id = pay.payment_id
     AND   ac.amount <> pay.payment_amount'
  );


  add_signature(g_signatures,
    360,
    'PAYMENT',
    '',
    '17571683',
    '1377248.1',
    'ap_xla_supmg_sel.sql Payment',
    'Accounting transactions which have not been merged to the destination supplier after Supplier/Site merge',
    'Apply the GDF patch following the instructions provided in [1377248.1]',
    'Y',
    'N',
    impact_area_tbl('Trial Balance'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     ),
    ap_ledger_options AS (
       SELECT aip.set_of_books_id,
              nvl(xlo.merge_acct_option_code,''NONE'') merge_acct_option_code,
              adv.org_id,
              adv.vendor_id to_vendor_id,
              adv.vendor_site_id to_vendor_site_id,
              adv.duplicate_vendor_id from_vendor_id,
              adv.duplicate_vendor_site_id from_vendor_site_id,
              adv.process,
              adv.paid_invoices_flag
        FROM chks,
             xla_ledger_options xlo,
             ap_invoice_payments_all aip,
             ap_checks_all ac,
             ap_duplicate_vendors_all adv
        WHERE ac.check_id = chks.check_id
        AND   aip.set_of_books_id = xlo.ledger_id
        AND   xlo.application_id = 200
        AND   xlo.merge_acct_option_code IN (''CHANGE'',''TRANSFER'')
        AND   aip.check_id = ac.check_id
        AND   ac.vendor_id = adv.vendor_id
        AND   nvl(adv.vendor_site_id,ac.vendor_site_id) = ac.vendor_site_id
        AND   adv.process_flag = ''Y''
        AND   adv.process <> ''P'')
     SELECT alo.to_vendor_id,
            nvl(alo.to_vendor_site_id,ac.vendor_site_id) to_vendor_site_id,
            alo.org_id,
            ac.check_id source_id_int_1,
            alo.from_vendor_id,
            alo.from_vendor_site_id,
            to_char(ac.check_number) source_number,
            ''AP_PAYMENTS'' entity_code,
            aip.set_of_books_id ledger_id
     FROM chks,
          ap_checks_all ac,
          ap_invoice_payments_all aip,
          ap_ledger_options alo
     WHERE ac.check_id = chks.check_id
     AND   aip.set_of_books_id = alo.set_of_books_id
     AND   aip.check_id = ac.check_id
     AND   ac.vendor_id = alo.to_vendor_id
     AND   ac.vendor_site_id = nvl(alo.to_vendor_site_id,ac.vendor_site_id)
     AND   alo.merge_acct_option_code = ''TRANSFER''
     AND   alo.paid_invoices_flag = ''Y''
     AND   NOT EXISTS (
             SELECT ''No Merge Entry in xla for this vendor site''
             FROM xla_transaction_entities_upg xte,
                  xla_events xe
             WHERE xte.application_id = 200
             AND   xte.ledger_id = alo.set_of_books_id
             AND   xte.entity_code = ''THIRD_PARTY_MERGE''
             AND   xe.entity_id = xte.entity_id
             AND   xe.application_id = 200
             AND   xe.event_type_code  IN (''FULL_MERGE'',''PARTIAL_MERGE'')
             AND   xe.reference_num_1 = alo.from_vendor_id
             AND   xe.reference_num_2 = alo.from_vendor_site_id
             AND   xe.reference_num_3 = alo.to_vendor_id
             AND   xe.reference_num_4 = nvl(alo.to_vendor_site_id,xe.reference_num_4))
     AND   EXISTS (
             SELECT ''Need to merger invoice''
             FROM xla_ae_lines xel,
                  xla_ae_headers xeh,
                  xla_transaction_entities_upg xte
             WHERE xte.application_id = 200
             AND   xel.application_id = xeh.application_id
             AND   xeh.accounting_entry_status_code = ''F''
             AND   xte.application_id = xeh.application_id
             AND   xel.ae_header_id = xeh.ae_header_id
             AND   xte.entity_code = ''AP_PAYMENTS''
             AND   xte.ledger_id = aip.set_of_books_id
             AND   nvl(xte.source_id_int_1,(-99)) = ac.check_id
             AND   xte.entity_id = xeh.entity_id
             AND   xel.party_id = alo.from_vendor_id
             AND   xel.party_site_id = alo.from_vendor_site_id)
     UNION ALL
     SELECT alo.to_vendor_id,
            nvl(alo.to_vendor_site_id,ac.vendor_site_id ) to_vendor_site_id,
            alo.org_id,
            ac.check_id source_id_int_1,
            alo.from_vendor_id,
            alo.from_vendor_site_id,
            to_char(ac.check_number) source_number,
            ''AP_PAYMENTS'' entity_code,
            aip.set_of_books_id ledger_id
     FROM chks,
          ap_checks_all ac,
          ap_invoice_payments_all aip,
          ap_ledger_options alo
     WHERE ac.check_id = chks.check_id
     AND   aip.set_of_books_id = alo.set_of_books_id
     AND   aip.check_id = ac.check_id
     AND   ac.vendor_id = alo.to_vendor_id
     AND   ac.vendor_site_id = nvl(alo.to_vendor_site_id,ac.vendor_site_id )
     AND   alo.merge_acct_option_code = ''CHANGE''
     AND   alo.paid_invoices_flag = ''Y''
     AND   EXISTS (
             SELECT ''Need to merger invoice''
             FROM xla_ae_lines xel,
                  xla_ae_headers xeh,
                  xla_transaction_entities_upg xte
             WHERE xte.application_id = 200
             AND   xel.application_id = xeh.application_id
             AND   xeh.accounting_entry_status_code = ''F''
             AND   xte.application_id = xeh.application_id
             AND   xel.ae_header_id = xeh.ae_header_id
             AND   xte.entity_code = ''AP_PAYMENTS''
             AND   xte.ledger_id = aip.set_of_books_id
             AND   nvl(xte.source_id_int_1,(-99)) = ac.check_id
             AND   xte.entity_id = xeh.entity_id
             AND   xel.party_id = alo.from_vendor_id
             AND   xel.party_site_id = alo.from_vendor_site_id)'
  );


  add_signature(g_signatures,
    387,
    'PAYMENT',
    '',
    '22873624',
    '2115968.1',
    'ap_incorrect_checks_sel.sql Case 2 - AC',
    'Checks with check_id out of sync between ap_checks_all and ap_invoice_payments_all',
    'Apply the GDF patch following the instructions provided in [2115968.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT aip.check_id             correct_check_id,
            aip.org_id               org_id,
            aip.accounting_event_id  inv_pmt_acctg_event_id,
            aip.posted_flag          inv_pmt_posted_flag,
            ac.vendor_name           vendor_name,
            ac.vendor_id             vendor_id,
            ac.vendor_site_code      vendor_site_code,
            ac.vendor_site_id        vendor_site_id,
            ac.check_id              wrong_check_id,
            ac.check_number          wrong_check_number,
            ac.amount                wrong_chk_amount,
            ac.payment_id            wrong_chk_payment_id,
            ac.status_lookup_code    wrong_chk_status,
            ac.currency_code         wrong_chk_currency,
            aph.transaction_type    wrong_pmt_hist_trx_type,
            aph.posted_flag         wrong_pmt_hist_posted_flag,
            aph.accounting_event_id wrong_ph_acctg_event_id
     FROM (
             ##$$CVIEW$$##
          ) chks,
          ap_invoice_payments_all aip,
          all_sequences seq,
          ap_checks_all ac,
          ap_payment_history_all aph
     WHERE ac.check_id = chks.check_id
     AND   ac.creation_date > (
             SELECT MIN(creation_date) FROM ad_bugs
             WHERE aru_release_name = ''R12'')
     AND   seq.sequence_name = ''AP_CHECKS_S''
     AND   seq.sequence_owner = ''AP''
     AND   ac.status_lookup_code NOT IN (''OVERFLOW'',''SET UP'',''SPOILED'')
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1 FROM ap_invoice_payments_all aip1
             WHERE ac.check_id = aip1.check_id)
     AND   aip.check_id BETWEEN (ac.check_id - (seq.cache_size + 1)) AND
             (ac.check_id + (seq.cache_size + 1))
     AND   ac.org_id = aip.org_id
     AND   nvl(aip.reversal_flag,''N'') <> ''Y''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_checks_all ac1
             WHERE ac1.check_id = aip.check_id)
     AND   ac.check_id = aph.check_id(+)
     AND   nvl(aph.historical_flag,''N'') <> ''Y'''
  );


  add_signature(g_signatures,
    399,
    'PAYMENT',
    '',
    '13652773',
    '2004116.1',
    'ap_pay_clear_x_fcr_sel.sql',
    'Payment clearing events with large Final Cash rounding lines causing incorrect accounting.',
    'Follow the instructions provided in [2004116.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT DISTINCT
            ac.check_id,
            aph.accounting_event_id,
            ac.base_amount,
            ac.cleared_base_amount,
            ac.cleared_charges_base_amount,
            aphd.cleared_base_amount dist_cleared_base_amt
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          ap_payment_hist_dists aphd,
          ap_system_parameters_all asp,
          xla_ae_headers h
     WHERE ac.check_id = chks.check_id
     AND   ac.check_id = aph.check_id
     AND   aph.transaction_type LIKE ''PAYMENT CLEARING%''
     AND   aph.posted_flag = ''Y''
     AND   aph.bank_currency_code != aph.pmt_currency_code
     AND   aph.org_id = asp.org_id
     AND   aph.bank_currency_code = asp.base_currency_code
     AND   aph.accounting_event_id = h.event_id
     AND   h.application_id = 200
     AND   h.upg_batch_id is null
     AND   h.ledger_id = asp.set_of_books_id
     AND   aphd.payment_history_id = aph.payment_history_id
     AND   aphd.accounting_event_id = aph.accounting_event_id
     AND   aphd.pay_dist_lookup_code = ''FINAL CASH ROUNDING''
     AND   ac.cleared_base_amount is not null
     AND   ac.void_date is null
     AND   ((0.05 > abs(abs(aphd.cleared_base_amount)
               - abs(ac.base_amount - ac.cleared_base_amount
               + nvl(ac.cleared_charges_base_amount, 0)))) OR
            (ac.cleared_charges_base_amount > 0 AND
             (0.05 > (abs(aphd.cleared_base_amount)
                - ac.cleared_charges_base_amount))))'
  );


  add_signature(g_signatures,
    119,
    'PAYMENT',
    'ACCOUNTING',
    '21916712',
    '972261.1',
    'ap_trx_missing_event_sel.sql',
    'Invoice payment or Payment History records for the Check missing Accounting Events ',
    'Apply the GDF patch following the instructions provided in [972261.1]',
    'Y',
    'N',
    impact_area_tbl('Period Close'),
    'SELECT /*+ ordered use_nl(ac, aip) */
            ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.check_date,
            ac.amount,
            ac.status_lookup_code
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_invoice_payments_all aip
     WHERE ac.check_id = aip.check_id
     AND   ((aip.accounting_event_id is null AND
             nvl(aip.posted_flag, ''N'') <> ''Y'') OR
            EXISTS (
              SELECT 1 FROM ap_payment_history_all aph
              WHERE aph.check_id = ac.check_id
              AND   aph.accounting_event_id is null
              AND   nvl(aph.posted_flag, ''N'') <> ''Y''))
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    120,
    'PAYMENT',
    'ACCOUNTING',
    '19877760',
    '1054299.1',
    'ap_trx_missing_xdl.sql',
    'Missing records in XLA_DISTRIBUTION_LINKS for migrated transactions',
    'Apply the GDF patch following the instructions provided in [1054299.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            xe.event_id,
            xte.entity_id,
            xah.ae_header_id,
            xte.source_id_int_1 transaction_id,
            xte.transaction_number,
            xte.entity_code,
            xte.ledger_id
     FROM xla_events xe,
          xla_transaction_entities_upg xte,
          ap_checks_all ac,
          gl_period_statuses upg,
          ap_system_parameters_all asp,
          xla_ae_headers xah,
          xla_ae_lines xal,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE xe.application_id = 200
     AND   xe.event_status_code = ''P''
     AND   xe.upg_batch_id is not null
     AND   xe.upg_batch_id <> - 9999
     AND   xah.application_id = 200
     AND   xal.application_id = 200
     AND   xah.event_id = xe.event_id
     AND   xah.ae_header_id = xal.ae_header_id
     AND   xah.upg_batch_id is not null
     AND   xte.application_id = 200
     AND   xte.ledger_id = xah.ledger_id
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   xte.entity_id = xe.entity_id
     AND   ac.check_id = nvl(xte.source_id_int_1,-99)
     AND   upg.application_id = xte.application_id
     AND   upg.ledger_id = xte.ledger_id
     AND   upg.set_of_books_id = asp.set_of_books_id
     AND   asp.set_of_books_id = xte.ledger_id
     AND   asp.org_id = ac.org_id
     AND   ac.check_date BETWEEN upg.start_date AND upg.end_date
     AND   upg.migration_status_code = ''U''
     AND   upg.closing_status in (''O'' ,''C'',''P'')
     AND   trunc(upg.start_date) < (
             SELECT min(trunc(creation_date)) FROM ad_applied_patches
             WHERE patch_type = ''MAINTENANCE-PACK''
             AND   maint_pack_level LIKE ''12.%'')
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip
             WHERE aip.check_id = ac.check_id)
     AND   NOT EXISTS (
             SELECT 1 FROM xla_distribution_links xdl
             WHERE xdl.application_id = 200
             AND   xdl.ae_header_id = xah.ae_header_id
             AND   xdl.ae_line_num = xal.ae_line_num)
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    121,
    'PAYMENT',
    'ACCOUNTING',
    '17511602',
    '1089119.1',
    'ap_aipXprorateWithDisc_sel.sql',
    'Payment accounting is wrong when there is a discount',
    'Apply the GDF patch following the instructions provided in [1089119.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.check_date,
            ac.vendor_name,
            ac.amount check_amount,
            aip.invoice_payment_id,
            aip.amount,
            aip.discount_taken,
            aip.invoice_id,
            aph.transaction_type,
            aph.accounting_event_id,
            aph.accounting_date,
            aph.posted_flag,
            aph.historical_flag
     FROM ap_checks_all ac,
          ap_invoice_payments_all aip,
          ap_payment_history_all aph,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aip.check_id = ac.check_id
     AND   ac.void_date is null
     AND   aph.check_id = aip.check_id
     AND   aph.accounting_event_id = aip.accounting_event_id
     AND   aip.discount_taken <> 0
     AND   aip.posted_flag = ''Y''
     AND   aip.reversal_inv_pmt_id is null
     AND   aip.amount - nvl(aip.discount_taken, 0) = (
             SELECT sum(aphd.amount) FROM ap_payment_hist_dists aphd
             WHERE aphd.invoice_payment_id = aip.invoice_payment_id
             AND   aphd.accounting_event_id = aip.accounting_event_id
             AND   aphd.pay_dist_lookup_code = ''CASH'')
     AND   EXISTS (
             SELECT 1 FROM xla_ae_headers xah
             WHERE xah.event_id = aip.accounting_event_id
             AND   xah.application_id = 200
             AND   xah.ledger_id = aip.set_of_books_id
             AND   xah.balance_type_code = ''A''
             AND   xah.upg_batch_id is null)
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    122,
    'PAYMENT',
    'ACCOUNTING',
    '17638041',
    '1140253.1',
    'ap_CancPmtUnclrdNotRev_sel.sql',
    'Payment cancellation did not revert unclearing, incorrect accounting',
    'Apply the GDF patch following the instructions provided in [1140253.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT pt.check_id,
            pt.check_number,
            pt.org_id,
            pt.check_date,
            pt.amount check_amount,
            aph.payment_history_id,
            aph.transaction_type,
            aph.accounting_event_id event_id,
            aph.posted_flag,
            pt.acctd_cash
     FROM (
            SELECT /*+ ordered use_nl(ac, aph, asp, xe) */
                   ac.org_id,
                   ac.check_number,
                   ac.check_id,
                   ac.check_date,
                   ac.amount,
                   xah.ledger_id,
                   sum(nvl(entered_cr,0) - nvl(entered_dr,0)) acctd_cash
            FROM (
                   ##$$CVIEW$$##
                 ) chks,
                 ap_checks_all ac,
                 ap_payment_history_all aph,
                 ap_system_parameters_all asp,
                 xla_events xe,
                 xla_ae_headers xah,
                 xla_ae_lines xal
            WHERE ac.check_id = aph.check_id
            AND   aph.accounting_event_id = xe.event_id
            AND   xe.event_id = xah.event_id
            AND   xal.ae_header_id = xah.ae_header_id
            AND   accounting_class_code like ''CASH%CLEAR%''
            AND   asp.org_id = ac.org_id
            AND   asp.set_of_books_id = xah.ledger_id
            AND   ac.void_date       is not null
            AND   ac.check_date       > (
                    SELECT MIN(TRUNC(creation_date)) FROM ad_applied_patches
                    WHERE patch_type = ''MAINTENANCE-PACK''
                    AND   maint_pack_level LIKE ''12.0%'')
            AND   NOT EXISTS (
                    SELECT /*+ no_unnest */ 1 FROM ap_payment_history_all aph1
                    WHERE aph1.check_id = ac.check_id
                    AND   posted_flag <> ''Y'')
            AND   EXISTS (
                    SELECT /*+ no_unnest */ 1
                    FROM ap_payment_history_all aph2,
                         xla_events xe2
                    WHERE aph2.check_id = ac.check_id
                    AND   aph2.accounting_event_id = xe2.event_id
                    AND   aph2.posted_flag = ''Y''
                    AND   xe2.event_status_code = ''P''
                    AND   xe2.process_status_code = ''P''
                    AND   aph2.transaction_type = ''PAYMENT UNCLEARING'')
            AND   ac.check_id = chks.check_id
            GROUP BY ac.org_id, ac.check_number, ac.check_id, ac.amount,
                     ac.check_date, xah.ledger_id
            HAVING   0 <> sum(nvl(entered_cr,0) - nvl(entered_dr,0))
          ) pt,
          ap_payment_history_all aph,
          xla_ae_headers xah
     WHERE aph.check_id = pt.check_id
     AND   aph.accounting_event_id = xah.event_id
     AND   xah.application_id = 200
     AND   xah.ledger_id = pt.ledger_id
     AND   aph.transaction_type IN (''PAYMENT CANCELLED'',
             ''REFUND CANCELLED'')
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_payment_history_all aph2,
                  xla_distribution_links xdl1
             WHERE aph2.transaction_type = ''PAYMENT CLEARING''
             AND   aph2.check_id = aph.check_id
             AND   xdl1.ref_event_id = aph2.accounting_event_id
             AND   xdl1.ae_header_id = xah.ae_header_id
             AND   xdl1.application_id = 200)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_payment_history_all aph3,
                  xla_distribution_links xdl2
             WHERE aph3.transaction_type = ''PAYMENT UNCLEARING''
             AND   aph3.check_id = aph.check_id
             AND   xdl2.ref_event_id = aph3.accounting_event_id
             AND   xdl2.ae_header_id = xah.ae_header_id
             AND   xdl2.application_id = 200)'
  );


  add_signature(g_signatures,
    123,
    'PAYMENT',
    'ACCOUNTING',
    '17639752',
    '1273087.1',
    'ap_payAdjWrngRnd_sel.sql',
    'Payment adjustment events having incorrect technical rounding in invoice_dist_amount',
    'Apply the GDF patch following the instructions provided in [1273087.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.org_id,
            ac.check_id,
            ac.check_number,
            ac.check_date,
            ac.amount,
            ac.bank_account_name,
            ac.currency_code,
            ac.void_date,
            aph.payment_history_id,
            aph.transaction_type,
            aph.historical_flag,
            aph.accounting_event_id event_id,
            aphd.amount aphd_amount,
            aphd.invoice_dist_amount aphd_inv_dist_amount,
            aphd.invoice_distribution_id,
            aph.invoice_adjustment_event_id,
            ai.invoice_num,
            aid.invoice_id
     FROM ap_payment_hist_dists aphd,
          ap_payment_history_all aph,
          ap_invoice_distributions_all aid,
          ap_checks_all ac,
          ap_invoices_all ai,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.payment_history_id = aphd.payment_history_id
     AND   aph.accounting_event_id = aphd.accounting_event_id
     AND   aph.transaction_type IN (''PAYMENT ADJUSTED'',''REFUND ADJUSTED'')
     AND   aph.posted_flag = ''Y''
     AND   aph.check_id = ac.check_id
     AND   ac.status_lookup_code != ''VOIDED''
     AND   ac.void_date is null
     AND   nvl(aph.historical_flag, ''N'') = ''N''
     AND   aphd.pay_dist_lookup_code IN (''CASH'',''DISCOUNT'')
     AND   aphd.invoice_distribution_id = aid.invoice_distribution_id
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.invoice_currency_code = ai.payment_currency_code
     AND   abs(aphd.amount - aphd.invoice_dist_amount) != 0
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    124,
    'PAYMENT',
    'ACCOUNTING',
    '17511616',
    '1119757.1',
    'ap_multiple_pay_clr_mat_sel.sql',
    'Duplicate payment maturity/clearing events',
    'Apply the GDF patch following the instructions provided in [1119757.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number ,
            ac.org_id,
            aph.transaction_type,
            ac.check_date,
            ac.vendor_name,
            ac.vendor_site_code,
            ac.status_lookup_code,
            count(*) count_events
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph
     WHERE aph.transaction_type IN (''PAYMENT MATURITY'', ''PAYMENT CLEARING'')
     AND   ac.check_id = aph.check_id
     AND   nvl(historical_flag,    ''N'') = ''N''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all aph1
             WHERE aph1.check_id = aph.check_id
             AND   aph1.transaction_type IN ( ''PAYMENT MATURITY REVERSAL'',
                     ''PAYMENT UNCLEARING'')
             AND   aph1.rev_pmt_hist_id = aph.payment_history_id)
     AND   ac.check_id = chks.check_id
     GROUP BY ac.check_id, aph.transaction_type,ac.check_number,
              ac.check_date,ac.org_id,ac.vendor_name,
              ac.vendor_site_code,ac.status_lookup_code
     HAVING   count(*) > 1'
  );


  add_signature(g_signatures,
    125,
    'PAYMENT',
    'ACCOUNTING',
    '12914712',
    '874710.1',
    'ap_PayAdjWrongRelEvtId_Sel.sql',
    'Payment with incorrect related event id (it is null or is same as accounting event id of the same transaction)',
    'Apply the GDF patch following the instructions provided in [874710.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aph.payment_history_id,
            aph.transaction_type,
            aph.posted_flag,
            aph.historical_flag,
            xe.event_id,
            xe.event_type_code,
            xe.event_status_code,
            xe.process_status_code,
            xe.event_date,
            aph.related_event_id,
            xe.upg_batch_id
     FROM ap_payment_history_all aph,
          xla_events xe,
          ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.transaction_type LIKE ''%ADJUSTED''
     AND   nvl(aph.historical_flag, ''N'') = ''N''
     AND   (aph.accounting_event_id = aph.related_event_id OR
            aph.related_event_id is null )
     AND   aph.accounting_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   aph.check_id = ac.check_id
     AND   ac.status_lookup_code <> ''VOIDED''
     AND   ac.void_date is null
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    126,
    'PAYMENT',
    'ACCOUNTING',
    '18997214',
    '970956.1',
    'ap_orphan_pay_hist_sel.sql',
    'Invalid Payment Cascade events without corresponding invoice distributions',
    'Apply the GDF patch following the instructions provided in [970956.1]',
    'Y',
    'N',
    impact_area_tbl('Period Close'),
    'SELECT aph.check_id,
            aph.org_id,
            aph.transaction_type,
            aph.payment_history_id,
            aph.related_event_id,
            aph.accounting_event_id,
            aph.invoice_adjustment_event_id,
            aph.accounting_date
     FROM ap_payment_history_all aph,
          xla_events xe,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.transaction_type LIKE ''%ADJUSTED''
     AND   nvl(aph.posted_flag,   ''N'') <> ''Y''
     AND   aph.transaction_type <> ''MANUAL PAYMENT ADJUSTED''
     AND   xe.event_id = aph.accounting_event_id
     AND   xe.event_status_code <> ''P''
     AND   xe.application_id = 200
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.accounting_event_id = aph.invoice_adjustment_event_id
             AND   aid.line_type_lookup_code != ''AWT'')
     AND   aph.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    128,
    'PAYMENT',
    'ACCOUNTING',
    '19367705',
    '1089156.1',
    'ap_quick_manual_adj_sel.sql',
    'Manual payment adjusted events created for a quick payment',
    'Apply the GDF patch following the instructions provided in [1089156.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ leading(chks) */
            ac.check_id,
            ac.check_number,
            ac.org_id,
            aph.payment_history_id,
            aph.accounting_date,
            aph.transaction_type,
            aph.posted_flag,
            aph.matched_flag,
            aph.accounting_event_id,
            aph.historical_flag,
            aph.creation_date,
            aph.last_update_date
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph
     WHERE ac.check_id = aph.check_id
     AND   ac.payment_type_flag = ''Q''
     AND   aph.transaction_type like ''MANUAL PAYMENT ADJUSTED''
     AND   aph.posted_flag <> ''Y''
     AND   NOT EXISTS (
             SELECT ''No invoice associated'' FROM ap_invoice_payments_all aip
             WHERE aip.accounting_event_id = aph.accounting_event_id)
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    129,
    'PAYMENT',
    'ACCOUNTING',
    '18997180',
    '874705.1',
    'ap_acctd_PayCncl_rev_event_sel.sql',
    'Unclearing and maturity reversal events not getting accounted for voided payments',
    'Apply the GDF patch following the instructions provided in [874705.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.bank_account_id,
            ac.bank_account_name,
            ac.amount,
            ac.check_date,
            ac.currency_code,
            ac.cleared_date,
            ac.cleared_amount,
            ac.void_date
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          ap_payment_history_all aph,
          xla_events xe
     WHERE ac.check_id = chks.check_id
     AND   aph.check_id = ac.check_id
     AND   aph.accounting_event_id = xe.event_id
     AND   ac.void_date is not null
     AND   aph.org_id = asp.org_id
     AND   asp.when_to_account_pmt <> ''CLEARING ONLY''
     AND   ac.status_lookup_code = ''VOIDED''
     AND   nvl(aph.posted_flag, ''N'') = ''Y''
     AND   nvl(xe.event_status_code, ''U'') = ''P''
     AND   nvl(xe.process_status_code, ''U'') = ''P''
     AND   xe.application_id = 200
     AND   aph.transaction_type IN (''PAYMENT CANCELLED'', ''REFUND CANCELLED'')
     AND   EXISTS (
             SELECT ''unaccounted non-cancelled event''
             FROM ap_payment_history_all aph1,
                  xla_events xe1
             WHERE aph1.check_id = ac.check_id
             AND   aph1.transaction_type NOT IN (''PAYMENT CANCELLED'',
                     ''REFUND CANCELLED'')
             AND   aph1.accounting_event_id = xe1.event_id
             AND   xe1.event_status_code IN (''U'', ''I'', ''R'')
             AND   xe1.application_id = 200)
     UNION ALL
     SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.bank_account_id,
            ac.bank_account_name,
            ac.amount,
            ac.check_date,
            ac.currency_code,
            ac.cleared_date,
            ac.cleared_amount,
            ac.void_date
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          ap_payment_history_all aph,
          xla_events xe
     WHERE ac.check_id = chks.check_id
     AND   aph.check_id = ac.check_id
     AND   aph.accounting_event_id = xe.event_id
     AND   ac.void_date is null
     AND   aph.org_id = asp.org_id
     AND   asp.when_to_account_pmt = ''CLEARING ONLY''
     AND   xe.event_status_code = ''U''
     AND   xe.application_id = 200
     AND   aph.transaction_type in (''PAYMENT CREATED'', ''REFUND RECORDED'',
             ''PAYMENT MATURITY'', ''PAYMENT MATURITY REVERSAL'',
             ''MANUAL PAYMENT ADJUSTED'', ''PAYMENT ADJUSTED'',
             ''REFUND ADJUSTED'', ''PAYMENT MATURITY ADJUSTED'')
     UNION ALL
     SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.bank_account_id,
            ac.bank_account_name,
            ac.amount,
            ac.check_date,
            ac.currency_code,
            ac.cleared_date,
            ac.cleared_amount,
            ac.void_date
     FROM chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          xla_events xe,
          ap_system_parameters_all asp
     WHERE ac.check_id = chks.check_id
     AND   aph.check_id = ac.check_id
     AND   aph.accounting_event_id = xe.event_id
     AND   ac.void_date is not null
     AND   aph.org_id = asp.org_id
     AND   asp.when_to_account_pmt = ''CLEARING ONLY''
     AND   xe.event_status_code = ''U''
     AND   xe.application_id = 200
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_payment_history_all h2,
                  xla_events e2
             WHERE h2.check_id = ac.check_id
             AND   h2.transaction_type = ''PAYMENT CLEARING''
             AND   h2.payment_history_id = aph.rev_pmt_hist_id
             AND   e2.application_id = 200
             AND   e2.event_status_code = ''P''
             AND   h2.accounting_event_id = e2.event_id )
     AND   NOT EXISTS (
            SELECT 1 FROM xla_events e4
            WHERE e4.entity_id = xe.entity_id
            AND   e4.application_id = 200
            AND   e4.event_status_code = ''P''
            AND   e4.event_type_code not like ''%CLEAR%'')'
  );


  add_signature(g_signatures,
    130,
    'PAYMENT',
    'ACCOUNTING',
    '18997102',
    '1125724.1',
    'ap_aip_aph_diff_event_sel.sql',
    'Event_id mismatch between ap_invoice_payments_all and ap_payment_history_all',
    'Apply the GDF patch following the instructions provided in [1125724.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac1.check_id check_id_1,
            ac1.check_number check_num_1,
            ac1.org_id org_id_1,
            aph1.accounting_event_id event_id_1,
            aph1.posted_flag posted_flag_1,
            aph1.org_id org_id_1,
            aph1.payment_history_id payment_history_id_1,
            xe1.entity_id entity_id_1,
            aph2.check_id check_id_2,
            ac2.check_number check_num_2,
            ac2.org_id  org_id_2,
            aph2.accounting_event_id event_id_2,
            aph2.posted_flag posted_flag_2,
            aph2.org_id org_id_2,
            aph2.payment_history_id payment_history_id_2,
            xe2.entity_id entity_id_2
     FROM ap_checks_all ac1,
          xla_transaction_entities_upg xte1,
          ap_invoice_payments_all aip1,
          ap_payment_history_all aph1,
          xla_events xe1,
          ap_checks_all ac2,
          xla_transaction_entities_upg xte2,
          ap_payment_history_all aph2,
          xla_events xe2,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE nvl(xte1.source_id_int_1, -99) = ac1.check_id
     AND   nvl(xte1.security_id_int_1, -99) = ac1.org_id
     AND   xte1.entity_code = ''AP_PAYMENTS''
     AND   xte1.application_id = xte2.application_id
     AND   aph1.check_id = ac1.check_id
     AND   aph1.transaction_type in ( ''PAYMENT CREATED'',''REFUND RECORDED'')
     AND   aph1.accounting_event_id = xe1.event_id
     AND   xe1.event_type_code in ( ''PAYMENT CREATED'',''REFUND RECORDED'')
     AND   xte1.entity_id = xe1.entity_id
     AND   xe1.application_id = xte2.application_id
     AND   nvl(xte2.source_id_int_1, -99) = ac2.check_id
     AND   nvl(xte2.security_id_int_1, -99) = ac2.org_id
     AND   xte2.entity_code = ''AP_PAYMENTS''
     AND   xte2.application_id = xte2.application_id
     AND   aph2.check_id = ac2.check_id
     AND   aph2.transaction_type in ( ''PAYMENT CREATED'',''REFUND RECORDED'')
     AND   aph2.accounting_event_id = xe2.event_id
     AND   xe2.event_type_code in ( ''PAYMENT CREATED'',''REFUND RECORDED'')
     AND   xte2.entity_id = xe2.entity_id
     AND   xe2.application_id = xte2.application_id
     AND   aip1.check_id = ac1.check_id
     AND   NOT EXISTS (
             SELECT ''invoice_payments'' FROM ap_invoice_payments_all aip2
             WHERE aip2.check_id = ac2.check_id)
     AND   xe1.event_id <> aip1.accounting_event_id
     AND   xe2.event_id = aip1.accounting_event_id
     AND   xe1.event_status_code = ''U''
     AND   xe1.process_status_code = ''U''
     AND   aph1.posted_flag in (''N'', ''S'')
     AND   ac1.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    131,
    'PAYMENT',
    'ACCOUNTING',
    '19367686',
    '1118703.1',
    'ap_reissue_sel.sql',
    'Checks accounted with incorrect amounts due to bugs 8975671 and 9257606.',
    'Apply the GDF patch following the instructions provided in [1118703.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'WITH ctrl AS (
       SELECT DISTINCT
              aip.check_id
       FROM (
              ##$$CVIEW$$##
            ) chks,
            ap_invoice_payments_all aip,
            ap_invoice_payments_all aip2,
            ap_checks_all ac1
       WHERE ac1.void_date is not null
       AND   ac1.status_lookup_code = ''VOIDED''
       AND   ac1.check_id = aip2.check_id
       AND   aip.check_id != aip2.check_id
       AND   aip2.invoice_id = aip.invoice_id
       AND   aip.check_id = chks.check_id
     )
     SELECT /*+ ordered use_nl(ac, aph, xe, xh, xl) */
            ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.check_date,
            xe.event_id,
            xe.event_type_code,
            sum(nvl(entered_cr,   0)) - sum(nvl(entered_dr,   0)) acctd_amt,
            ac.amount,
            ''Case 1'' case
     FROM ctrl,
          ap_checks_all ac,
          ap_payment_history_all aph,
          xla_events xe,
          xla_ae_headers xh,
          xla_ae_lines xl,
          ap_system_parameters_all asp
     WHERE xl.application_id = 200
     AND   aph.check_id = ac.check_id
     AND   ac.check_id = ctrl.check_id
     AND   ac.void_date is null
     AND   EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip
             WHERE aip.check_id = ac.check_id
             GROUP BY aip.check_id
             HAVING   sum(aip.amount) = ac.amount)
     AND   aph.accounting_event_id = xe.event_id
     AND   aph.posted_flag = ''Y''
     AND   xe.event_id = xh.event_id
     AND   xh.upg_batch_id is null
     AND   xe.event_type_code IN(''PAYMENT CREATED'', ''REFUND RECORDED'',
             ''PAYMENT CLEARED'')
     AND   xe.event_status_code = ''P''
     AND   xe.application_id = 200
     AND   xh.application_id = 200
     AND   xh.ledger_id = asp.set_of_books_id
     AND   xh.ae_header_id = xl.ae_header_id
     AND   asp.org_id = ac.org_id
     AND   xl.accounting_class_code IN(''CASH_CLEARING'', ''CASH'',
             ''FUTURE_DATED_PMT'')
     AND   decode(xe.event_type_code,
             ''PAYMENT CLEARED'',xl.accounting_class_code,
             ''YES'') != ''CASH''
     GROUP BY ac.org_id, ac.check_id, ac.check_date, ac.check_number,
              ac.amount, xe.event_id, xe.event_type_code
     HAVING   abs(abs(sum(nvl(entered_cr,0)) -
              sum(nvl(entered_dr,0)) ) - abs(ac.amount)) > 1
     UNION ALL
     SELECT /*+ ordered use_nl(ac, aph, aphd, xh) */
            ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.check_date,
            aph.accounting_event_id,
            aph.transaction_type,
            0 acctd_amt,
            ac.amount,
            ''Case 2''
     FROM ctrl,
          ap_checks_all ac,
          ap_payment_history_all aph,
          ap_payment_hist_dists aphd,
          xla_ae_headers xh,
          ap_system_parameters_all asp
     WHERE ac.amount <> 0
     AND aph.check_id = ac.check_id
     AND ac.check_id = ctrl.check_id
     AND ac.void_date is null
     AND asp.org_id = ac.org_id
     AND aphd.accounting_event_id = aph.accounting_event_id
     AND aphd.accounting_event_id = xh.event_id
     AND xh.application_id = 200
     AND xh.upg_batch_id is null
     AND aphd.pay_dist_lookup_code IN( ''CASH'', ''FINAL PAYMENT ROUNDING'')
     AND aph.transaction_type IN (''PAYMENT CREATED'',''REFUND RECORDED'')
     AND aph.posted_flag = ''Y''
     GROUP BY ac.org_id, ac.check_id, ac.check_date,
              ac.check_number, ac.amount, aph.accounting_event_id,
              aph.transaction_type
     HAVING SUM(aphd.invoice_dist_base_amount) = 0'
  );


  add_signature(g_signatures,
    132,
    'PAYMENT',
    'ACCOUNTING',
    '9341402',
    '1072017.1',
    'ap_missing_pay_hist_sel.sql',
    'Payment history record missing for accounted checks',
    'Apply the GDF patch following the instructions provided in [1072017.1]',
    'Y',
    'N',
    impact_area_tbl('Period Close'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.check_date,
            ac.amount,
            ac.currency_code,
            ac.vendor_name,
            xe.event_id,
            xe.event_type_code,
            xe.event_status_code,
            xe.process_status_code,
            xe.upg_batch_id,
            xe.event_date
     FROM ap_checks_all ac,
          xla_events xe,
          xla_transaction_entities_upg xte,
          ap_system_parameters_all asp,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.check_id = nvl(xte.source_id_int_1, -99)
     AND   asp.org_id = ac.org_id
     AND   xte.ledger_id = asp.set_of_books_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   xte.entity_id = xe.entity_id
     AND   xe.application_id = xte.application_id
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all aph
             WHERE aph.check_id = ac.check_id
             AND   aph.accounting_event_id = xe.event_id)
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    133,
    'PAYMENT',
    'ACCOUNTING',
    '17498186',
    '1146638.1',
    'ap_del_pay_clr_sel.sql',
    'Payment clearing event do not get accounted when recon_accounting_flag is changed after payment accounting',
    'Apply the GDF patch following the instructions provided in [1146638.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.check_date,
            aph.payment_history_id,
            aph.transaction_type,
            aph.accounting_event_id
     FROM ap_payment_history_all aph,
          ap_checks_all ac,
          xla_events xe,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.check_id = aph.check_id
     AND   xe.event_id = aph.accounting_event_id
     AND   aph.posted_flag <> ''Y''
     AND   aph.transaction_type like ''%CLEARING''
     AND   xe.event_status_code NOT IN (''N'',''P'')
     AND   xe.application_id = 200
     AND   EXISTS (
             SELECT 1
             FROM ap_payment_history_all h2,
                  xla_ae_headers xh,
                  xla_ae_lines xl
             WHERE h2.check_id = aph.check_id
             AND   h2.transaction_type IN
                     (''PAYMENT CREATED'',''REFUND RECORDED'',
                      ''PAYMENT MATURITY'')
             AND   h2.posted_flag = ''Y''
             AND   xh.event_id = h2.accounting_event_id
             AND   xl.ae_header_id = xh.ae_header_id
             AND   xl.application_id = 200
             AND   xh.application_id = 200
             AND   xl.accounting_class_code = ''CASH'')
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    134,
    'PAYMENT',
    'ACCOUNTING',
    '17629490',
    '1193313.1',
    'ap_payClrXbankCurAmt_sel.sql',
    'EC12 error in journal import - wrong payment clearing accounting due to incorrect Bank_Curr_Amount in the table AP_Payment_Hist_Dists',
    'Apply the GDF patch following the instructions provided in [1193313.1]',
    'Y',
    'Y',
    impact_area_tbl('GL Transfer'),
    'SELECT DISTINCT
            ''DIRECT'' affected_checks,
            ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.bank_account_id,
            ac.bank_account_name,
            ac.amount,
            ac.check_date,
            ac.cleared_date,
            aph.payment_history_id,
            aph.transaction_type,
            aph.accounting_event_id event_id,
            aph.bank_currency_code,
            aph.pmt_currency_code
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          ap_payment_hist_dists aphd
     WHERE aph.payment_history_id = aphd.payment_history_id
     AND   ac.check_id = aph.check_id
     AND   aph.transaction_type like ''PAYMENT CLEARING%''
     AND   aph.posted_flag = ''Y''
     AND   aphd.pay_dist_lookup_code = ''CASH''
     AND   aph.bank_currency_code = aph.pmt_currency_code
     AND   aphd.amount != aphd.bank_curr_amount
     AND   EXISTS (
             SELECT 1
             FROM xla_ae_headers h,
                  xla_transaction_entities_upg xte
             WHERE h.entity_id = xte.entity_id
             AND   xte.entity_code = ''AP_PAYMENTS''
             AND   nvl(xte.source_id_int_1, -1) = aph.check_id
             AND   h.gl_transfer_status_code != ''Y''
             AND   h.application_id = 200
             AND   xte.application_id = h.application_id)
     AND   NOT EXISTS (
             SELECT ''reversal'' FROM ap_payment_history_all aph2
             WHERE aph2.rev_pmt_hist_id = aph.payment_history_id)
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    135,
    'PAYMENT',
    'ACCOUNTING',
    '19157571',
    '1177653.1',
    'ap_payDistsMissInPrior_sel.sql',
    'Payment clearing event cannot be Accounted with error 0 because the Related payment created/maturity/adjusted/Maturity Adjusted events are not prorated across all invoice distributions ',
    'Apply the GDF patch following the instructions provided in [1177653.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aip.invoice_id,
            aph.transaction_type,
            aph.accounting_event_id,
            aid.invoice_distribution_id
     FROM chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          ap_invoice_payments_all aip,
          ap_invoice_distributions_all aid,
          xla_ae_headers xah
     WHERE ac.check_id = chks.check_id
     AND   aid.invoice_id = aip.invoice_id
     AND   aip.check_id = aph.check_id
     AND   aph.accounting_event_id = xah.event_id
     AND   aph.check_id = ac.check_id
     AND   nvl(aid.awt_invoice_payment_id, aip.invoice_payment_id) =
             aip.invoice_payment_id
     AND   ac.void_date is null
     AND   aip.reversal_inv_pmt_id is null
     AND   aid.set_of_books_id = xah.ledger_id
     AND   xah.application_id = 200
     AND   aid.prepay_distribution_id is null
     AND   aph.transaction_type IN (''PAYMENT CREATED'',
             ''REFUND RECORDED'' ,''MANUAL PAYMENT ADJUSTED'',
             ''MANUAL REFUND ADJUSTED'')
     AND   aid.last_update_date > xah.creation_date
     AND   aid.posted_flag = ''Y''
     AND   aph.posted_flag = ''Y''
     AND   NVL (aph.historical_flag, ''N'') = ''N''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all aph1
             WHERE aph1.check_id = aph.check_id
             AND   aph1.invoice_adjustment_event_id = aid.accounting_event_id)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_hist_dists aphd
             WHERE aphd.accounting_event_id = aph.accounting_event_id
             AND   aphd.invoice_payment_id = aip.invoice_payment_id
             AND   aphd.invoice_distribution_id = aid.invoice_distribution_id)
     UNION ALL
     SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aip.invoice_id,
            aph.transaction_type,
            aph.accounting_event_id,
            aid.invoice_distribution_id
     FROM chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          ap_invoice_payments_all aip,
          ap_invoice_distributions_all aid,
          xla_ae_headers xah
     WHERE ac.check_id = chks.check_id
     AND   aid.invoice_id = aip.invoice_id
     AND   aip.check_id = aph.check_id
     AND   aph.accounting_event_id = xah.event_id
     AND   aph.check_id = ac.check_id
     AND   ac.void_date is null
     AND   aip.reversal_inv_pmt_id is null
     AND   aid.set_of_books_id = xah.ledger_id
     AND   xah.application_id = 200
     AND   aid.prepay_distribution_id is null
     AND   aph.transaction_type IN (
             ''PAYMENT ADJUSTED'', ''REFUND ADJUSTED'')
     AND   aph.invoice_adjustment_event_id = aid.accounting_event_id
     AND   aid.last_update_date > xah.creation_date
     AND   aid.posted_flag = ''Y''
     AND   aph.posted_flag = ''Y''
     AND   NVL (aph.historical_flag, ''N'') = ''N''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_hist_dists aphd
             WHERE aphd.accounting_event_id = aph.accounting_event_id
             AND aphd.invoice_payment_id = aip.invoice_payment_id
             AND aphd.invoice_distribution_id = aid.invoice_distribution_id)'
  );


  add_signature(g_signatures,
    136,
    'PAYMENT',
    'ACCOUNTING',
    '17511562',
    '1264147.1',
    'ap_PayWrongEvtId_sel.sql',
    'Accounting_event_id is out of sync between AP_Invoice_Payments_all and AP_Payment_History_All tables',
    'Apply the GDF patch following the instructions provided in [1264147.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT ''Type 1'' corruption_type,
            aip.check_id,
            aip.org_id ,
            aip.accounting_event_id wrong_event_id,
            aph.accounting_event_id correct_event_id,
            aph.accounting_date correct_date,
            aip.posted_flag aip_posted_flag
     FROM chks,
          ap_payment_history_all aph,
          ap_invoice_payments_all aip
     WHERE aph.check_id = aip.check_id
     AND   aph.transaction_type in (''PAYMENT CREATED'', ''REFUND RECORDED'')
     AND   aph.accounting_event_id != aip.accounting_event_id
     AND   aph.posted_flag != ''Y''
     AND   aip.posted_flag = ''Y''
     AND   aip.reversal_inv_pmt_id is null
     AND   aph.check_id = chks.check_id
     UNION ALL
     SELECT ''Type 2'',
             aip.check_id,
             aip.org_id ,
             aip.accounting_event_id wrong_event_id,
             aph.accounting_event_id correct_event_id,
             aph.accounting_date correct_date,
             aip.posted_flag
     FROM chks,
          ap_invoice_payments_all aip,
          ap_payment_history_all aph
     WHERE aph.check_id = aip.check_id
     AND   aph.transaction_type in (''PAYMENT CREATED'', ''REFUND RECORDED'')
     AND   aph.accounting_event_id != aip.accounting_event_id
     AND   aph.posted_flag != ''Y''
     AND   aip.posted_flag != ''Y''
     AND   aip.reversal_inv_pmt_id is null
     AND   aip.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    137,
    'PAYMENT',
    'ACCOUNTING',
    '17511547',
    '1234974.1',
    'ap_pay_x_fpr_due_to_erv_sel.sql',
    'Incorrect accounting of payments because of wrong final payment rounding due to paid invoices with exchange rate variances',
    'Apply the GDF patch following the instructions provided in [1234974.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aid.invoice_distribution_id,
            aph.accounting_date,
            aph.accounting_event_id event_id,
            aphdf.pay_dist_lookup_code,
            aphdf.invoice_dist_base_amount fpr_base,
            ac.vendor_name,
            ac.currency_code,
            ac.void_date,
            ac.check_date,
            ac.bank_account_name,
            ac.amount,
            aph.payment_history_id,
            aph.transaction_type,
            (
              SELECT sum(aphdf1.invoice_dist_base_amount)
              FROM ap_payment_hist_dists aphdf1
              WHERE aphdf.invoice_distribution_id = aphdf1.invoice_distribution_id
              AND   aphdf.accounting_event_id = aphdf1.accounting_event_id
              AND   aphdf1.pay_dist_lookup_code LIKE ''%EXCHANGE RATE VARIANCE''
            ) aphd_erv_base,
            aid1.base_amount aid_erv_base
     FROM ap_invoice_distributions_all aid,
          ap_invoice_distributions_all aid1,
          ap_invoice_payments_all aip,
          ap_payment_history_all aph,
          ap_payment_hist_dists aphdf,
          ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.check_id = ac.check_id
     AND   NOT(aid1.line_type_lookup_code = ''TERV''
     AND   aphdf.invoice_dist_base_amount = 0)
     AND   ac.void_date is null
     AND   aid.invoice_distribution_id = aid1.related_id
     AND   aid1.line_type_lookup_code IN (''ERV'', ''TERV'')
     AND   aid1.invoice_id = aid.invoice_id
     AND   aph.transaction_type IN (''PAYMENT CREATED'' , ''PAYMENT CANCELLED'',
             ''PAYMENT ADJUSTED'' , ''MANUAL PAYMENT ADJUSTED'',
             ''UPGRADED MANUAL PMT ADJUSTED'', ''REFUND RECORDED'',
             ''REFUND ADJUSTED'' , ''REFUND CANCELLED'')
     AND   aphdf.invoice_distribution_id = aid.invoice_distribution_id
     AND   aphdf.accounting_event_id = aph.accounting_event_id
     AND   aphdf.pay_dist_lookup_code = ''FINAL PAYMENT ROUNDING''
     AND   aph.check_id = aip.check_id
     AND   aip.invoice_id = aid.invoice_id
     AND   EXISTS (
             SELECT 1 FROM ap_payment_hist_dists aphdf1
             WHERE aphdf.invoice_distribution_id = aphdf1.invoice_distribution_id
             AND   aphdf.accounting_event_id = aphdf1.accounting_event_id
             AND   aphdf.invoice_payment_id = aip.invoice_payment_id
             AND   aphdf1.pay_dist_lookup_code LIKE ''%EXCHANGE RATE VARIANCE'')
     AND   aphdf.invoice_dist_base_amount <> aid.base_amount + (
             SELECT nvl(sum(aid1.base_amount), 0)
             FROM ap_invoice_distributions_all aid1
             WHERE aid1.line_type_lookup_code IN(''ERV'', ''TERV'')
             AND   aid1.invoice_id = aid.invoice_id
             AND   aid1.related_id = aid.invoice_distribution_id) - ((
                SELECT nvl(sum(aphd.invoice_dist_base_amount), 0)
                FROM ap_payment_hist_dists aphd,
                     ap_payment_history_all aph,
                     ap_invoice_payments_all aip
                WHERE ((aphd.invoice_distribution_id = aid.invoice_distribution_id AND
                        aphd.pay_dist_lookup_code IN (''CASH'', ''DISCOUNT'',
                          ''FINAL PAYMENT ROUNDING'')) OR
                       (aphd.pay_dist_lookup_code = ''AWT'' AND
                        aphd.awt_related_id = aid.invoice_distribution_id))
                AND   aip.invoice_id = aid.invoice_id
                AND   aip.check_id = aph.check_id
                AND   aphd.payment_hist_dist_id <> aphdf.payment_hist_dist_id
                AND   aip.invoice_payment_id = aphd.invoice_payment_id
                AND   aph.payment_history_id = aphd.payment_history_id
                AND   aph.transaction_type IN (''PAYMENT CREATED'',
                        ''PAYMENT CANCELLED'', ''PAYMENT ADJUSTED'',
                        ''MANUAL PAYMENT ADJUSTED'', ''UPGRADED MANUAL PMT ADJUSTED'',
                        ''REFUND RECORDED'', ''REFUND ADJUSTED'',
                        ''REFUND CANCELLED'')) - (
                SELECT nvl(sum(apad.base_amount), 0)
                FROM ap_prepay_app_dists apad,
                     ap_prepay_history_all aph
                WHERE ((apad.invoice_distribution_id = aid.invoice_distribution_id AND
                        apad.prepay_dist_lookup_code IN(''PREPAY APPL'',
                          ''PREPAY APPL REC TAX'', ''PREPAY APPL NONREC TAX'')) OR
                       (apad.awt_related_id = aid.invoice_distribution_id AND
                        apad.prepay_dist_lookup_code = ''AWT''))
                AND   aph.invoice_id = aid.invoice_id
                AND   aph.prepay_history_id = apad.prepay_history_id))
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid2
             WHERE aid2.invoice_id = aid1.invoice_id
             AND   aid1.reversal_flag = ''Y''
             AND   aid2.reversal_flag = ''Y''
             AND   aid2.base_amount = -1* aid1.base_amount
             AND   aid2.accounting_event_id = aid1.accounting_event_id
             AND   (aid2.parent_reversal_id = aid1.invoice_distribution_id OR
                    aid1.parent_reversal_id = aid2.invoice_distribution_id))
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    138,
    'PAYMENT',
    'ACCOUNTING',
    '22873624',
    '2115968.1',
    'ap_incorrect_checks_sel.sql Case 1',
    'Orphan checks not paying any invoice and where another check exists with the same check number and vendor information or payment document id. These orphans cause the accounting program to fail',
    'Apply the GDF patch following the instructions provided in [2115968.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Payment Selection'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.amount,
            ac.status_lookup_code,
            aph.accounting_event_id,
            aph.posted_flag,
            ac.vendor_id,
            ac.vendor_site_id,
            ac.payment_id,
            ac.payment_document_id
     FROM ap_checks_all ac,
          ap_payment_history_all aph,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.check_id = chks.check_id
     AND   ac.payment_id is null
     AND   ac.status_lookup_code NOT IN (''OVERFLOW'',''SET UP'',''SPOILED'')
     AND   ac.check_id = aph.check_id
     AND   nvl(aph.historical_flag,''N'') <> ''Y''
     AND   aph.posted_flag <> ''Y''
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip
             WHERE aip.check_id = ac.check_id)
     AND   EXISTS  (
             SELECT 1
             FROM ap_invoice_payments_all aip1,
                  ap_checks_all ac1
             WHERE aip1.check_id = ac1.check_id
             AND   ac.org_id = ac1.org_id
             AND   ((ac.vendor_id = ac1.vendor_id AND
                     ac.vendor_site_id = ac1.vendor_site_id) OR
                    ac.payment_document_id = ac1.payment_document_id)
             AND   ac.check_number = ac1.check_number)'
  );


  add_signature(g_signatures,
    139,
    'PAYMENT',
    'ACCOUNTING',
    '18997124',
    '874904.1',
    'ap_AcctgDateOutOfSynch_sel.sql',
    'Out of sync accounting date between payment transaction tables and xla_events table',
    'Apply the GDF patch following the instructions provided in [874904.1]',
    'Y',
    'N',
    impact_area_tbl('Period Close'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT ''Invoice Payment'' record_type,
            ac.check_id,
            ac.check_number,
            ac.org_id,
            to_char(aip.accounting_date, ''DD-MON-YY HH24:MI:SS'') accounting_date,
            to_char(xe.event_date, ''DD-MON-YY HH24:MI:SS'') event_date,
            xe.event_id,
            aip.invoice_payment_id,
            aip.posted_flag
     FROM chks,
          ap_checks_all ac,
          ap_invoice_payments_all aip,
          xla_events xe
     WHERE aip.accounting_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   ac.check_id = aip.check_id
     AND   aip.accounting_DATE <> xe.event_date
     AND   ac.check_id = chks.check_id
     UNION ALL
     SELECT ''Payment History'',
            ac.check_id,
            ac.check_number,
            ac.org_id,
            to_char(aph.accounting_date, ''DD-MON-YY HH24:MI:SS''),
            to_char(xe.event_date, ''DD-MON-YY HH24:MI:SS''),
            xe.event_id,
            aph.payment_history_id,
            aph.posted_flag
     FROM chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          xla_events xe
     WHERE aph.accounting_event_id = xe.event_id
     AND   ac.check_id = aph.check_id
     AND   xe.application_id = 200
     AND   aph.accounting_date <> xe.event_date
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    140,
    'PAYMENT',
    'ACCOUNTING',
    '18997150',
    '875012.1',
    'ap_unacct_trx_closed_prd_sel.sql',
    'Unaccounted accounting events having event dates in closed periods',
    'Apply the GDF patch following the instructions provided in [875012.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close'),
    'SELECT /*+ ordered use_nl(gps, xte, xe) */
            xte.source_id_int_1 transaction_id,
            xte.transaction_number,
            asp.org_id,
            xe.event_id,
            xe.event_type_code event_type,
            xe.event_date,
            xte.entity_code,
            xte.ledger_id,
            xte.Security_Id_Int_1 org_id,
            ''Run fix script'' sweep_to_date
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_events xe,
          gl_period_statuses gps
     WHERE xe.application_id = 200
     AND   xte.application_id = 200
     AND   xe.entity_id = xte.entity_id
     AND   xte.ledger_id = asp.set_of_books_id
     AND   xe.event_status_code IN (''I'',''U'')
     AND   xe.process_status_code IN (''I'',''U'',''R'')
     AND   asp.org_id = ac.org_id
     AND   gps.application_id = 200
     AND   gps.set_of_books_id = asp.set_of_books_id
     AND   trunc(xe.event_date) between gps.start_date and gps.end_date
     AND   gps.closing_status not in (''O'',''F'')
     AND   nvl(gps.adjustment_period_flag, ''N'') = ''N''
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   ac.check_id = nvl(xte.source_id_int_1, -99)
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    141,
    'PAYMENT',
    'ACCOUNTING',
    '17505148',
    '788135.1',
    'ap_Orphan_Events_Sel.sql',
    'Orphan Accounting Events, which have records in the XLA_Events table but are not stamped on any Transaction tables',
    'Apply the GDF patch following the instructions provided in [788135.1]',
    'Y',
    'Y',
    impact_area_tbl('Period Close', 'Trial Balance'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT ''EVENT'' orphan_type,
            ''N'' processed_flag,
            ac.check_id,
            ac.check_number,
            ac.org_id,
            xe.event_id,
            xe.event_status_code,
            xe.process_status_code,
            xah.ae_header_id,
            xte.source_id_int_1 source_id,
            xte.entity_code source_table,
            xe.event_date,
            xe.entity_id,
            xe.event_type_code,
            xe.budgetary_control_flag,
            xe.upg_batch_id
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_events xe,
          xla_ae_headers xah
     WHERE xe.application_id = xte.application_id
     AND   xe.event_status_code <> ''P''
     AND   xe.event_id = xah.event_id (+)
     AND   xah.application_id(+) = xe.application_id
     AND   xte.entity_id = xe.entity_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   NOT EXISTS (
             SELECT ''No Inv rows for event'' FROM ap_invoice_distributions_all aid
             WHERE aid.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No Dists for bc_event_id'' FROM ap_invoice_distributions_all aid
             WHERE aid.bc_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No pmt rows for event'' FROM ap_invoice_payments_all aip
             WHERE aip.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No pmt hist rows for event'' FROM ap_payment_history_all aph
             WHERE aph.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No self assessed tax rows for event''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.accounting_event_id = xe.event_id)
     AND    NOT EXISTS (
             SELECT ''No self assessed tax rows  for bc_event_id''
             FROM   ap_self_assessed_tax_dist_all asatd
             WHERE  asatd.bc_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepay hist rows for event''
             FROM ap_prepay_history_all aprh
             WHERE aprh.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepayment hist rows for bc_event_id''
             FROM   ap_prepay_history_all apph
             WHERE  apph.bc_event_id = xe.event_id)
     AND   xe.event_type_code NOT IN
             (''MANUAL'', ''REVERSAL'', ''PREPAYMENT APPLICATION ADJ'')
     AND   (xe.upg_batch_id is null OR xe.upg_batch_id = -9999)
     AND   NOT EXISTS (
             SELECT ''No final accounted headers'' FROM   xla_ae_headers xah
             WHERE  xah.event_id = xe.event_id
             AND    xah.application_id = 200
             AND    xah.entity_id = xte.entity_id
             AND    xah.accounting_entry_status_code = ''F''
             AND    xah.gl_transfer_status_code = ''Y'')
     AND   xte.ledger_id = asp.set_of_books_id
     AND   nvl(xte.source_id_int_1, -99) = ac.check_id
     AND   asp.org_id = ac.org_id
     AND   ac.check_id = chks.check_id
     UNION ALL
     SELECT ''HEADER'',
            ''N'',
            ac.check_id,
            ac.check_number,
            ac.org_id,
            xah.event_id,
            null,
            null,
            xah.ae_header_id,
            xte.source_id_int_1 source_id,
            xte.entity_code source_table,
            xah.accounting_date,
            xah.entity_id,
            xah.event_type_code,
            null,
            xah.upg_batch_id
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah
     WHERE xah.application_id = xte.application_id
     AND   xte.entity_id = xah.entity_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   NOT EXISTS (
             SELECT ''No Invoice rows exist for this event''
             FROM ap_invoice_distributions_all aid
             WHERE aid.accounting_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No Distributions exist for the bc_event_id''
             FROM ap_invoice_distributions_all aid
             WHERE aid.bc_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No payment rows exist for this event''
             FROM ap_invoice_payments_all aip
             WHERE aip.accounting_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No payment history rows exists for this event''
             FROM ap_payment_history_all aph
             WHERE aph.accounting_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No self assessed tax rows exists for this event''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.accounting_event_id = xah.event_id)
     AND    NOT EXISTS (
             SELECT ''No self assessed tax rows exists for the bc_event_id''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE  asatd.bc_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepay history rows exists for this event''
             FROM ap_prepay_history_all aprh
             WHERE aprh.accounting_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepayment history rows exists for the bc_event_id''
             FROM ap_prepay_history_all apph
             WHERE apph.bc_event_id = xah.event_id)
     AND   NOT EXISTS (
             SELECT '' Event for this header does not exist''
             FROM xla_events xe
             WHERE xe.application_id = xah.application_id
             AND   xe.event_id = xah.event_id)
     AND   xah.event_type_code NOT IN
             (''MANUAL'', ''REVERSAL'', ''PREPAYMENT APPLICATION ADJ'')
     AND   (xah.upg_batch_id is null OR xah.upg_batch_id = -9999)
     AND   nvl(xah.gl_transfer_status_code, ''X'') <> ''Y''
     AND   nvl(xah.accounting_entry_status_code, ''X'') <> ''F''
     AND   xte.ledger_id = asp.set_of_books_id
     AND   nvl(xte.source_id_int_1, -99) = ac.check_id
     AND   asp.org_id = ac.org_id
     AND   ac.check_id = chks.check_id
     UNION ALL
     SELECT ''EVENT'' orphan_type,
            ''Y'' processed_flag,
            ac.check_id,
            ac.check_number,
            ac.org_id,
            xe.event_id,
            xe.event_status_code,
            xe.process_status_code,
            xah.ae_header_id,
            xte.source_id_int_1 source_id,
            xte.entity_code source_table,
            xe.event_date,
            xe.entity_id,
            xe.event_type_code,
            xe.budgetary_control_flag,
            xe.upg_batch_id
     FROM chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_events xe,
          xla_ae_headers xah
     WHERE xe.application_id = 200
     AND   xe.event_status_code = ''P''
     AND   xah.application_id = 200
     AND   xah.event_id = xe.event_id
     AND   xte.entity_id = xe.entity_id
     AND   xte.application_id = 200
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   NOT EXISTS (
             SELECT ''No Inv rows for event'' FROM ap_invoice_distributions_all aid
             WHERE aid.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No Dists for bc_event_id'' FROM ap_invoice_distributions_all aid
             WHERE aid.bc_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No pmt rows for event'' FROM ap_invoice_payments_all aip
             WHERE aip.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No pmt hist rows for event'' FROM ap_payment_history_all aph
             WHERE aph.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No self assessed tax rows for event''
             FROM ap_self_assessed_tax_dist_all asatd
             WHERE asatd.accounting_event_id = xe.event_id)
     AND    NOT EXISTS (
             SELECT ''No self assessed tax rows  for bc_event_id''
             FROM   ap_self_assessed_tax_dist_all asatd
             WHERE  asatd.bc_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepay hist rows for event''
             FROM ap_prepay_history_all aprh
             WHERE aprh.accounting_event_id = xe.event_id)
     AND   NOT EXISTS (
             SELECT ''No prepayment hist rows for bc_event_id''
             FROM   ap_prepay_history_all apph
             WHERE  apph.bc_event_id = xe.event_id)
     AND   xe.event_type_code NOT IN
             (''MANUAL'', ''REVERSAL'', ''PREPAYMENT APPLICATION ADJ'')
     AND   (xe.upg_batch_id is null OR xe.upg_batch_id = -9999)
     AND   xte.ledger_id = asp.set_of_books_id
     AND   nvl(xte.source_id_int_1, -99) = ac.check_id
     AND   asp.org_id = ac.org_id
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    142,
    'PAYMENT',
    'ACCOUNTING',
    '18997188',
    '742429.1',
    'ap_inv_event_status_code_sel.sql',
    'Accounting Events marked as Incomplete in the Accounting events table even though the Invoices related to the event do not contain any Non-Postable holds',
    'Apply the GDF patch following the instructions provided in [742429.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            xe.event_id,
            xe.event_date,
            xe.event_status_code,
            xe.process_status_code,
            xe.budgetary_control_flag,
            xte.entity_code,
            xte.source_id_int_1 source_id,
            xte.ledger_id
     FROM xla_events xe,
          xla_transaction_entities_upg xte,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE xte.entity_id = xe.entity_id
     AND   xte.application_id = 200
     AND   xe.application_id = 200
     AND   xe.event_status_code = ''I''
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   NOT EXISTS (
          SELECT 1 FROM ap_holds_all AH
          WHERE invoice_id IN (
                  SELECT invoice_id FROM ap_invoice_payments_all aip
                  WHERE aip.check_id = xte.source_id_int_1
                  AND   ah.release_lookup_code is null
                  AND   xte.entity_code = ''AP_PAYMENTS''))
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_payment_history_all aph,
                  ap_system_parameters_all asp
             WHERE asp.org_id = aph.org_id
             AND   aph.pmt_currency_code <> asp.base_currency_code
             AND   aph.pmt_to_base_xrate is null
             AND   aph.check_id = xte.source_id_int_1
             AND   xte.entity_code = ''AP_PAYMENTS'')
     AND   NOT EXISTS (
             SELECT 1
             FROM ap_invoice_distributions_all aid,
                  financials_system_params_all fsp,
                  ap_invoice_payments_all aip
             WHERE aip.check_id = NVL(XTE.source_id_int_1, -99)
             AND   aip.invoice_id = aid.invoice_id
             AND   xte.entity_code = ''AP_PAYMENTS''
             AND   xte.ledger_id = aid.set_of_books_id
             AND   aid.org_id = fsp.org_id
             AND   aid.set_of_books_id = fsp.set_of_books_id
             AND   ((nvl(fsp.purch_encumbrance_flag,''N'') = ''N'' AND
                     aid.match_Status_flag NOT IN (''T'',''A'')) OR
                    (nvl(fsp.purch_encumbrance_flag,''N'') = ''Y'' AND
                     aid.match_Status_flag != ''A'')))
     AND   xte.ledger_id = asp.set_of_books_id
     AND   asp.org_id = ac.org_id
     AND   nvl(xte.source_id_int_1, -99) = ac.check_id
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    143,
    'PAYMENT',
    'ACCOUNTING',
    '18997220',
    '1071876.1',
    'ap_incorrect_posted_flag_sel.sql Payments',
    'Out of Sync Posting status between the Accounting events in the Events tables and the transaction tables.',
    'Apply the GDF patch following the instructions provided in [1071876.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close', 'Sweep'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ''AP_INVOICE_PAYMENTS_ALL'' trx_table,
            aip.invoice_payment_id trx_id,
            aip.posted_flag,
            aip.accrual_posted_flag,
            aip.cash_posted_flag,
            xe.event_id,
            xte.ledger_id ledger_id
     FROM chks,
          ap_checks_all ac,
          ap_invoice_payments_all aip,
          xla_events xe,
          xla_transaction_entities_upg xte,
          gl_ledgers gl
     WHERE (aip.posted_flag = ''N'' OR
            (aip.accrual_posted_flag = ''N'' AND
             nvl(gl.sla_ledger_cash_basis_flag, ''N'') <> ''Y''))
     AND   aip.set_of_books_id = gl.ledger_id
     AND   xe.process_status_code = ''P''
     AND   xe.event_status_code IN (''N'',''P'')
     AND   ac.check_id = aip.check_id
     AND   xe.event_id = aip.accounting_event_id
     AND   xte.security_id_int_1 = ac.org_id
     AND   xe.entity_id = xte.entity_id
     AND   xe.application_id = xte.application_id
     AND   xe.application_id = 200
     AND   ac.check_id = chks.check_id
     UNION ALL
     SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ''AP_PAYMENT_HISTORY_ALL'' trx_table,
            aph.payment_history_id trx_id,
            aph.posted_flag,
            null,
            null,
            xe.event_id,
            xte.ledger_id ledger_id
     FROM chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          xla_events xe,
          xla_transaction_entities_upg xte
     WHERE aph.posted_flag <> ''Y''
     AND   xe.process_status_code = ''P''
     AND   xe.event_status_code IN (''N'',''P'')
     AND   xte.security_id_int_1 = aph.org_id
     AND   xe.event_id = aph.accounting_event_id
     AND   ac.check_id = aph.check_id
     AND   xe.entity_id = xte.entity_id
     AND   xe.application_id = 200
     AND   xte.application_id = 200
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    144,
    'PAYMENT',
    'ACCOUNTING',
    '17956236',
    '1088872.1',
    'ap_posted_flag_out_sync_sel.sql',
    'Posted Flag stuck in status ''S'' on transaction tables',
    'Apply the GDF patch following the instructions provided in [1088872.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT ''AP_INVOICE_PAYMENTS_ALL'' transaction_table,
            ac.check_id,
            ac.check_number,
            ac.org_id,
            invoice_payment_id transaction_id,
            posted_flag,
            event_id,
            event_status_code,
            decode(event_status_code, ''P'',''Y'',''N'') events_posted_flag,
            aip.invoice_id,
            invoice_num
     FROM chks,
          ap_checks_all ac,
          ap_invoice_payments_all aip,
          xla_events xe,
          ap_invoices_all ai
     WHERE aip.posted_flag = ''S''
     AND   xe.application_id = 200
     AND   xe.event_id = aip.accounting_event_id
     AND   ac.check_id = aip.check_id
     AND   ai.invoice_id = aip.invoice_id
     AND   ac.check_id = chks.check_id
     UNION ALL
     SELECT ''AP_PAYMENT_HISTORY_ALL'',
            ac.check_id,
            ac.check_number,
            ac.org_id,
            payment_history_id,
            posted_flag,
            event_id ,
            event_status_code,
            decode(event_status_code, ''P'',''Y'',''N'') events_posted_flag,
            null,
            null
     FROM chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          xla_events xe
     WHERE aph.posted_flag = ''S''
     AND   xe.application_id = 200
     AND   xe.event_id = aph.accounting_event_id
     AND   ac.check_id = aph.check_id
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    145,
    'PAYMENT',
    'ACCOUNTING',
    '17533422',
    '1316588.1',
    'ap_pay_cr_has_x_idba_sel.sql',
    'Incorrect technical rounding on the column Invoice_Dist_Base_Amount in the table AP_PAYMENT_HIST_DISTS causing Incorrect Payment Accounting ',
    'Apply the GDF patch following the instructions provided in [1316588.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aip.check_id,
            aip.org_id,
            aip.invoice_id
     FROM ap_invoice_payments_all aip,
          ap_payment_history_all aph,
          ap_payment_hist_dists aphd,
          ap_system_parameters_all asp,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aip.check_id = aph.check_id
     AND   aphd.invoice_payment_id = aip.invoice_payment_id
     AND   aphd.pay_dist_lookup_code = ''CASH''
     AND   aip.accounting_event_id = aphd.accounting_event_id
     AND   aip.accounting_event_id = aph.accounting_event_id
     AND   aph.payment_history_id = aphd.payment_history_id
     AND   aph.historical_flag is null
     AND   aph.pmt_currency_code <> asp.base_currency_code
     AND   aph.org_id = asp.org_id
     AND   aph.transaction_type IN (''PAYMENT CREATED'' , ''REFUND RECORDED'')
     AND   aph.posted_flag = ''Y''
     AND   aip.check_id = chks.check_id
     GROUP BY aip.check_id, aip.org_id, aip.invoice_id, aip.invoice_payment_id,
              aip.invoice_base_amount, aip.accounting_event_id, aip.amount
     HAVING   sum(nvl(aphd.invoice_dist_base_amount, invoice_dist_amount)) !=
                nvl(aip.invoice_base_amount,aip.amount)'
  );


  add_signature(g_signatures,
    194,
    'PAYMENT',
    'ACCOUNTING',
    '22873624',
    '2115968.1',
    'ap_incorrect_checks_sel.sql Case 3',
    'Checks with no corresponding invoice payment records',
    'Apply the GDF patch following the instructions provided in [2115968.1].',
    'Y',
    'N',
    impact_area_tbl('Payment Data', 'Period Close'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.checkrun_name,
            ac.payment_type_flag,
            ac.amount,
            ac.currency_code,
            ac.exchange_rate_type,
            ac.exchange_date,
            ac.exchange_rate,
            ac.check_date,
            ac.base_amount
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph
     WHERE ac.check_id = chks.check_id
     AND   ac.check_id = aph.check_id(+)
     AND   aph.posted_flag(+) != ''Y''
     AND   ac.payment_id is null
     AND   ac.status_lookup_code not in (''OVERFLOW'',''SET UP'',''SPOILED'')
     AND   aph.historical_flag is null
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip
             WHERE aip.check_id = ac.check_id)
     AND   NOT EXISTS (
              SELECT 1 FROM iby_docs_payable_all dp
              WHERE ((dp.calling_app_doc_unique_ref1 = ac.check_id AND
                      dp.calling_app_doc_unique_ref4 is not null)  OR
                     (dp.calling_app_doc_unique_ref1 = ac.checkrun_id AND
                      dp.calling_app_doc_unique_ref4 is null))
              AND   dp.org_id = ac.org_id)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_history_all aph2
             WHERE ac.check_id = aph2.check_id
             AND   aph2.posted_flag = ''Y'')'
  );


  add_signature(g_signatures,
    207,
    'PAYMENT',
    'ACCOUNTING',
    '19528164',
    '1370096.1',
    'ap_WrngAwtPror_sel.sql',
    'Checks which are improperly accounted due to incorrect payment proration when AWT distribution and parent distribution have the same amount',
    'Apply the GDF patch following the instructions provided in [1370096.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.org_id,
            ac.check_number,
            ac.check_date,
            ac.amount,
            aip.invoice_id,
            aip.accounting_event_id,
            aip.invoice_payment_id,
            aip.amount,
            sum(aphd.amount) total
     FROM ap_invoice_payments_all aip,
          ap_payment_hist_dists aphd,
          ap_payment_history_all aph,
          ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aip.invoice_payment_id = aphd.invoice_payment_id
     AND   aip.accounting_event_id = aphd.accounting_event_id
     AND   aip.posted_flag = ''Y''
     AND   aphd.pay_dist_lookup_code = ''CASH''
     AND   aph.accounting_event_id = aip.accounting_event_id
     AND   aph.posted_flag = ''Y''
     AND   aph.historical_flag is null
     AND   EXISTS (
             SELECT 1
             FROM ap_payment_hist_dists hd1,
                  ap_payment_hist_dists hd2
             WHERE hd1.invoice_payment_id = aip.invoice_payment_id
             AND   hd1.accounting_event_id = aip.accounting_event_id
             AND   hd1.pay_dist_lookup_code = ''AWT''
             AND   hd1.awt_related_id = hd2.invoice_distribution_id
             AND   hd2.invoice_payment_id = aip.invoice_payment_id
             AND   hd2.accounting_event_id = aip.accounting_event_id
             AND   hd1.payment_hist_dist_id > hd2.payment_hist_dist_id)
     AND   aph.check_id = ac.check_id
     AND   ac.check_id = chks.check_id
     GROUP BY ac.check_id, ac.org_id, ac.check_number, ac.check_date,
              ac.amount, aip.invoice_id, aip.accounting_event_id,
              aip.invoice_payment_id, aip.amount
     HAVING   aip.amount != sum(aphd.amount)'
  );


  add_signature(g_signatures,
    208,
    'PAYMENT',
    'ACCOUNTING',
    '19065517',
    '1336262.1',
    'ap_pmt_awt_x_xrate_sel.sql',
    'Payments which are incorrectly accounted due to payment time AWT generated with incorrect exchange rates',
    'Apply the GDF patch following the instructions provided in [1336262.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.vendor_name Supplier,
            ac.amount
     FROM gl_ledgers gl,
          ap_invoices_all ai,
          ap_invoice_distributions_all aid,
          ap_invoice_payments_all aip,
          ap_payment_hist_dists aphd,
          ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE gl.ledger_id = ai.set_of_books_id
     AND   gl.currency_code <> ai.invoice_currency_code
     AND   ai.invoice_currency_code = ai.payment_currency_code
     AND   aid.invoice_id = ai.invoice_id
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.awt_invoice_payment_id is not null
     AND   aip.invoice_id = ai.invoice_id
     AND   aip.exchange_rate <> ai.exchange_rate
     AND   nvl(aip.reversal_flag, ''N'') <> ''Y''
     AND   aphd.invoice_distribution_id = aid.invoice_distribution_id
     AND   aphd.invoice_payment_id = aip.invoice_payment_id
     AND   aphd.accounting_event_id = aip.accounting_event_id
     AND   aphd.pay_dist_lookup_code = ''AWT''
     AND   aphd.invoice_dist_base_amount = -aid.base_amount
     AND   aphd.paid_base_amount <> -aid.base_amount
     AND   ac.check_id = aip.check_id
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    210,
    'PAYMENT',
    'ACCOUNTING',
    '17602753',
    '1370114.1',
    'ap_xla_ae_x_bcc_sel.sql',
    'Upgraded future dated paymenst with incorrect business class codes in xla_ae_lines',
    'Apply the GDF patch following the instructions provided in [1370114.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.amount ,
            ac.vendor_name supplier,
            aph.transaction_type event_type,
            aph.accounting_event_id event_id,
            xal.accounting_class_code,
            xal.business_class_code,
            xah.ae_header_id
     FROM ap_checks_all ac,
  	ap_payment_history_all aph,
          xla_ae_headers xah,
          xla_ae_lines xal,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.accounting_event_id = xah.event_id
     AND   aph.check_id in (
             SELECT distinct h1.check_id
             FROM ap_payment_history_all h1,
                  ap_payment_history_all h2
             WHERE  h1.historical_flag = ''Y''
             AND    h1.transaction_type = ''PAYMENT CREATED''
             AND    h1.posted_flag = ''Y''
             AND    h2.check_id = h1.check_id
             AND    h2.posted_flag = ''N''
             AND    h2.transaction_type = ''PAYMENT MATURITY'')
     AND   xah.application_id = 200
     AND   xah.ae_header_id = xal.ae_header_id
     AND   xal.application_id = 200
     AND   aph.posted_flag = ''Y''
     AND   aph.transaction_type  IN(''MANUAL PAYMENT ADJUSTED'',
             ''PAYMENT CREATED'',''PAYMENT ADJUSTED'')
     AND   xal.accounting_class_code = ''FUTURE_DATED_PMT''
     AND   xal.business_class_code like '' AP_FUTURE_DTD_PMT''
     AND   ac.check_id = aph.check_id
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    214,
    'PAYMENT',
    'ACCOUNTING',
    '18997058',
    '1388157.1',
    'ap_x_posted_flag_sel.sql',
    'Incorrect posted flag in ap_payment_history_all for payments set to account at clearing only.',
    'Apply the GDF patch following the instructions provided in [1388157.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.vendor_name Supplier,
            aph.posted_flag,
            xe.event_id,
            xe.event_status_code
     FROM ap_payment_history_all aph,
          ap_checks_all ac,
          xla_events xe,
          ap_system_parameters_all asp,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aph.accounting_event_id = xe.event_id
     AND   xe.application_id = 200
     AND   aph.posted_flag = ''Y''
     AND   ac.check_id = aph.check_id
     AND   xe.event_status_code = ''U''
     AND   asp.org_id = aph.org_id
     AND   xe.event_type_code = ''PAYMENT CREATED''
     AND   asp.when_to_account_pmt = ''CLEARING ONLY''
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    221,
    'PAYMENT',
    'ACCOUNTING',
    '20573709',
    '1442435.1',
    'ap_pay_clr_has_x_mcr_sel.sql',
    'Payment Clearing events having incorrect Maturity to Clearing Rounding lines',
    'Apply the GDF patch following the instructions provided in [1442435.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT aph.check_id,
            aph.org_id,
            aph.accounting_event_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          ap_payment_hist_dists mcr,
          ap_payment_hist_dists aphd
     WHERE ac.check_id = chks.check_id
     AND   ac.status_lookup_code <> ''VOIDED''
     AND   aph.check_id = ac.check_id
     AND   aph.posted_flag = ''Y''
     AND   aph.transaction_type LIKE ''PAYMENT%CLEAR%''
     AND   aph.payment_history_id = mcr.payment_history_id
     AND   mcr.pay_dist_lookup_code = ''MATURITY TO CLEARING ROUNDING''
     AND   mcr.matured_base_amount = -1 * aphd.rounding_amt
     AND   aph.payment_history_id = aphd.payment_history_id
     AND   mcr.invoice_distribution_id = aphd.invoice_distribution_id
     AND   aphd.pay_dist_lookup_code = ''CASH''
     AND   aphd.amount <> 0
     AND   aph.historical_flag is null
     AND   aphd.matured_base_amount = 0'
  );


  add_signature(g_signatures,
    225,
    'PAYMENT',
    'ACCOUNTING',
    '16228438',
    '1445573.1',
    'xla_11IINVXFRR12GLTB_sel.sql',
    'Liability accounted in 11i and transferred to GL in R12 is missing from the Trial Balance report.',
    'Apply the GDF patch following the instructions provided in [1445573.1][1445563.1]',
    'Y',
    'N',
    impact_area_tbl('Trial Balance'),
    'SELECT xte.source_id_int_1 transaction_id,
            xte.security_id_int_1 org_id,
            xte.entity_code transaction_type,
            xah.event_id,
            xah.ae_header_id,
            xah.ledger_id,
            xah.accounting_date
     FROM xla_ae_headers xah,
          xla_ae_lines xal,
          xla_transaction_entities_upg xte,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE gl_transfer_status_code = ''Y''
     AND   accounting_entry_status_code = ''F''
     AND   xah.upg_batch_id is not null
     AND   xah.upg_batch_id <> -9999
     AND   group_id is not null
     AND   gl_transfer_date is not null
     AND   xah.application_id = xte.application_id
     AND   xah.ledger_id = xte.ledger_id
     AND   xah.entity_id = xte.entity_id
     AND   xah.ae_header_id = xal.ae_header_id
     AND   xah.application_id = xal.application_id
     AND   xal.accounting_class_code = ''LIABILITY''
     AND   xte.application_id = 200
     AND   asp.org_id = ac.org_id
     AND   xte.ledger_id = asp.set_of_books_id
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   nvl(xte.source_id_int_1,-99) = ac.check_id
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    226,
    'PAYMENT',
    'ACCOUNTING',
    '13622318',
    '1445214.1',
    'xla_xdl_miss_sel.sql',
    'The value for GL_SL_LINK is missing on upgraded accounting lines which are not transferred to GL.',
    'Apply the GDF patch following the instructions provided in [1445214.1]',
    'Y',
    'N',
    impact_area_tbl('GL Transfer'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            aeh.ae_header_id,
            ael.ae_line_num,
            ael.application_id
     FROM xla_ae_lines ael,
          xla_ae_headers aeh,
          xla_transaction_entities_upg xte,
          ap_system_parameters_all asp,
          ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE aeh.application_id = ael.application_id
     AND   aeh.ae_header_id = ael.ae_header_id
     AND   aeh.gl_transfer_status_code = ''N''
     AND   aeh.accounting_entry_status_code = ''F''
     AND   aeh.upg_batch_id is not null
     AND   ael.gl_sl_link_id is null
     AND   aeh.application_id = 200
     AND   aeh.ledger_id = xte.ledger_id
     AND   aeh.entity_id = xte.entity_id
     AND   xte.application_id = 200
     AND   asp.org_id = ac.org_id
     AND   xte.ledger_id = asp.set_of_books_id
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   nvl(xte.source_id_int_1,-99) = ac.check_id
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    228,
    'PAYMENT',
    'ACCOUNTING',
    '21221141',
    '1133423.1',
    'xla_mulent_sel.sql',
    'Checks with multiple transaction entity records in SLA',
    'Apply the GDF patch following the instructions provided in [1133423.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure', 'Period Close', 'Sweep'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            xte2.application_id,
            xte2.entity_id,
            xte2.ledger_id,
            xte2.entity_code,
  	  xte2.source_id_int_1,
            xte2.transaction_number,
            count(distinct xe2.event_id) event_count
     FROM xla_transaction_entities_upg xte2,
          xla_events xe2,
          ap_system_parameters_all asp,
          ap_checks_all ac,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE (xte2.application_id, xte2.ledger_id, xte2.entity_code,
            nvl(xte2.source_id_int_1, -99)) IN (
              SELECT xte.application_id ,
  	           xte.ledger_id ,
  		   xte.entity_code ,
  		   xte.source_id_int_1
  	    FROM xla_transaction_entities_upg xte
  	    WHERE  xte.application_id =200
              AND    xte.ledger_id = asp.set_of_books_id
              AND    xte.entity_code = ''AP_PAYMENTS''
              AND    nvl(xte.source_id_int_1,-99) = ac.check_id
  	    GROUP BY xte.application_id, xte.source_id_int_1,
                       xte.entity_code , xte.ledger_id
  	    HAVING   count(1) > 1)
     AND   xe2.application_id(+) = xte2.application_id
     AND   xe2.entity_id(+) = xte2.entity_id
     AND   asp.org_id = ac.org_id
     AND   xte2.ledger_id = asp.set_of_books_id
     AND   xte2.application_id = 200
     AND   xte2.entity_code = ''AP_PAYMENTS''
     AND   nvl(xte2.source_id_int_1, -99) = ac.check_id
     AND   ac.check_id = chks.check_id
     GROUP BY ac.check_id, ac.check_number, ac.org_id,
              xte2.application_id, xte2.entity_id, xte2.ledger_id,
              xte2.entity_code, xte2.source_id_int_1, xte2.transaction_number'
  );


  add_signature(g_signatures,
    231,
    'PAYMENT',
    'ACCOUNTING',
    '13475314',
    '1445175.1',
    'xla_acct_reversal_sel.sql',
    'Accounting reversal events are not getting accounted because of an existing reversal event.',
    'Apply the GDF patch following the instructions provided in [1445175.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT xdl.source_distribution_id_num_1,
            xah.event_type_code,
            xah.application_id,
            xah.upg_batch_id,
            xah.ledger_id,
            xah.balance_type_code,
            xdl.ae_header_id,
            xdl.ref_ae_header_id,
            xdl.ref_event_id,
            xdl.temp_line_num,
            xdl.ref_temp_line_num
     FROM  xla_distribution_links xdl,
           xla_ae_headers xah
     WHERE (xdl.application_id, xdl.ref_ae_header_id,
            xdl.temp_line_num, xah.ledger_id) IN (
             SELECT xdl1.application_id,
                    xah1.ae_header_id,
                    -1 * xdl1.temp_line_num,
                    xah1.ledger_id
             FROM xla_ae_headers xah1,
                  xla_distribution_links xdl1,
                  (
                    SELECT DISTINCT
                           xe.application_id,
                           xe.entity_id
                    FROM  xla_events xe,
                          xla_transaction_entities_upg xte,
                          ap_system_parameters_all asp,
                          ap_checks_all ac,
                          (
                             ##$$CVIEW$$##
                           ) chks
                    WHERE xe.application_id = xte.application_id
                    AND   xe.entity_id = xte.entity_id
                    AND   xe.event_status_code = ''U''
                    AND   xte.application_id = 200
                    AND   xte.ledger_id = asp.set_of_books_id
                    AND   xte.entity_code = ''AP_PAYMENTS''
                    AND   nvl(xte.source_id_int_1,-99) = ac.check_id
                    AND   asp.org_id = ac.org_id
                    AND   ac.check_id = chks.check_id
                  ) xe
             WHERE xah1.application_id = xe.application_id
             AND   xah1.entity_id = xe.entity_id
             AND   xdl1.application_id = xah1.application_id
             AND   xdl1.ae_header_id = xah1.ae_header_id
             AND   xdl1.temp_line_num > 0)
     AND   xah.ae_header_id = xdl.ae_header_id
     AND   xah.application_id = xdl.application_id
     AND   xdl.ref_temp_line_num = -1 * xdl.temp_line_num
     AND   ((xdl.ref_event_id   = xdl.ref_ae_header_id AND
             xah.event_type_code <> ''MANUAL'') OR
            (xah.event_type_code = ''MANUAL'' AND
             xah.upg_batch_id = -9999))'
  );


  add_signature(g_signatures,
    237,
    'PAYMENT',
    'ACCOUNTING',
    '17497993',
    '1447983.1',
    'ap_pay_has_dup_adj_sel.sql',
    'Checks with duplicate adjustment accounting events for a single invoice adjustment causing incorrect accounting for the payment.',
    'Apply the GDF patch following the instructions provided in [1447983.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.vendor_name Supplier,
            ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.amount,
            aph.transaction_type event_type,
            aph.accounting_event_id event_id
     FROM ap_checks_all ac,
          ap_payment_history_all aph,
          (
            ##$$CVIEW$$##
          ) chks
     WHERE ac.check_id = aph.check_id
     AND   aph.check_id IN (
             SELECT aph.check_id
             FROM ap_payment_history_all aph
             WHERE aph.transaction_type IN (''PAYMENT ADJUSTED'',
                     ''PAYMENT CLEARING ADJUSTED'',
                     ''PAYMENT MATURITY ADJUSTED'',
                     ''REFUND ADJUSTED'')
             AND   NVL(aph.historical_flag, ''N'') != ''Y''
             GROUP BY aph.check_id, aph.transaction_type,
                      aph.invoice_adjustment_event_id
             HAVING count(*) > 1)
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    238,
    'PAYMENT',
    'ACCOUNTING',
    '16960076',
    '1457134.1',
    'ap_dup_upg_pay_canc_sel.sql',
    'Upgraded payment transactions with duplicate unaccounted payment cancelled events created in 11i. These are failing during create accounting in R12.',
    'Apply the GDF patch following the instructions provided in [1457134.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            xle.event_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_system_parameters_all asp,
          xla_transaction_entities_upg xte,
          xla_events xle
     WHERE ac.check_id = chks.check_id
     AND   asp.org_id = ac.org_id
     AND   asp.set_of_books_id = xte.ledger_id
     AND   ac.check_id = nvl(xte.source_id_int_1,-99)
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   xte.application_id = 200
     AND   xle.entity_id = xte.entity_id
     AND   xle.event_type_code = ''PAYMENT CANCELLED''
     AND   EXISTS (
             SELECT 1
             FROM ap_payment_history_all aph1,
                  ap_payment_history_all aph2
             WHERE aph1.transaction_type = ''PAYMENT CANCELLED''
             AND   aph1.transaction_type = aph2.transaction_type
             AND   aph1.check_id = aph2.check_id
             AND   aph1.accounting_event_id <> aph2.accounting_event_id
             AND   aph1.historical_flag = ''Y''
             AND   aph1.check_id = ac.check_id)
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_payments_all aip
             WHERE aip.check_id = ac.check_id
             AND   aip.accounting_event_id = xle.event_id
             AND   aip.reversal_flag = ''Y''
             AND   aip.reversal_inv_pmt_id is not null)'
  );


  add_signature(g_signatures,
    240,
    'PAYMENT',
    'ACCOUNTING',
    '20797661',
    '1457624.1',
    'ap_all_upg_pay_cancel_sel.sql',
    'Upgraded payment history records have null values in related_event_id or rev_pmt_hist_id columns for refund or payment cancellations',
    'Apply the GDF patch following the instructions provided in [1457624.1]',
    'Y',
    'N',
    impact_area_tbl('Accounting Failure'),
    'WITH chks AS (
       ##$$MCVIEW$$##
     )
     SELECT aph.check_id,
            aph.org_id,
            aph.payment_history_id,
            aph.accounting_event_id,
            aph.accounting_date,
            aph.transaction_type,
            aph.related_event_id,
            aph.rev_pmt_hist_id
     FROM ap_payment_history_all aph,
          xla_events xe
     WHERE aph.historical_flag     = ''Y''
     AND transaction_type IN(''REFUND CANCELLED'', ''PAYMENT CANCELLED'')
     AND (aph.related_event_id is null OR
          aph.rev_pmt_hist_id is null)
     AND aph.accounting_event_id = xe.event_id
     AND xe.application_id = 200
     AND xe.upg_batch_id is not null
     AND EXISTS (
             SELECT 1 FROM ap_payment_history_all aph2
             WHERE aph.check_id = aph2.check_id
             AND aph2.transaction_type IN(''PAYMENT CREATED'', ''REFUND RECORDED''))
     AND   aph.check_id IN (
             SELECT aip1.check_id
             FROM chks,
                  ap_invoice_payments_all aip1,
                  ap_invoice_payments_all aip2
             WHERE aip1.invoice_id = aip2.invoice_id
             AND   aip2.check_id = chks.check_id)
     UNION ALL
     SELECT aph1.check_id,
            aph1.org_id,
            aph1.payment_history_id,
            aph1.accounting_event_id,
            aph1.accounting_date,
            aph1.transaction_type,
            aph1.related_event_id,
            aph1.rev_pmt_hist_id
     FROM ap_payment_history_all aph1,
          ap_payment_history_all aph2,
          xla_ae_headers xeh
     WHERE aph1.check_id IN (
            SELECT aip1.check_id
            FROM chks,
                 ap_invoice_payments_all aip1,
                 ap_invoice_payments_all aip2
             WHERE aip1.invoice_id = aip2.invoice_id
             AND aip2.check_id   = chks.check_id )
     AND   aph1.posted_flag = ''N''
     AND   aph1.transaction_type IN (''REFUND CANCELLED'', ''PAYMENT CANCELLED'')
     AND   aph1.related_event_id = xeh.event_id
     AND   xeh.application_id = 200
     AND   xeh.upg_batch_id is not null
     AND   aph1.check_id = aph2.check_id
     AND   aph1.rev_pmt_hist_id = aph2.payment_history_id
     AND   aph1.related_event_id = aph2.accounting_event_id
     AND   aph2.transaction_type  IN  (''PAYMENT CREATED'', ''REFUND RECORDED'')
     AND   EXISTS (
             SELECT 1 FROM ap_payment_hist_dists aphd
             WHERE aphd.payment_history_id  = aph2.payment_history_id
             AND aphd.accounting_event_id = aph2.accounting_event_id
             AND aphd.reversal_flag = ''Y'')'
  );


  add_signature(g_signatures,
    265,
    'PAYMENT',
    'ACCOUNTING',
    '17505845',
    '1505485.1',
    'ap_pay_hist_dists_zero_pro_sel.sql',
    'Payment history distributions having zero values due to incorrect proration of invoice distributions when the invoice amount is zero',
    'Apply the GDF patch following the instructions provided in [1505485.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ ordered use_nl(aph, aip, ai) */
            aip.check_id,
            aip.org_id,
            ai.invoice_id,
            ai.invoice_num,
            aph.accounting_event_id,
            aip.invoice_payment_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_payment_history_all aph,
          ap_invoice_payments_all aip,
          ap_invoices_all ai
     WHERE aph.check_id = chks.check_id
     AND   aip.invoice_id = ai.invoice_id
     AND   aip.posted_flag = ''Y''
     AND   aip.org_id = ai.org_id
     AND   aip.amount = 0
     AND   ai.invoice_amount = 0
     AND   ai.payment_status_flag = ''Y''
     AND   aph.check_id = aip.check_id
     AND   aph.transaction_type in (''PAYMENT CREATED'',
             ''REFUND RECORDED'', ''PAYMENT CLEARING'')
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.amount    <> 0)
     AND   EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_payment_hist_dists aphd
             WHERE aphd.accounting_event_id = aph.accounting_event_id
             AND   aphd.invoice_payment_id  = aip.invoice_payment_id
             AND   aphd.pay_dist_lookup_code = ''CASH''
             AND   aphd.amount             = 0)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM ap_payment_hist_dists aphd
             WHERE aphd.accounting_event_id = aph.accounting_event_id
             AND   aphd.invoice_payment_id  = aip.invoice_payment_id
             AND   aphd.pay_dist_lookup_code = ''CASH''
             AND   aphd.amount             <> 0)
     AND   NOT EXISTS (
             SELECT /*+ no_unnest */ 1
             FROM xla_ae_headers xah
             WHERE xah.event_id = aph.accounting_event_id
             AND   xah.upg_batch_id IS NOT NULL
             AND   xah.application_id = 200
             AND   xah.ledger_id = aip.set_of_books_id)'
  );


  add_signature(g_signatures,
    266,
    'PAYMENT',
    'ACCOUNTING',
    '18754567',
    '1505546.1',
    'ap_adj_dup_aphd_sel.sql',
    'Duplicate payment history distribution records for reversed invoice distributions.',
    'Apply the GDF patch following the instructions provided in [1505546.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT /*+ ordered use_nl(ac, aph) */
           ac.vendor_name Supplier,
           ac.org_id,
           ac.check_id,
           ac.check_number,
           ac.amount ,
           aph.accounting_event_id event_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph
      WHERE ac.check_id = chks.check_id
      AND   aph.posted_flag = ''Y''
      AND   aph.transaction_type like ''%ADJUSTED''
      AND   nvl(aph.historical_flag,''N'') = ''N''
      AND   aph.transaction_type <> ''MANUAL PAYMENT ADJUSTED''
      AND   ac.check_id = aph.check_id
      AND   ac.void_date is null
      AND   EXISTS (
              SELECT /*+ no_unnest */ 1
              FROM ap_payment_hist_dists aphd
              WHERE aphd.accounting_event_id  = aph.accounting_event_id
              AND   aphd.payment_history_id   = aph.payment_history_id
              AND   aphd.pay_dist_lookup_code = ''CASH''
              GROUP BY aphd.accounting_event_id, aphd.invoice_payment_id,
                       aphd.pay_dist_lookup_code, aphd.invoice_distribution_id,
                       aphd.reversed_pay_hist_dist_id
              HAVING   count(1) > 1)'
  );


  add_signature(g_signatures,
    269,
    'PAYMENT',
    'ACCOUNTING',
    '17501912',
    '1513213.1',
    'ap_pay_clradj_x_ratetype_sel.sql',
    'Payment clearing adjustment events that have accounted incorrectly because the exchange rate is different from the parent payment clearing event.',
    'Apply the GDF patch following the instructions provided in [1513213.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            clr_adj.accounting_event_id clr_adj_event_id,
            clr_adj.posted_flag clr_adj_posted_flag,
            clr_adj.payment_history_id pay_clr_adj_hist_id,
            clr.pmt_to_base_xrate_type clearing_rate_type,
            clr.pmt_to_base_xrate clearing_rate,
            clr_adj.pmt_to_base_xrate_type clr_adj_rate_type,
            clr_adj.pmt_to_base_xrate clr_adj_rate
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all clr_adj,
          ap_payment_history_all clr,
          ap_system_parameters_all asp
     WHERE ac.check_id = chks.check_id
     AND   ac.check_id = clr.check_id
     AND   ac.check_id = clr_adj.check_id
     AND   ac.status_lookup_code <> ''VOIDED''
     AND   asp.org_id = clr.org_id
     AND   asp.org_id = clr_adj.org_id
     AND   clr_adj.check_id = clr.check_id
     AND   clr_adj.transaction_type = ''PAYMENT CLEARING ADJUSTED''
     AND   clr.transaction_type = ''PAYMENT CLEARING''
     AND   nvl(clr_adj.historical_flag,   ''N'') = ''N''
     AND   nvl(clr.historical_flag, ''N'') = ''N''
     AND   clr_adj.pmt_to_base_xrate is not null
     AND   clr.pmt_to_base_xrate is not null
     AND   (clr_adj.pmt_to_base_xrate_type <> clr.pmt_to_base_xrate_type OR
            clr_adj.pmt_to_base_xrate <> clr.pmt_to_base_xrate)
     AND   clr_adj.related_event_id = clr.accounting_event_id'
  );


  add_signature(g_signatures,
    275,
    'PAYMENT',
    'ACCOUNTING',
    '13783741',
    '1445563.1',
    'xla_transR12_xdl_miss_sel.sql Payment',
    'The value for GL_SL_LINK is missing on upgraded accounting lines which are transferred to GL.',
    'Apply the GDF patch following the instructions provided in [1445563.1]',
    'Y',
    'N',
    impact_area_tbl('Drilldown'),
    'SELECT /*+ ordered use_nl(ac, xte, xah, xal, gir) */
            ac.check_id,
            ac.check_number,
            ac.org_id,
            xah.ae_header_id ,
            xal.ae_line_num,
            xah.application_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_system_parameters sp,
          xla_transaction_entities_upg xte,
          xla_ae_headers xah,
          xla_ae_lines xal,
          gl_import_references gir,
          gl_je_headers gjh,
          gl_je_batches gjb
     WHERE upper(gjh.je_source) = ''PAYABLES''
     AND   gjh.ledger_id = xah.ledger_id
     AND   gjb.je_batch_id = gjh.je_batch_id
     AND   gjh.je_header_id = gir.je_header_id
     AND   gjh.je_batch_id = gir.je_batch_id
     AND   gir.gl_sl_link_ID is null
     AND   gjh.je_from_sla_flag = ''Y''
     AND   gir.reference_5 = to_char(xah.entity_id)
     AND   gir.reference_6 = to_char(xah.event_id)
     AND   gir.reference_7 = to_char(xah.ae_header_id)
     AND   gir.reference_8 = to_char(xal.ae_line_num)
     AND   xal.ae_header_id = xah.ae_header_id
     AND   xal.application_id = xah.application_id
     AND   xah.entity_id = xte.entity_id
     AND   xah.application_id = xte.application_id
     AND   xte.application_id = 200
     AND   xte.ledger_id = sp.set_of_books_id
     AND   xte.entity_code = ''AP_PAYMENTS''
     AND   nvl(xte.source_id_int_1, -99) = ac.check_id
     AND   ac.check_id = chks.check_id'
  );


  add_signature(g_signatures,
    283,
    'PAYMENT',
    'ACCOUNTING',
    '18799665',
    '1920251.1',
    'ap_11i_chk_missg_adj_event_sel.sql',
    'Upgraded checks adjusted in R12 did not have a Payment Adjusted event created causing Payment Clearing events not to be accounted with the message "This line cannot be accounted until the accounting event that it references has been fully accounted."',
    'Follow the instructions provided in [1920251.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Failure'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.org_id,
            ac.vendor_name,
            aph.transaction_type,
            aph.posted_flag,
            aph.payment_history_id,
            xe.event_id
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_payment_history_all aph,
          xla_events xe,
          ap_payment_history_all aph_clr,
          ap_payment_hist_dists aphd,
          ap_invoice_distributions_all aid
     WHERE ac.check_id = chks.check_id
     AND   aph.transaction_type in (''PAYMENT CREATED'',''REFUND RECORDED'')
     AND   nvl(aph.historical_flag,''N'') = ''Y''
     AND   aph.posted_flag = ''Y''
     AND   xe.event_id = aph.accounting_event_id
     AND   nvl(xe.upg_batch_id, -9999) <> -9999
     AND   aph_clr.check_id = aph.check_id
     AND   aph_clr.transaction_type in (''PAYMENT CLEARING'', ''PAYMENT MATURITY'')
     AND   aph_clr.posted_flag <> ''Y''
     AND   aph_clr.historical_flag is null
     AND   aphd.payment_history_id = aph_clr.payment_history_id
     AND   aid.invoice_distribution_id = aphd.invoice_distribution_id
     AND   aid.historical_flag is null
     AND   aid.posted_flag = ''Y''
     AND   aph.check_id = ac.check_id
     AND   NOT EXISTS (
             SELECT 1 FROM ap_payment_hist_dists aphd2
             WHERE aphd2.payment_history_id = aph.payment_history_id
             AND   aphd2.invoice_distribution_id = aphd.invoice_distribution_id)
     AND   EXISTS (
             SELECT 1 FROM ap_payment_hist_dists aphd3
             WHERE aphd3.payment_history_id = aph.payment_history_id)'
  );


  add_signature(g_signatures,
    361,
    'PAYMENT',
    'ACCOUNTING',
    '18818008',
    '1920640.1',
    'ap_x_prorate_due_to_awt_sel.sql',
    'Payment accounting does not fully relieve the liability for foreign currency invoices with withholding.',
    'Follow the instructions provided in [1920640.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect', 'Automatic Witholding Tax', 'Trial Balance'),
    'SELECT aip.check_id,
            aip.invoice_id,
            ai.invoice_num,
            ai.set_of_books_id,
            ai.payment_status_flag,
            ai.invoice_currency_code,
            aid.invoice_line_number,
            aid.invoice_distribution_id,
            aid.amount,
            aid.base_amount
     FROM (
            ##$$CVIEW$$##
          ) chks,
          ap_checks_all ac,
          ap_invoice_payments_all aip,
          ap_invoice_distributions_all aid,
          ap_invoices_all ai,
          po_vendors pov,
          gl_ledgers gl,
          fnd_currencies fc_b,
          fnd_currencies fc_i
     WHERE ac.check_id = chks.check_id
     AND   aid.invoice_id = ai.invoice_id
     AND   ai.invoice_id = aip.invoice_id
     AND   ai.set_of_books_id = gl.ledger_id
     AND   aip.check_id = ac.check_id
     AND   pov.vendor_id = ac.vendor_id
     AND   pov.vendor_id = ai.vendor_id
     AND   trunc(ai.creation_date)  >= (
             SELECT min(trunc(creation_date)) FROM ad_applied_patches
             WHERE patch_type=''MAINTENANCE-PACK''
             AND   maint_pack_level LIKE ''12.%'' )
     AND   ai.payment_status_flag = ''Y''
     AND   nvl(ai.historical_flag, ''N'') = ''N''
     AND   gl.currency_code = fc_b.currency_code
     AND   fc_i.currency_code = ai.invoice_currency_code
     AND   aid.line_type_lookup_code = ''AWT''
     AND   aid.base_amount <> round( aid.amount * ai.exchange_rate, fc_b.precision )
     AND   NOT EXISTS (
             SELECT 1 FROM ap_invoice_distributions_all aid
             WHERE aid.invoice_id = ai.invoice_id
             AND   aid.prepay_distribution_id is not null)
     AND   aid.base_amount <> (
             SELECT sum(aphd.invoice_dist_base_amount)
             FROM ap_invoice_payments_all aip,
                  ap_payment_hist_dists aphd
             WHERE aphd.accounting_event_id = aip.accounting_event_id
             AND   aip.amount > 0
             AND   aip.invoice_id = aid.invoice_id
             AND   aphd.invoice_payment_id = aip.invoice_payment_id
             AND   aphd.invoice_distribution_id = aid.invoice_distribution_id
             AND   aphd.pay_dist_lookup_code = ''AWT'')'
  );


  add_signature(g_signatures,
    368,
    'PAYMENT',
    'ACCOUNTING',
    '17811729',
    '1573926.1',
    'ap_man_pay_adj_sel.sql',
    'Incorrect manual payment adjustment events resulting from reversing invoices in a payment to do a manual payment adjustment but not adding in invoices to balance the payment amount.',
    'Apply the GDF patch following the instructions provided in [1573926.1]',
    'Y',
    'Y',
    impact_area_tbl('Accounting Incorrect'),
    'SELECT ac.check_id,
            ac.check_number,
            ac.check_date,
            ac.amount,
            ac.vendor_name,
            ac.status_lookup_code,
            ac.org_id,
            ac.cleared_amount,
            ac.cleared_date,
            pay_v.accounting_event_id,
            CASE ac.status_lookup_code
              WHEN ''VOIDED''
                THEN ''No manual action required''
              WHEN ''RECONCILED''
                THEN ''UNCLEAR Check, VOID Check''
              WHEN ''RECONCILED UNACCOUNTED''
                THEN ''UNCLEAR Check, VOID Check''
              WHEN ''CLEARED BUT UNACCOUNTED''
                THEN ''UNCLEAR Check, VOID Check''
              WHEN ''CLEARED''
                THEN ''UNCLEAR Check, VOID Check''
              WHEN ''NEGOTIABLE''
                THEN ''VOID Check''
            END "Pre-Fix Actions"
     FROM ap_checks_all ac,
          (
            SELECT /*+ leading(chks) */
                   aph.check_id,
                   aph.accounting_event_id
            FROM (
                   ##$$CVIEW$$##
                 ) chks,
                 ap_payment_history_all aph,
                 ap_invoice_payments_all aip
            WHERE aph.check_id = chks.check_id
            AND   aph.check_id = aip.check_id
            AND   aph.accounting_event_id = aip.accounting_event_id
            AND   aph.transaction_type IN (''MANUAL PAYMENT ADJUSTED'',
                    ''REFUND ADJUSTED'')
            AND   NOT EXISTS (
                    SELECT 1 FROM ap_invoice_payments_all aip2
                    WHERE aip2.accounting_event_id = aph.accounting_event_id
                    AND   aip2.check_id = aph.check_id
                    AND   (aip2.reversal_flag <> ''Y'' OR
                           aip2.reversal_inv_pmt_id is null))
           GROUP BY aph.check_id, aph.accounting_event_id
           HAVING SUM(aip.amount) <> 0
          ) pay_v
     WHERE ac.check_id = pay_v.check_id'
  );


  add_signature(g_signatures,
    329,
    'SUPPLIER',
    '',
    '',
    '1175023.1',
    'ap_emp_mrg_to_nonemp_copy_site_sel.sql',
    'Employee type suppliers which were unsuccessfully merged using the "Copy Site" option.',
    'Apply the root cause fix as described in [1175023.1] if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT adv.entry_id,
            adv.vendor_id,
            adv.vendor_site_id,
            adv.duplicate_vendor_id,
            adv.duplicate_vendor_site_id,
            adv.keep_site_flag
     FROM ap_duplicate_vendors_all adv
     WHERE adv.process_flag = ''N''
     AND   adv.keep_site_flag = ''Y''
     AND   adv.duplicate_vendor_id = nvl(##$$VND$$##, adv.duplicate_vendor_id) OR
           adv.vendor_id = nvl(##$$VND$$##, adv.duplicate_vendor_id)
     AND   EXISTS (
             SELECT 1 FROM ap_suppliers sup
             WHERE (sup.vendor_id = adv.duplicate_vendor_id OR
                    sup.vendor_id = adv.vendor_id)
             AND   sup.employee_id is not null)'
  );


  add_signature(g_signatures,
    333,
    'SUPPLIER',
    '',
    '',
    '1513914.1',
    'ap_incorr_validation_num_sel.sql',
    'The VALIDATION_NUMBER field in ap_suppliers is populated with a huge value which is resulting in errors when trying to maintain the supplier and its sites.',
    'Apply the root cause fix from bug {14056268} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT aps.vendor_id,
            aps.validation_number
     FROM ap_suppliers aps
     WHERE aps.validation_number = 9.99E125
     AND   aps.vendor_id = nvl(##$$VND$$##, aps.vendor_id)'
  );


  add_signature(g_signatures,
    342,
    'SUPPLIER',
    '',
    '',
    '',
    'ap_sup_tolerance_sel.sql',
    'Upgraded supplier sites which are missing tolerance_id or service_tolerance_id, though the values were populated prior to the upgrade.',
    'Apply the root cause fix from bug {16568150} prior to upgrading or log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT assa.vendor_id,
            assa.vendor_site_id,
            assa.tolerance_id,
            assa.services_tolerance_id
     FROM ap_supplier_sites_all assa,
          po_vendor_sites_obs pvso
     WHERE assa.vendor_id = nvl(##$$VND$$##, assa.vendor_id)
     AND   assa.vendor_id = pvso.vendor_id
     AND   assa.vendor_site_id = pvso.vendor_site_id
     AND   (nvl(assa.tolerance_id, -99) <> nvl(pvso.tolerance_id, -99) OR
            nvl(assa.services_tolerance_id, -99) <>
              nvl(pvso.services_tolerance_id, -99))'
  );


  add_signature(g_signatures,
    351,
    'SUPPLIER',
    '',
    '',
    '1442312.1',
    'po_with_cont_merge_without_po_sel.sql',
    'Purchase orders for suppliers with contacts that were merged without selecting the PO option leaving the PO''s unmerged and not queriable.',
    'Apply the root cause fix from bug {9559145} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('PO Matching'),
    'SELECT DISTINCT poh.*
     FROM ap_duplicate_vendors_all adv1,
          po_headers_all poh
     WHERE adv1.duplicate_vendor_id = nvl(##$$VND$$##, adv1.duplicate_vendor_id)
     AND   adv1.process_flag = ''Y''
     AND   adv1.process <>  ''P''
     AND   poh.vendor_contact_id is not null
     AND   poh.vendor_id = adv1.duplicate_vendor_id
     AND   poh.vendor_site_id = adv1.duplicate_vendor_site_id
     AND   poh.org_id = adv1.org_id
     AND   EXISTS (
             SELECT 1 FROM po_vendor_contacts cont
             WHERE cont.vendor_contact_id = poh.vendor_contact_id)
     AND   NOT EXISTS (
             SELECT 1 FROM po_vendor_contacts cont
             WHERE cont.vendor_contact_id = poh.vendor_contact_id
             AND   cont.vendor_site_id = poh.vendor_site_id)'
  );


  add_signature(g_signatures,
    353,
    'SUPPLIER',
    '',
    '',
    '',
    'sync_supplier_in_ap_and_tca_sel.sql',
    'Vendor name in Payables and party name in HZ are not in sync post upgrade causing the vendor name to be displayed inconsistently.',
    'Apply the pre-install root cause fix from bug {16568150} prior to upgrade or log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT aps.vendor_id,
         aps.vendor_name,
         hp.party_id,
         hp.party_name
     FROM ap_suppliers aps,
          hz_parties hp
     WHERE aps.vendor_id = nvl(##$$VND$$##, aps.vendor_id)
     AND   aps.party_id = hp.party_id
     AND   aps.employee_id is null
     AND   nvl(aps.vendor_name, ''dummy'') <> nvl(hp.party_name, ''dummy'')'
  );


  add_signature(g_signatures,
    422,
    'SUPPLIER',
    '',
    '',
    '',
    'upd_duplicate_invoice_num_for_merge.txt',
    'The Supplier Merge program fails due to duplicate invoice numbers associated with the suppliers to be merged.',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT dv.vendor_id,
            dv.vendor_site_id,
            dv.duplicate_vendor_id,
            dv.duplicate_vendor_site_id,
            dv.entry_id,
            ai.invoice_id,
            ai.invoice_currency_code,
            ai.invoice_num,
            ai.invoice_amount,
            ai.amount_paid,
            ai.discount_amount_taken,
            ai.payment_status_flag,
            ai.invoice_date,
            ai.description,
            dv.org_id
     FROM ap_duplicate_vendors_all dv,
          ap_suppliers s1,
          ap_suppliers s2,
          ap_supplier_sites_all ss1,
          ap_supplier_sites_all ss2,
          ap_invoices_all ai
     WHERE (dv.vendor_id = ##$$VND$$## OR
            dv.duplicate_vendor_id = ##$$VND$$## OR
            ##$$VND$$## is null)
     AND   dv.process_flag = ''N''
     AND   ai.vendor_id = dv.duplicate_vendor_id
     AND   ai.vendor_site_id = dv.duplicate_vendor_site_id
     AND   ai.org_id = dv.org_id
     AND   s1.vendor_id = dv.vendor_id
     AND   ss1.vendor_site_id = nvl(dv.vendor_site_id, dv.duplicate_vendor_site_id)
     AND   s2.vendor_id = dv.duplicate_vendor_id
     AND   ss2.vendor_site_id = dv.duplicate_vendor_site_id
     AND   ss2.org_id = dv.org_id
     AND   ai.payment_status_flag = decode(dv.paid_invoices_flag,
                                      ''N'', ''N'', ai.payment_status_flag)
     AND   dv.process <> ''P''
     AND   (EXISTS (
             SELECT ''Duplicates exist IN ap_invoices''
             FROM ap_invoices_all ai2
             WHERE ai2.invoice_num = ai.invoice_num
             AND   ai2.vendor_id = dv.vendor_id
             AND   ai2.invoice_id != ai.invoice_id) OR
            EXISTS (
              SELECT ''Duplicates exist IN ap_history_invoices''
              FROM ap_history_invoices_all ahi
              WHERE ahi.invoice_num = ai.invoice_num
              AND   ahi.vendor_id = dv.vendor_id
              AND   ahi.invoice_id != ai.invoice_id))'
  );


  add_signature(g_signatures,
    424,
    'SUPPLIER',
    '',
    '',
    '',
    'ap_ship_bill_to_loc_on_upgSup_Sel.sql',
    'Bill and ship to locations are defaulting onto invoices from upgraded suppliers instead of defaulting the values from the financials system parameters.',
    'Review affected suppliers and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Data', 'Supplier'),
    'SELECT s.vendor_id,
            s.vendor_name,
            s.ship_to_location_id,
            s.bill_to_location_id,
            s.vendor_type_lookup_code
     FROM ap_suppliers s,
          po_vendors_obs obs
     WHERE s.vendor_id = nvl(##$$VND$$##, s.vendor_id)
     AND   s.vendor_id = obs.vendor_id
     AND   (s.ship_to_location_id = obs.ship_to_location_id OR
            s.bill_to_location_id = obs.bill_to_location_id)'
  );


  add_signature(g_signatures,
    425,
    'SUPPLIER',
    '',
    '',
    '',
    'ap_incorr_ptp_rounding_rule_sel.sql',
    'Invoices cannot be validated due to errors in ZX_TDS_CALC_SERVICES_PUB_PKG.PRORATE_IMPORTED_SUM_TAX_LINES due to incorrect values in ZX_PARTY_TAX_PROFILE.ROUNDING_RULE_CODE',
    'Generate the APList output for the affected invoices and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Invoice Approval', 'Supplier'),
    'SELECT /*+ parallel(ptp) */
             ptp.party_id,
             ptp.party_tax_profile_id,
             ptp.party_type_code,
             ptp.supplier_flag,
             ptp.site_flag,
             ptp.rounding_rule_code
     FROM zx_party_tax_profile ptp
     WHERE ptp.rounding_rule_code in (''U'',''D'',''N'')
     AND   ptp.party_type_code in (''THIRD_PARTY_SITE'')
     AND   ptp.party_id IN (
             SELECT ss.party_site_id
             FROM ap_supplier_sites_all ss
             WHERE ss.vendor_id = nvl(##$$VND$$##, ss.vendor_id))'
  );


  add_signature(g_signatures,
    427,
    'SUPPLIER',
    '',
    '12556489',
    '',
    'ap_hr_party_id_mismatch_sel.sql',
    'PARTY_ID value in HR is different from that in AP_SUPPLIERS for employee type suppliers causing duplicate values to be returned when searching suppliers.',
    'Log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT DISTINCT
            p.party_id hr_party_id,
            s.vendor_id vendor_id,
            s.party_id party_id,
            p.person_id employee_id
     FROM ap_suppliers s,
          per_all_people_f p
     WHERE s.employee_id = p.person_id
     AND   s.party_id <> p.party_id
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    429,
    'SUPPLIER',
    '',
    '19804367',
    '',
    'ap_x_party_site_id_generic_sel.sql',
    'Incorrect, non-address type party_site_id assigned to supplier site records.',
    'Apply the root cause fix from bug {19804367} if you have not done so, and log a Service Request to obtain the data fix.',
    'N',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT asu.vendor_name,
          assi.vendor_id,
          asu.party_id vendor_party_id,
          hzps.party_id incorrect_address_party_id,
          assi.vendor_site_id problem_vendor_site_id,
          assi.vendor_site_code problem_vendor_site_code,
          assi.org_id,
          assi.party_site_id incorrect_party_site_id,
          assi.location_id,
          assi1.vendor_site_id correct_vendor_site_id,
          assi1.vendor_site_code correct_vendor_site_code ,
          assi1.party_site_id correct_party_site_id,
          ac.rel_party_id rel_party_id ,
          ac.party_site_id rel_party_site_id
     FROM ap_suppliers asu,
          ap_supplier_sites_all assi,
          hz_party_sites hzps,
          ap_supplier_sites_all assi1,
          hz_party_sites hzps1,
          hz_parties hzp,
          ap_supplier_contacts ac
     WHERE asu.vendor_id = nvl(##$$VND$$##, asu.vendor_id)
     AND   assi.party_site_id = hzps.party_site_id
     AND   assi.vendor_id = asu.vendor_id
     AND   asu.party_id <> hzps.party_id
     AND   hzps.party_id = hzp.party_id
     AND   hzp.party_type = ''PARTY_RELATIONSHIP''
     AND   assi.location_id = hzps.location_id
     AND   ac.rel_party_id = hzp.party_id
     AND   ac.party_site_id = hzps.party_site_id
     AND   ac.org_party_site_id = assi1.party_site_id
     AND   assi1.vendor_id = asu.vendor_id
     AND   assi1.party_site_id = hzps1.party_site_id
     AND   hzps1.party_id = asu.party_id
     AND   assi1.vendor_site_id <> assi.vendor_site_id
     AND   assi1.location_id = assi.location_id'
  );


  add_signature(g_signatures,
    57,
    'SUPPLIER',
    '',
    '17571714',
    '1271092.1',
    'ap_inc_SuppUpg_fields_sel.sql Case 1: suppliers',
    'Case 1: Suppliers missing individual_1099/tax_payer_id after upgrade from 11i.',
    'Apply the GDF patch following the instructions provided in [1271092.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT s.vendor_id,
            s.vendor_name,
            s.vendor_type_lookup_code,
            s.party_id,
            s.individual_1099,
            s.num_1099
     FROM ap_suppliers s,
          po_vendors_obs pov
     WHERE pov.vendor_id = s.vendor_id
     AND   s.individual_1099 is null
     AND   s.organization_type_lookup_code IN (''INDIVIDUAL'',''FOREIGN INDIVIDUAL'')
     AND   (pov.individual_1099 is not null OR
            pov.num_1099 is not null)
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    58,
    'SUPPLIER',
    '',
    '17571714',
    '1271092.1',
    'ap_inc_SuppUpg_fields_sel.sql Case 2: supplier contacts',
    'Case 2: Supplier contacts missing job_title after upgrade from 11i.',
    'Apply the GDF patch following the instructions provided in [1271092.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT hp.party_name,
            sc.title,
            hoc.job_title,
            hoc.org_contact_id
     FROM ap_supplier_contacts sc,
          hz_org_contacts hoc,
          hz_parties hp
     WHERE hoc.org_contact_id = sc.org_contact_id
     AND   hp.party_id = sc.per_party_id
     AND   hoc.job_title is null
     AND   sc.title is not null'
  );


  add_signature(g_signatures,
    59,
    'SUPPLIER',
    '',
    '17571714',
    '1271092.1',
    'ap_inc_SuppUpg_fields_sel.sql Case 3: supplier sites',
    'Case 3: Supplier site missing service_tolerance_id after upgrade from 11i.',
    'Apply the GDF patch following the instructions provided in [1271092.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT s.vendor_id,
            s.vendor_name,
            ss.vendor_site_id,
            ss.vendor_site_code,
            pos.Services_tolerance_id
     FROM ap_supplier_sites_all ss,
          po_vendor_sites_obs pos,
          ap_suppliers s
     WHERE pos.vendor_site_id = ss.vendor_site_id
     AND   ss.vendor_id = s.vendor_id
     AND   ss.services_tolerance_id is null
     AND   pos.services_tolerance_id is not null
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    60,
    'SUPPLIER',
    '',
    '21983844',
    '1265353.1',
    'iby_dup_bnkAcct_Sel.sql',
    'Duplicate bank accounts.',
    'Apply the GDF patch following the instructions provided in [1265353.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT ext_bank_account_id,
            bank_account_num,
            bank_id,
            branch_id,
            currency_code,
            country_code,
            bank_account_type,
            account_suffix,
            rank() OVER (
              PARTITION BY bank_account_num, bank_id, branch_id,
                           currency_code, country_code, bank_account_num_hash1,
                           bank_account_num_hash2
              ORDER BY end_date desc, creation_date,
                       start_date, ext_bank_account_id
            ) num
     FROM iby_ext_bank_accounts
     WHERE (bank_account_num,
            nvl(bank_id,-99),
            nvl(branch_id,-99),
            nvl(currency_code,''XX''),
            country_code,
            nvl(bank_account_num_hash1,-1),
            nvl(bank_account_num_hash2,-1)) IN (
              SELECT bank_account_num,
                     nvl(bank_id,-99),
                     nvl(branch_id,-99),
                     nvl(currency_code,''XX''),
                     country_code,
                     nvl(bank_account_num_hash1,-1),
                     nvl(bank_account_num_hash2,-1)
              FROM iby_ext_bank_accounts
              WHERE country_code <> ''JP''
              AND   country_code <> ''NZ''
              GROUP BY bank_account_num, bank_id, branch_id, currency_code,
                       country_code, bank_account_num_hash1, bank_account_num_hash2
              HAVING count(*) > 1)
     UNION ALL
     SELECT ext_bank_account_id,
            bank_account_num,
            bank_id,
            branch_id,
            currency_code,
            country_code,
            bank_account_type,
            account_suffix,
            rank() OVER (
              PARTITION BY bank_account_num, bank_id, branch_id, currency_code,
                           country_code, bank_account_num_hash1,
                           bank_account_num_hash2,bank_account_type
              ORDER BY end_date desc, creation_date, start_date,
                       ext_bank_account_id
            ) num
     FROM iby_ext_bank_accounts
     WHERE (bank_account_num,
            nvl(bank_id,-99),
            nvl(branch_id,-99),
            nvl(currency_code,''XX''),
            country_code,
            nvl(bank_account_num_hash1,-1),
            nvl(bank_account_num_hash2,-1),
            nvl(bank_account_type,''XX'')) IN (
              SELECT bank_account_num,
                     nvl(bank_id,-99),
                     nvl(branch_id,-99),
                     nvl(currency_code,''XX''),
                     country_code,
                     nvl(bank_account_num_hash1,-1),
                     nvl(bank_account_num_hash2,-1),
                     nvl(bank_account_type,''XX'')
              FROM iby_ext_bank_accounts
              WHERE country_code = ''JP''
              GROUP BY bank_account_num, bank_id, branch_id, currency_code,
                    country_code,  bank_account_num_hash1, bank_account_num_hash2,
                    bank_account_type
              HAVING   count(*) > 1)
     UNION ALL
     SELECT ext_bank_account_id,
            bank_account_num,
            bank_id,
            branch_id,
            currency_code,
            country_code,
            bank_account_type,
            account_suffix,
            rank() OVER (
              PARTITION BY bank_account_num, bank_id,branch_id, currency_code,
                           country_code, bank_account_num_hash1, bank_account_num_hash2,
                           account_suffix
              ORDER BY end_date desc, creation_date,
                       start_date, ext_bank_account_id
            ) num
     FROM iby_ext_bank_accounts
     WHERE (bank_account_num,
            nvl(bank_id,-99),
            nvl(branch_id,-99),
            nvl(currency_code,''XX''),
            country_code,
            nvl(bank_account_num_hash1,-1),
            nvl(bank_account_num_hash2,-1),
            nvl(ACCOUNT_SUFFIX,''XX'')) IN (
              SELECT bank_account_num,
                     nvl(bank_id,-99),
                     nvl(branch_id,-99),
                     nvl(currency_code,''XX''),
                     country_code,
                     nvl(bank_account_num_hash1,-1),
                     nvl(bank_account_num_hash2,-1),
                     nvl(ACCOUNT_SUFFIX,''XX'')
              FROM iby_ext_bank_accounts
              WHERE country_code = ''NZ''
              GROUP BY bank_account_num, bank_id, branch_id, currency_code,
                       country_code, bank_account_num_hash1, bank_account_num_hash2,
                       account_suffix
              HAVING count(*) > 1)'
  );


  add_signature(g_signatures,
    61,
    'SUPPLIER',
    '',
    '17963869',
    '1141213.1',
    'ap_missing_ibyExtPayeeData_sel.sql',
    'Supplier sites that do not have data in iby_external_payees_all',
    'Apply the GDF patch following the instructions provided in [1141213.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT s.vendor_name,
            ss.vendor_id,
            ss.vendor_site_id,
            ss.vendor_site_code,
            s.party_id,
            ss.party_site_id
     FROM ap_suppliers s,
          ap_supplier_sites_all ss
     WHERE s.vendor_id = ss.vendor_id
     AND   NOT EXISTS (
             SELECT 1 FROM iby_external_payees_all b
             WHERE b.supplier_site_id = ss.vendor_site_id)
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    63,
    'SUPPLIER',
    '',
    '17571649',
    '1179376.1',
    'ap_sup_tca_sync_sel.sql',
    'Null vendor name in ap_suppliers',
    'Apply the GDF patch following the instructions provided in [1179376.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT s.vendor_id,
            s.segment1 vendor_number,
            s.vendor_type_lookup_code,
            s.tca_sync_vendor_name
     FROM ap_suppliers s
     WHERE s.vendor_name is null
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    64,
    'SUPPLIER',
    '',
    '17920283',
    '1271086.1',
    'AP_Party_site_id_sel.sql',
    'Employee type suppliers with party_site_id populated',
    'Apply the GDF patch following the instructions provided in [1271086.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT s.vendor_id,
            s.vendor_name,
            s.segment1 vendor_number,
            ss.vendor_site_code,
            ss.org_id,
            s.party_id,
            ss.party_site_id,
            ss.vendor_site_id,
            s.employee_id
     FROM ap_suppliers s,
          ap_supplier_sites_all ss
     WHERE s.employee_id is not null
     AND   nvl(ss.inactive_date, sysdate+1) >  sysdate
     AND   s.enabled_flag = ''Y''
     AND   s.vendor_type_lookup_code = ''EMPLOYEE''
     AND   ss.party_site_id is not null
     AND   s.vendor_id = ss.vendor_id
     AND   ss.vendor_site_code in (''HOME'', ''OFFICE'', ''PROVISIONAL'')
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    65,
    'SUPPLIER',
    '',
    '17493296',
    '1327197.1',
    'ap_upg_dup_supContact_sel.sql',
    'Duplicate supplier contacts after upgrade to R12',
    'Apply the GDF patch following the instructions provided in [1327197.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT s.vendor_id,
            s.vendor_name,
            sc.vendor_contact_id current_vendor_contact_id,
            min(vendor_contact_id) OVER (
              PARTITION BY per_party_id, org_party_site_id
            ) new_vendor_contact_id,
            ss.vendor_site_id,
            ss.vendor_site_code,
            (
              SELECT hps.party_site_name
              FROM hz_party_sites hps
              WHERE party_site_id = ss.party_site_id
            ) party_site_name ,
            sc.inactive_date,
            sc.first_name,
            sc.middle_name,
            sc.last_name,
            sc.prefix,
            sc.title,
            sc.phone,
            sc.per_party_id,
            sc.relationship_id,
            sc.rel_party_id,
            sc.org_contact_id,
            sc.org_party_site_id
     FROM ap_supplier_contacts sc,
          ap_suppliers s,
          ap_supplier_sites_all ss
     WHERE sc.org_party_site_id = ss.party_site_id
     AND   ss.vendor_id = s.vendor_id
     AND   EXISTS (
             SELECT ''x'' FROM ap_supplier_contacts sc2
             WHERE sc2.org_party_site_id = ss.party_site_id
             AND   sc2.per_party_id = sc.per_party_id
             GROUP BY sc2.per_party_id, sc2.org_party_site_id
             HAVING   count(*) > 1)
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    66,
    'SUPPLIER',
    '',
    '19529400',
    '1329684.1',
    'ap_upg_x_emp_sitecode_sel.sql',
    'Employee type suppliers with invalid vendor_site_code in ap_supplier sites after upgrade to R12',
    'Apply the GDF patch following the instructions provided in [1329684.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT s.vendor_id,
            s.vendor_name,
            s.segment1 vendor_number,
            ss.vendor_site_code,
            ss.org_id,
            s.party_id,
            ss.vendor_site_id,
            s.employee_id
     FROM ap_suppliers s,
          ap_supplier_sites_all ss
     WHERE s.employee_id is not null
     AND   nvl(ss.inactive_date, sysdate+1) > sysdate
     AND   s.enabled_flag = ''Y''
     AND   s.vendor_type_lookup_code = ''EMPLOYEE''
     AND   ss.PARTY_SITE_ID is null
     AND   s.vendor_id = ss.vendor_id
     AND   ss.vendor_site_code not in (''HOME'',''OFFICE'',''PROVISIONAL'')
     AND   EXISTS (
             SELECT ''person_id'' FROM per_all_people_f papf
             WHERE papf.person_id = s.employee_id)
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    67,
    'SUPPLIER',
    '',
    '17571659',
    '1152626.1',
    'ap_diff_curr_code_sel.sql',
    'Employee type suppliers with different invoice currency codes at supplier and site levels',
    'Apply the GDF patch following the instructions provided in [1152626.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT s.vendor_id,
            s.vendor_name,
            s.segment1 vendor_number,
            ss.vendor_site_code,
            ss.vendor_site_id,
            s.invoice_currency_code inv_curr_code_supp,
            ss.invoice_currency_code inv_curr_cod_sup_site,
            s.payment_currency_code pay_curr_code_supp,
            ss.payment_currency_code pay_curr_cod_sup_site,
            ss.org_id
     FROM ap_suppliers s,
          ap_supplier_sites_all ss
     WHERE s.vendor_id = ss.vendor_id
     AND   s.invoice_currency_code ! = ss.invoice_currency_code
     AND   s.vendor_type_lookup_code = ''EMPLOYEE''
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    68,
    'SUPPLIER',
    '',
    '19327571',
    '1370307.1',
    'ap_x_inactive_sites_sel.sql',
    'Supplier sites inactivated during the R12 upgrade',
    'Apply the GDF patch following the instructions provided in [1370307.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT s.vendor_id,
            s.vendor_name,
            s.segment1 vendor_number,
            ss.vendor_site_id,
            ss.vendor_site_code,
            ss.inactive_date,
            hp.party_name,
            hps.party_site_name,
            hp.party_id,
            hps.party_site_id,
            hps.status
     FROM hz_party_sites hps,
          hz_parties hp,
          ap_supplier_sites_all ss,
          ap_suppliers s
     WHERE hps.status = ''I''
     AND   hps.party_id = hp.party_id
     AND   ss.party_site_id = hps.party_site_id
     AND   ss.inactive_date is not null
     AND   ss.inactive_date >= sysdate
     AND   s.vendor_id = ss.vendor_id
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    69,
    'SUPPLIER',
    '',
    '17287667',
    '1370138.1',
    'ap_employee_id_null_sel.sql',
    'Upgraded employee type suppliers with null employee_id',
    'Apply the GDF patch following the instructions provided in [1370138.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT /*+ parallel(s) */
            s.vendor_id,
            s.vendor_name,
            s.segment1 supplier_number,
            s.party_id ap_party_id,
            s.start_date_active,
            s.end_date_active,
            s.enabled_flag
     FROM ap_suppliers s,
          po_vendors_obs pvo
     WHERE pvo.vendor_id = s.vendor_id
     AND   pvo.employee_id is null
     AND   upper(s.vendor_type_lookup_code) = ''EMPLOYEE''
     AND   s.employee_id is null
     AND   (sysdate BETWEEN
             nvl(s.start_date_active, sysdate - 1) AND
             nvl(s.end_date_active, sysdate + 1) OR
            nvl(s.end_date_active,sysdate+1) <= sysdate)
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    70,
    'SUPPLIER',
    '',
    '13857555',
    '1315812.1',
    'iby_dup_payee_sel.sql',
    'Duplicate external payees in iby_external_payees_all',
    'Apply the GDF patch following the instructions provided in [1315812.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT a.ext_payee_id,
            a.payee_party_id,
            a.payment_function,
            a.exclusive_payment_flag,
            a.party_site_id,
            a.supplier_site_id,
            a.org_id,
            a.org_type,
            a.default_payment_method_code,
            a.ece_tp_location_code,
            a.bank_charge_bearer,
            a.bank_instruction1_code,
            a.bank_instruction2_code,
            a.bank_instruction_details,
            a.payment_reason_code,
            a.payment_reason_comments,
            a.inactive_date,
            a.payment_text_message1,
            a.payment_text_message2,
            a.payment_text_message3,
            a.delivery_channel_code,
            a.payment_format_code,
            a.settlement_priority,
            a.remit_advice_delivery_method,
            a.remit_advice_email,
            a.remit_advice_fax,
            rank() OVER (
              PARTITION BY a.payee_party_id, a.payment_function,
                           a.party_site_id, a.supplier_site_id,
                           a.org_id, a.org_type
              ORDER BY a.payee_party_id, a.last_update_date desc,
                       a.ext_payee_id
            ) as ranking
     FROM iby_external_payees_all a
     WHERE EXISTS (
             SELECT ''duplicates'' FROM iby_external_payees_all b
             WHERE a.payee_party_id = b.payee_party_id
             AND   a.payment_function = b.payment_function
             AND   nvl(a.party_site_id, 0) = nvl(b.party_site_id, 0)
             AND   nvl(a.supplier_site_id, 0) = nvl(b.supplier_site_id, 0)
             AND   nvl(a.org_id, 0) = nvl(b.org_id, 0)
             AND   nvl(a.org_type, ''0'') = nvl(b.org_type, ''0'')
             AND   a.ext_payee_id <> b.ext_payee_id)'
  );


  add_signature(g_signatures,
    71,
    'SUPPLIER',
    '',
    '17942622',
    '967157.1',
    'ap_supp_sites_addr_info_sel.sql',
    'Null characters in supplier data causing ''Page no longer active'' errors when submitting payment batches',
    'Apply the GDF patch following the instructions provided in [967157.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT ''AP_SELECTED_INVOICES_ALL'' source_table,
            s.vendor_id,
            s.vendor_name,
            s.segment1 vendor_number,
            si.vendor_site_id,
            si.vendor_site_code,
            si.org_id,
            null party_site_id,
            si.checkrun_name,
            si.invoice_id,
            si.invoice_num,
            si.invoice_date,
            si.payment_num,
            si.original_invoice_id,
            si.original_payment_num
     FROM ap_selected_invoices_all si,
          ap_suppliers s
     WHERE s.vendor_id = si.vendor_id
     AND   (si.address_line1 = chr(0) OR
            si.address_line2 = chr(0) OR
            si.address_line3 = chr(0) OR
            si.address_line4 = chr(0) OR
            si.city          = chr(0) OR
            si.state         = chr(0) OR
            si.zip           = chr(0) OR
            si.province      = chr(0) OR
            si.country       = chr(0))
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)
     UNION ALL
     SELECT ''AP_SUPPLIER_SITES_ALL'' source_table,
            s.vendor_id,
            s.vendor_name,
            s.segment1 vendor_number,
            ss.vendor_site_id,
            ss.vendor_site_code,
            ss.org_id,
            ss.party_site_id,
            null,
            null,
            null,
            null,
            null,
            null,
            null
     FROM ap_supplier_sites_all ss,
          ap_suppliers s
     WHERE s.vendor_id  = ss.vendor_id
     AND   (ss.address_line1 = chr(0) OR
            ss.address_line2 = chr(0) OR
            ss.address_line3 = chr(0) OR
            ss.address_line4 = chr(0) OR
            ss.city          = chr(0) OR
            ss.state         = chr(0) OR
            ss.zip           = chr(0) OR
            ss.province      = chr(0) OR
            ss.country       = chr(0) OR
            ss.county        = chr(0))
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    72,
    'SUPPLIER',
    '',
    '17488068',
    '1349757.1',
    'ap_upg_dup_address_sel.sql',
    'Duplicate addresses created during the R12 upgrade of supplier sites due to different values in the attribute columns',
    'Apply the GDF patch following the instructions provided in [1349757.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT hps2.party_id,
            hps2.party_site_name,
            hps2.party_site_id,
            hps2.status,
            hps2.attribute_category,
            hps2.attribute1,
            hps2.attribute2,
            hps2.attribute3,
            hps2.attribute4,
            hps2.attribute5,
            hps2.attribute6,
            hps2.attribute7,
            hps2.attribute8,
            hps2.attribute9,
            hps2.attribute10,
            hps2.attribute11,
            hps2.attribute12,
            hps2.attribute13,
            hps2.attribute14,
            hps2.attribute15
     FROM hz_party_sites hps2
     WHERE (hps2.location_id, hps2.party_id) IN (
             SELECT hps.location_id, party_id FROM hz_party_sites hps
             WHERE hps.created_by_module = ''AP_BASE_UPGRADE_SCRIPT''
             GROUP BY hps.location_id, hps.party_id, duns_number_c
             HAVING   count(*) > 1)
     AND   hps2.created_by_module = ''AP_BASE_UPGRADE_SCRIPT''
     AND   NOT EXISTS (
             SELECT ''SITE'' FROM ap_supplier_sites_all ss
             WHERE ss.party_site_id = hps2.party_site_id)'
  );


  add_signature(g_signatures,
    73,
    'SUPPLIER',
    '',
    '17488169',
    '1370311.1',
    'ap_upg_inactive_addr_sel.sql',
    'End dated supplier sites incorrectly causing party addresses to be inactivated during R12 upgrade',
    'Apply the GDF patch following the instructions provided in [1370311.1]',
    'Y',
    'N',
    impact_area_tbl('Supplier'),
    'SELECT s.vendor_id,
            s.vendor_name,
            ss.vendor_site_code,
            ss.vendor_site_id,
            ss.inactive_date,
            hps.party_site_name,
            hps.party_site_id,
            hps.status
     FROM ap_suppliers s,
          ap_supplier_sites_all ss,
          po_vendor_sites_obs povs,
          hz_party_sites hps
     WHERE s.vendor_id = ss.vendor_id
     AND   ss.vendor_site_id = povs.vendor_site_id
     AND   hps.party_site_id = ss.party_site_id
     AND   hps.status = ''I''
     AND   EXISTS (
             SELECT 1 FROM po_vendor_sites_obs obs2
             WHERE obs2.vendor_site_id = ss.vendor_site_id
             AND   ss.party_site_id = hps.party_site_id
             AND   obs2.inactive_date < sysdate)
     AND   s.vendor_id = nvl(##$$VND$$##, s.vendor_id)'
  );


  add_signature(g_signatures,
    211,
    'SUPPLIER',
    '',
    '17571683',
    '1377248.1',
    'ap_xla_supmg_sel.sql Supplier',
    'Accounting transactions which have not been merged to the destination supplier after Supplier/Site merge',
    'Apply the GDF patch following the instructions provided in [1377248.1]',
    'Y',
    'N',
    impact_area_tbl('Trial Balance'),
    'WITH ap_ledger_options AS (
       SELECT ai.set_of_books_id,
              nvl(xlo.merge_acct_option_code,''NONE'') merge_acct_option_code,
              adv.org_id,
              adv.vendor_id to_vendor_id,
              adv.vendor_site_id to_vendor_site_id,
              adv.duplicate_vendor_id from_vendor_id,
              adv.duplicate_vendor_site_id from_vendor_site_id,
              adv.process,
              adv.paid_invoices_flag
       FROM xla_ledger_options xlo,
            ap_invoices_all ai,
            ap_duplicate_vendors_all adv
       WHERE ai.set_of_books_id = xlo.ledger_id
       AND   xlo.application_id = 200
       AND   xlo.merge_acct_option_code IN (''CHANGE'',''TRANSFER'')
       AND   ai.vendor_id = adv.vendor_id
       AND   nvl(adv.vendor_site_id,ai.vendor_site_id) = ai.vendor_site_id
       AND   adv.process_flag = ''Y''
       AND   adv.process <> ''P''
       AND   ai.vendor_id = nvl(##$$VND$$##, ai.vendor_id)
       UNION
       SELECT aip.set_of_books_id,
              nvl(xlo.merge_acct_option_code,''NONE'') merge_acct_option_code,
              adv.org_id,
              adv.vendor_id,
              adv.vendor_site_id,
              adv.duplicate_vendor_id,
              adv.duplicate_vendor_site_id,
              adv.process,
              adv.paid_invoices_flag
        FROM xla_ledger_options xlo,
             ap_invoice_payments_all aip,
             ap_checks_all ac,
             ap_duplicate_vendors_all adv
        WHERE aip.set_of_books_id = xlo.ledger_id
        AND   xlo.application_id = 200
        AND   xlo.merge_acct_option_code IN (''CHANGE'',''TRANSFER'')
        AND   aip.check_id = ac.check_id
        AND   ac.vendor_id = adv.vendor_id
        AND   nvl(adv.vendor_site_id,ac.vendor_site_id) = ac.vendor_site_id
        AND   adv.process_flag = ''Y''
        AND   adv.process <> ''P''
        AND   ac.vendor_id = nvl(##$$VND$$##, ac.vendor_id))
     SELECT alo.to_vendor_id,
            nvl(alo.to_vendor_site_id,ai.vendor_site_id) to_vendor_site_id,
            alo.org_id,
            ai.invoice_id source_id_int_1,
            alo.from_vendor_id,
            alo.from_vendor_site_id,
            ai.invoice_num source_number,
            ''AP_INVOICES'' entity_code,
            ai.set_of_books_id ledger_id
     FROM ap_invoices_all ai,
          ap_ledger_options alo
      WHERE ai.set_of_books_id = alo.set_of_books_id
      AND   ai.vendor_id = alo.to_vendor_id
      AND   ai.vendor_site_id = nvl(alo.to_vendor_site_id,ai.vendor_site_id)
      AND   alo.merge_acct_option_code = ''TRANSFER''
      AND   NOT EXISTS (
              SELECT ''No Merge Entry in xla for this vendor site''
              FROM xla_transaction_entities_upg xte,
                   xla_events xe
              WHERE xte.application_id = 200
              AND   xte.ledger_id = alo.set_of_books_id
              AND   xte.entity_code = ''THIRD_PARTY_MERGE''
              AND   xe.entity_id = xte.entity_id
              AND   xe.application_id = 200
              AND   xe.event_type_code  IN (''FULL_MERGE'',''PARTIAL_MERGE'')
              AND   xe.reference_num_1 = alo.from_vendor_id
              AND   xe.reference_num_2 = alo.from_vendor_site_id
              AND   xe.reference_num_3 = alo.to_vendor_id
              AND   xe.reference_num_4 = nvl(alo.to_vendor_site_id,xe.reference_num_4))
     AND   EXISTS (
             SELECT ''Need to merger invoice''
             FROM xla_ae_lines xel,
                  xla_ae_headers xeh,
                  xla_transaction_entities_upg xte
             WHERE xte.application_id = 200
             AND   xel.application_id = xeh.application_id
             AND   xeh.accounting_entry_status_code = ''F''
             AND   xte.application_id = xeh.application_id
             AND   xel.ae_header_id = xeh.ae_header_id
             AND   xte.entity_code = ''AP_INVOICES''
             AND   xte.ledger_id = ai.set_of_books_id
             AND   nvl(xte.source_id_int_1,(-99)) = ai.invoice_id
             AND   xte.entity_id = xeh.entity_id
             AND   xel.party_id = alo.from_vendor_id
             AND   xel.party_site_id = alo.from_vendor_site_id)
     UNION ALL
     SELECT alo.to_vendor_id,
            nvl(alo.to_vendor_site_id,ai.vendor_site_id) to_vendor_site_id,
            alo.org_id,
            ai.invoice_id source_id_int_1,
            alo.from_vendor_id,
            alo.from_vendor_site_id,
            ai.invoice_num source_number,
            ''AP_INVOICES'' entity_code,
            ai.set_of_books_id ledger_id
     FROM ap_invoices_all ai,
        ap_ledger_options alo
     WHERE ai.set_of_books_id = alo.set_of_books_id
     AND   ai.vendor_id = alo.to_vendor_id
     AND   ai.vendor_site_id = nvl(alo.to_vendor_site_id,ai.vendor_site_id)
     AND   alo.merge_acct_option_code = ''CHANGE''
     AND   EXISTS (
             SELECT ''Need to merger invoice''
             FROM xla_ae_lines xel,
                  xla_ae_headers xeh,
                  xla_transaction_entities_upg xte
             WHERE xte.application_id = 200
             AND   xel.application_id = xeh.application_id
             AND   xeh.accounting_entry_status_code = ''F''
             AND   xte.application_id = xeh.application_id
             AND   xel.ae_header_id = xeh.ae_header_id
             AND   xte.entity_code = ''AP_INVOICES''
             AND   xte.ledger_id = ai.set_of_books_id
             AND   nvl(xte.source_id_int_1,(-99)) = ai.invoice_id
             AND   xte.entity_id = xeh.entity_id
             AND   xel.party_id = alo.from_vendor_id
             AND   xel.party_site_id = alo.from_vendor_site_id)
     UNION ALL
     SELECT alo.to_vendor_id,
            nvl(alo.to_vendor_site_id,ac.vendor_site_id) to_vendor_site_id,
            alo.org_id,
            ac.check_id source_id_int_1,
            alo.from_vendor_id,
            alo.from_vendor_site_id,
            to_char(ac.check_number) source_number,
            ''AP_PAYMENTS'' entity_code,
            aip.set_of_books_id ledger_id
     FROM ap_checks_all ac,
          ap_invoice_payments_all aip,
          ap_ledger_options alo
     WHERE aip.set_of_books_id = alo.set_of_books_id
     AND   aip.check_id = ac.check_id
     AND   ac.vendor_id = alo.to_vendor_id
     AND   ac.vendor_site_id = nvl(alo.to_vendor_site_id,ac.vendor_site_id)
     AND   alo.merge_acct_option_code = ''TRANSFER''
     AND   alo.paid_invoices_flag = ''Y''
     AND   NOT EXISTS (
             SELECT ''No Merge Entry in xla for this vendor site''
             FROM xla_transaction_entities_upg xte,
                  xla_events xe
             WHERE xte.application_id = 200
             AND   xte.ledger_id = alo.set_of_books_id
             AND   xte.entity_code = ''THIRD_PARTY_MERGE''
             AND   xe.entity_id = xte.entity_id
             AND   xe.application_id = 200
             AND   xe.event_type_code  IN (''FULL_MERGE'',''PARTIAL_MERGE'')
             AND   xe.reference_num_1 = alo.from_vendor_id
             AND   xe.reference_num_2 = alo.from_vendor_site_id
             AND   xe.reference_num_3 = alo.to_vendor_id
             AND   xe.reference_num_4 = nvl(alo.to_vendor_site_id,xe.reference_num_4))
     AND   EXISTS (
             SELECT ''Need to merger invoice''
             FROM xla_ae_lines xel,
                  xla_ae_headers xeh,
                  xla_transaction_entities_upg xte
             WHERE xte.application_id = 200
             AND   xel.application_id = xeh.application_id
             AND   xeh.accounting_entry_status_code = ''F''
             AND   xte.application_id = xeh.application_id
             AND   xel.ae_header_id = xeh.ae_header_id
             AND   xte.entity_code = ''AP_PAYMENTS''
             AND   xte.ledger_id = aip.set_of_books_id
             AND   nvl(xte.source_id_int_1,(-99)) = ac.check_id
             AND   xte.entity_id = xeh.entity_id
             AND   xel.party_id = alo.from_vendor_id
             AND   xel.party_site_id = alo.from_vendor_site_id)
     UNION ALL
     SELECT alo.to_vendor_id,
            nvl(alo.to_vendor_site_id,ac.vendor_site_id ) to_vendor_site_id,
            alo.org_id,
            ac.check_id source_id_int_1,
            alo.from_vendor_id,
            alo.from_vendor_site_id,
            to_char(ac.check_number) source_number,
            ''AP_PAYMENTS'' entity_code,
            aip.set_of_books_id ledger_id
     FROM ap_checks_all ac,
          ap_invoice_payments_all aip,
          ap_ledger_options alo
     WHERE aip.set_of_books_id = alo.set_of_books_id
     AND   aip.check_id = ac.check_id
     AND   ac.vendor_id = alo.to_vendor_id
     AND   ac.vendor_site_id = nvl(alo.to_vendor_site_id,ac.vendor_site_id )
     AND   alo.merge_acct_option_code = ''CHANGE''
     AND   alo.paid_invoices_flag = ''Y''
     AND   EXISTS (
             SELECT ''Need to merger invoice''
             FROM xla_ae_lines xel,
                  xla_ae_headers xeh,
                  xla_transaction_entities_upg xte
             WHERE xte.application_id = 200
             AND   xel.application_id = xeh.application_id
             AND   xeh.accounting_entry_status_code = ''F''
             AND   xte.application_id = xeh.application_id
             AND   xel.ae_header_id = xeh.ae_header_id
             AND   xte.entity_code = ''AP_PAYMENTS''
             AND   xte.ledger_id = aip.set_of_books_id
             AND   nvl(xte.source_id_int_1,(-99)) = ac.check_id
             AND   xte.entity_id = xeh.entity_id
             AND   xel.party_id = alo.from_vendor_id
             AND   xel.party_site_id = alo.from_vendor_site_id)'
  );


  add_signature(g_signatures,
    248,
    'SUPPLIER',
    '',
    '21497508',
    '1489862.1',
    'ap_one_off_scripts_sel.sql Supplier-Tax AWT',
    'Inactive vendor site causes double amounts on 1099 payment report',
    'Apply the GDF patch following the instructions provided in [1489862.1]',
    'Y',
    'N',
    impact_area_tbl('Automatic Witholding Tax'),
    'SELECT /*+ parallel(inactive,6) */
            ''TAX2'' corruption_type,
            inactive.vendor_id,
            inactive.vendor_site_id,
            inactive.inactive_date
     FROM ap_supplier_sites_all inactive
     WHERE tax_reporting_site_flag = ''Y''
     AND   inactive_date is not null
     AND   EXISTS (
             SELECT 1 FROM ap_supplier_sites_all active
             WHERE active.org_id = inactive.org_id
             AND   active.vendor_id = inactive.vendor_id
             AND   active.vendor_site_id <> inactive.vendor_site_id
             AND   active.tax_reporting_site_flag = ''Y'')
     AND   inactive.vendor_id =nvl(##$$VND$$##, inactive.vendor_id)'
  );


  add_signature(g_signatures,
    434,
    'SUPPLIER',
    '',
    '21983844',
    '1370214.1',
    'iby_orphan_acct_sel.sql',
    'Orphan bank accounts which are not upgraded and have no owners or assignments.',
    'Apply the GDF patch following the instructions provided in [1370214.1]',
    'Y',
    'N',
    impact_area_tbl('Payment Selection'),
    'SELECT ''IBY'' acct_source,
            ext_bank_account_id,
            bank_account_num,
            bank_id,
            branch_id,
            currency_code,
            country_code,
            bank_account_type,
            account_suffix,
            null ext_payee_id,
            null payee_party_id,
            null account_owner_party_id,
            null payment_function
     FROM iby_ext_bank_accounts eba
     WHERE NOT EXISTS(
             SELECT ''OWNER'' FROM iby_account_owners ao
             WHERE ao.account_owner_party_id <> -99
             AND   ao.ext_bank_account_id = eba.ext_bank_account_id)
     AND   NOT EXISTS(
             SELECT ''ASSIGNMENT'' FROM iby_pmt_instr_uses_all iu
             WHERE iu.instrument_type = ''BANKACCOUNT''
             AND   iu.instrument_id = eba.ext_bank_account_id)
     AND   NOT EXISTS (
             SELECT ''UPGRADE_ASSIGNMENT'' FROM iby_upg_instruments ui
             WHERE ui.instrument_type = ''BANKACCOUNT''
             AND   ui.instrument_id = eba.ext_bank_account_id)
     UNION
     SELECT ''AR'',
            ao.ext_bank_account_id,
            null, null, null, null, null, null, null,
            ep.ext_payee_id,
            ep.payee_party_id,
            ao.account_owner_party_id,
            ep.payment_function
     FROM iby_account_owners ao,
          iby_external_payees_all ep
     WHERE ao.account_owner_party_id = ep.payee_party_id
     AND   ep.payment_function = ''AR_CUSTOMER_REFUNDS''
     AND   NOT EXISTS (
             SELECT 1 FROM iby_pmt_instr_uses_all piu
             WHERE piu.ext_pmt_party_id = ep.ext_payee_id
             AND   piu.instrument_id = ao.ext_bank_account_id)
     UNION
     SELECT ''CE'',
            ao.ext_bank_account_id,
            null, null, null, null, null, null, null,
            ep.ext_payee_id,
            ep.payee_party_id,
            ao.account_owner_party_id,
            ep.payment_function
     FROM iby_account_owners ao,
     iby_external_payees_all ep
     WHERE ao.account_owner_party_id = ep.payee_party_id
     AND   ep.org_type = ''LEGAL_ENTITY''
     AND   NOT EXISTS (
             SELECT 1 FROM iby_pmt_instr_uses_all piu
             WHERE piu.ext_pmt_party_id = ep.ext_payee_id
             AND   piu.instrument_id = ao.ext_bank_account_id)
     ORDER BY 13, 1'
  );


END load_signatures;

-- END LOAD PROCEDURES --


------------------------------------------------------
------------------------------------------------------
-- PUBLIC PROCEDURES
------------------------------------------------------
------------------------------------------------------


-----------------------------------
-- Procedure to list the signatures 
-----------------------------------
PROCEDURE list_signatures IS

  FUNCTION build_data( sig in SIGNATURE_REC) RETURN VARCHAR2 IS
    l_data VARCHAR2(1000);
    l_sig_type VARCHAR2(10);
  BEGIN
    SELECT decode(sig.category,
             'GENERAL', decode(sig.gdf_flag,'Y','GEN','NGDF-GEN'),
             'INVOICE', decode(sig.gdf_flag,'Y','INV','NGDF-INV'),
             'PAYMENT', decode(sig.gdf_flag,'Y','PMT','NGDF-PMT'),
             'SUPPLIER', decode(sig.gdf_flag,'Y','VND','NGDF-VND'))
    INTO l_sig_type FROM dual;
          
    l_data := l_sig_type||' '||to_char(sig.sig_id)||':';
    l_data := rpad(l_data,16,' ');
    IF sig.bug_number is not null THEN
      l_data := l_data||'BUG: '||sig.bug_number||' ';
      l_data := rpad(l_data, 30, ' ');
    END IF;
    IF sig.note_number is not null THEN
      l_data := l_data||'NOTE: '||sig.note_number;
      IF length(l_data) > 32 THEN
        l_data := rpad(l_data,46,' ');
      ELSE
        l_data := rpad(l_data,32,' ');
      END IF;
    END IF;
    IF sig.script_name is not null THEN
      l_data := l_data||'SCRIPT: '||sig.script_name||' ';
    END IF;
    return(l_data);
  END build_data;  

BEGIN
  g_signatures.delete();
  load_signatures;

  FOR i in g_signatures.first..g_signatures.last LOOP
    dbms_output.put_line(build_data(g_signatures(i)));
  END LOOP;
END list_signatures;
      

------------------------------------------
-- Main process driver and entry point
------------------------------------------

PROCEDURE main(
      p_invoice_id in NUMBER default null,
      p_check_id in NUMBER default null,
      p_vendor_id in NUMBER default null,
      p_start_date in DATE default null,
      p_end_date in DATE default null,
      p_org_ids in VARCHAR2 default null,
      p_trx_type in VARCHAR2 default 'ALL',
      p_validations in VARCHAR2 default 'GDF',
      p_max_output_rows in NUMBER default 10,
      p_print_to_stdout in VARCHAR2 default 'N',
      p_debug_mode      in VARCHAR2 default 'N') IS


  l_file_location VARCHAR2(300);
  l_step          VARCHAR2(20);
BEGIN
  l_step := '100';
  initialize_files(l_file_location);

  l_step := '200';
  print_header;
  validate_parameters(
      p_invoice_id, p_check_id, p_vendor_id, p_start_date, p_end_date,
      p_org_ids, p_trx_type, p_validations, p_max_output_rows,
      p_print_to_stdout, p_debug_mode);

  l_step := '300';
  print_header('PARAMETERS');
  print_header('IMPACT_SUMMARY');
  print_header('RPC_STATUS');
  print_header('STATISTICS_STATUS');
  print_header('NOTES');

  IF g_signatures.count = 0 THEN
    load_signatures;
  END IF;

  l_step := '400';
  IF (g_validations in ('ALL','GDF')) THEN

    l_step := '410';
    g_gdf := true;
    print_header('GDF');
    write_dx(' <gdf>');

    l_step := '420';
    print_header('GENERAL');
    write_dx('  <trx type="general">');
    l_step := '421';
    l_step := '422';
    detect('GENERAL','Y');
    l_step := '423';
    write_dx('  </trx>');

    l_step := '450';
    IF ((g_mode = 'DATERANGE' AND g_trx_type in ('INVOICE','ALL')) OR
       g_invoice_id is not null) THEN
      l_step := '451';
      print_header('INVOICE');
      l_step := '452';
      write_dx('  <trx type="invoice" id="'||g_invoice_id||'">');
      l_step := '453';
      detect('INVOICE','Y');
      l_step := '454';
      write_dx('  </trx>');
    END IF;

    l_step := '460';
    IF ((g_mode = 'DATERANGE' AND g_trx_type IN ('PAYMENT','ALL')) OR
       g_check_id is not null) THEN
      write_dx('  <trx type="payment" id="'||g_check_id||'">');
      l_step := '461';
      print_header('PAYMENT');
      l_step := '462';
      l_step := '463';
      detect('PAYMENT','Y');
      l_step := '464';
      write_dx('  </trx>');
    END IF;

    l_step := '470';
    IF ((g_mode = 'DATERANGE' AND g_trx_type IN ('SUPPLIER','ALL')) OR
       g_vendor_id is not null) THEN
      l_step := '471';
      print_header('SUPPLIER');
      l_step := '472';
      write_dx('  <trx type="vendor" id="'||g_vendor_id||'">');
      l_step := '473';
      detect('SUPPLIER','Y');
      l_step := '474';
      write_dx('  </trx>');
    END IF;
    print_out('</div></div>'); -- END GDF Section Header
    write_dx(' </gdf>');
  END IF;

  l_step := '500';
  IF (g_validations in ('ALL','NON-GDF')) THEN
    l_step := '510';
    g_gdf := false;
    print_header('NON-GDF');
    write_dx(' <non_gdf>');

    l_step := '511';
    print_header('NON_GDF_GENERAL');
    write_dx('  <trx type="general">');
    l_step := '512';
    detect('GENERAL','N');
    write_dx('  </trx>');

-- Note next 3 items designed in case we allow Non-GDF in date range in the
-- future - currently we will never get here in that case 
-- because the validation type will be set to GDF only.

    l_step := '520';
    IF ((g_mode = 'DATERANGE' AND g_trx_type in ('INVOICE','ALL')) OR
       g_invoice_id is not null) THEN
      l_step := '521';
      print_header('NON_GDF_INVOICE');
      write_dx('  <trx type="invoice" id="'||g_invoice_id||'">');
      l_step := '523';
      detect('INVOICE','N');
      write_dx('  </trx>');
    END IF;

    l_step := '530';
    IF ((g_mode = 'DATERANGE' AND g_trx_type IN ('PAYMENT','ALL')) OR
       g_check_id is not null) THEN
      l_step := '531';
      print_header('NON_GDF_PAYMENT');
      write_dx('  <trx type="payment" id="'||g_check_id||'">');
      l_step := '532';
      detect('PAYMENT','N');
      write_dx('  </trx>');
    END IF;

    l_step := '540';
    IF ((g_mode = 'DATERANGE' AND g_trx_type IN ('SUPPLIER','ALL')) OR
       g_vendor_id is not null) THEN
      l_step := '541';
      print_header('NON_GDF_SUPPLIER');
      l_step := '542';
      write_dx('  <trx type="vendor" id="'||g_vendor_id||'">');
      l_step := '543';
      detect('SUPPLIER','N');
      l_step := '544';
      write_dx('  </trx>');
    END IF;

    print_out('</div></div>'); -- End NON-GDF Section
    write_dx(' </non_gdf>');
  END IF;

  l_step := '550';
  -- Wrap up
  IF NOT g_is_concurrent THEN
    IF g_retcode > 0 THEN
      dbms_output.put_line(chr(10)||'*** Data integrity issues were found ***');
      dbms_output.put_line('Please review the log and output files for details.');
    ELSE
      dbms_output.put_line(chr(10)||'The process completed successfully.');
      dbms_output.put_line('No data integrity issues were found.');
    END IF;
  END IF;

  l_step := '560';
  print_performance_info;

  IF g_impacts_tbl.count > 0 THEN
    l_step := '570';
    populate_impact_summary;
  END IF;

  l_step := '580';
  debug('Printing MGD DX Summary');
  write_dx('</issues>');
  write_dx('######END MGD DX SUMMARY######-->');
  print_dx_summary(g_dx_summary);

  l_step := '590';
  debug('Printing analyzer DX Summary');
  print_anlz_dx;
  print_out('</BODY></HTML>');

  l_step := '600';
  close_files;

EXCEPTION WHEN OTHERS THEN
  g_errbuf := 'Error in procedure MAIN (step: '||l_step||') '||sqlerrm;
  g_retcode := '2';
  print_log(g_errbuf);
  print_error(g_errbuf||' See log file for more details.');
  close_files;
END main;

------------------------------------------------------------------------
-- Main process driver and entry point for date range concurrent process
------------------------------------------------------------------------

PROCEDURE main_cp (
      errbuf            out VARCHAR2,
      retcode           out VARCHAR2,
      p_trx_type        in VARCHAR2 default 'ALL',
      p_start_date      in VARCHAR2 default null,
      p_end_date        in VARCHAR2 default null,
      p_org_ids         in VARCHAR2 default null,
--      p_validations     in VARCHAR2 default 'GDF', removed for now for dev
      p_max_output_rows in NUMBER default 10,
      p_debug_mode      in VARCHAR2 default 'N') IS
BEGIN
  g_retcode := 0;
  g_errbuf := null;

  main(
      p_start_date  => to_date(p_start_date,'YYYY-MM-DD HH24:MI:SS'),
      p_end_date  => to_date(p_end_date, 'YYYY-MM-DD HH24:MI:SS'),
      p_org_ids  => p_org_ids,
      p_trx_type  => p_trx_type,
      p_validations => 'GDF',
      p_max_output_rows  => p_max_output_rows,
      p_debug_mode => p_debug_mode);

      retcode := g_retcode;
      errbuf := g_errbuf;

EXCEPTION WHEN OTHERS THEN
  retcode := '2';
  errbuf := 'Error in main_cp: '||sqlerrm||' : '||g_errbuf;
END main_cp;

------------------------------------------------------------------------
-- Main process driver and entry point for single trx concurrent process
------------------------------------------------------------------------

PROCEDURE main_cp_single (
      errbuf            out VARCHAR2,
      retcode           out VARCHAR2,
      p_invoice_id      in NUMBER default null,
      p_check_id        in NUMBER default null,
      p_vendor_id       in NUMBER default null,
      p_validations     in VARCHAR2 default 'GDF',
      p_debug_mode      in VARCHAR2 default 'N') IS
BEGIN
  g_retcode := 0;
  g_errbuf := null;

  IF p_invoice_id is null AND p_check_id is null and p_vendor_id is null THEN
    g_errbuf := 'You must specify at least one invoice, check, or vendor id';
    raise app_exception;
  END IF;

  main(
      p_invoice_id => p_invoice_id,
      p_check_id => p_check_id,
      p_vendor_id => p_vendor_id,
      p_validations => p_validations,
      p_debug_mode => p_debug_mode);

      retcode := g_retcode;
      errbuf := g_errbuf;

EXCEPTION WHEN OTHERS THEN
  retcode := '2';
  errbuf := 'Error in main_cp_single: '||sqlerrm||' : '||g_errbuf;
END main_cp_single;


END; -- Package body
/
show errors
exit
